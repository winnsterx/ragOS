{
  "docstore/metadata": {
    "da6d8f50-17df-4277-b562-36c4fb2945d9": {
      "doc_hash": "795ef5c8f7731a9afecfd25efec4ccc7ba96867eb024f6d57b3a6bac93eec701"
    },
    "3cb07e1e-a972-4b15-8864-3b8808c9aa85": {
      "doc_hash": "827897ef2fdf26135718ba7cee154caaf2a72ec2fa0127aed4ef4d1b6769b257"
    },
    "7b57235f-87b5-42d8-a8f2-4939052b47a8": {
      "doc_hash": "b30475f747bca71d2cc31b05b3b43696ee247c107b8156de7654a034859a5725"
    },
    "a5402da5-10e5-4cad-88ab-37b26d552e5a": {
      "doc_hash": "e7ce94512d6f70c719833a207949510f80645c0061caaa06244da613b912e1f1"
    },
    "d0430c8b-3920-4c2c-a677-9efa91473af7": {
      "doc_hash": "362618007d257d345814b16b81ffa5cd3d4763629cc64081c34aa509431889b7"
    },
    "b79260c6-ee80-4821-9ff1-b144808cefba": {
      "doc_hash": "683bcbac1e472a9d971d450268bf2b2facc66c2a57c8991c7ac83d5d1be12127"
    },
    "52fe421e-157e-4fba-939f-ad9df0f7a916": {
      "doc_hash": "aa970fbb2f18e583486dab8700959167e1ca4aa2988778ead4fbd3931490c373"
    },
    "8bace2cd-e1a2-4dfd-b52f-1fc842a42a90": {
      "doc_hash": "bc0fbf522b9302b9393c9763ae744b33553e0c809193388fb9d892b4380ff4e6"
    },
    "4941c0c4-d920-47a7-ad59-7d6f709b5301": {
      "doc_hash": "65d7f8e625efe0c4dbd9db7a008fec2ff47f0d7792506b57ae48f9ed89f1daa7"
    },
    "8b81e5a0-c866-4fa8-8c9d-92b540ca6fa2": {
      "doc_hash": "e63b5c54571f5e7777a25741faaa68791ebbd4172aee73cb08cd85c8a347dac8"
    },
    "7412287d-bc29-44c8-867c-2e7a678a60f2": {
      "doc_hash": "1f7cc2d040398b2dbb39bfbfbec2246f1baf49ebd660c50020418118c83122c5"
    },
    "4e32d862-8a4e-463e-9bb7-724f60bc1dad": {
      "doc_hash": "ab453655798bf20a6f7013998cee6e7e0e5284a01fb0cfd4a45b6dd3b8fed085"
    },
    "d5b40f05-89e7-469e-8c8e-33b89df900e0": {
      "doc_hash": "1f5145eb750677ffd31c9e4abfe7bf814f86925df78a5804c5b3d03a9f493013"
    },
    "21d69f33-12c7-48c8-943e-ec7c63538fdb": {
      "doc_hash": "5a612d526dbb532422f5f9fddd0227f3ed5b219b021bb3fcfd13c4c34846820c"
    },
    "e1dd58a1-1655-4846-bd2c-dbe87e3b1d8d": {
      "doc_hash": "69edc8c0cea0517adc25e62d3ac05bc4c3165d29e568e3308f1bb5f9f55b817c"
    },
    "0e5ec832-5e40-4111-90fb-2402796144c8": {
      "doc_hash": "3a892d9e13d5bba8694fd37b78acbcef4127d1d8dd12094668da6d3fe422d894"
    },
    "aa629b38-5cac-4440-a2db-f69d9742fbf0": {
      "doc_hash": "2575696e920253c6ec2695d66b113092fef82c30e0260d854c6350d710340868"
    },
    "8a578ba5-7a1b-4646-8ff1-c4c25a415168": {
      "doc_hash": "80e69484839f31f89df52636a316e0b2e4e70f885b570797dcf19eedfaca54e0"
    },
    "775a1596-77f5-4642-80af-2f9ead7f2134": {
      "doc_hash": "e6f0c014baa56ff32c4861f00fbfca70286719ce1bee1272e3af5f423a7217ff"
    },
    "1760b2bf-567c-445d-b307-22e6f964e9b7": {
      "doc_hash": "7ef2dd1e485a09fc74a12b799f79779693cb40b648a2ee6cbf61621442038e83"
    },
    "d1f6290b-658f-4ec1-8bd8-65f7c563197f": {
      "doc_hash": "c3551dffbab3f0879da9f373b2fc47f21a7a41d4ea6a0b3d64b3b47553beb431"
    },
    "f704ac66-8744-4697-8c70-c06e3af28252": {
      "doc_hash": "ce8ba39b9db8a39afdae99d7d30ff75bb7f4d1c5ea067f163d9f434e1fdcdc19"
    },
    "1493b302-b7ca-4fdb-ad36-39a0d5bff339": {
      "doc_hash": "a0e85b883fbf78e97c7b9c89708e327f7e204dbd1c9a3613a1281ac513d69960"
    },
    "24ef60e9-a5fe-4906-b98d-9620e68c7ea4": {
      "doc_hash": "a6c920acd415f8b0d407151a9884f4da76e3ef6eb45c55fd5b28874684ab194c"
    },
    "93ccc7a7-6629-4b22-a86d-f45c045d69dd": {
      "doc_hash": "214e2f0ad7d1be000f08d664e882a212e114468cb105dab9ac6ec98bc91df763"
    },
    "d900b4c4-d458-49a3-8141-7a0ef3bb1da2": {
      "doc_hash": "012e4db91ad7405298d101714181ef3d3d04111b417b482935dc7bf33d05f7b1"
    },
    "5e676915-5512-4fc1-bcb6-dec5818071d0": {
      "doc_hash": "81c1e1ec9966f4a732594aa3b2d31ee3d9f85b5fe2d9d49ab1aa839f5ad21341"
    },
    "f1da73bb-4483-4e5f-9678-0832489b4100": {
      "doc_hash": "03e84b066cf0caf4a5a80741a687ec58327ce31fd8449d415aa43ae001e34add"
    },
    "f09998f0-322a-489e-92c7-82363ddc7e7c": {
      "doc_hash": "646eaf8fdfa7e11ca2fe7bf76f711ca054e11d114744eae0e9717ca1197cdfce"
    },
    "f53eff25-b0df-4569-a4dd-285ec231f4cb": {
      "doc_hash": "2979787a746e07feda3faa33ff260cb2cd0d4539ea7358a1e58ef8a99d07676c"
    },
    "26604887-0847-45aa-aea2-bdc17b6461ff": {
      "doc_hash": "0da60c96d3be317a69486e3230f470058f7eb967ffd8c41a4e645cb99edf5c99"
    },
    "b3eaa467-6b24-495d-92c4-5a7b0713c147": {
      "doc_hash": "84fbdf033eea8464adbe2e3eef82318f45006f6844ec9cf9469b53d9c3bf313d"
    },
    "26b2192d-413a-426a-90b0-7be83cc7661e": {
      "doc_hash": "6fdfa8d48b3e695dd01564b9c5105367f1ed4e305fd793cbc9484b4123dd1cef"
    },
    "e96b71db-d4f3-48f5-ab28-6e5ae24398b8": {
      "doc_hash": "173ea365a603a03c8af2248d4c590a46cee207e642ce05c1834659171dd3be77"
    },
    "74eb5f6d-42d2-44b7-a555-3d0b4372542c": {
      "doc_hash": "5337342cdf363adecc8b96e3e1ea6217f57ad6e3d68e508605666966c94d16dc"
    },
    "b2f47d6c-6224-4cab-95ce-da038ac94744": {
      "doc_hash": "0b06a888060519c408b2668055427d9b144ba0d3686c0a609f8f563bba70f7c9"
    },
    "c0e46bff-e238-4d81-8a71-430603928398": {
      "doc_hash": "b12441671e72e96d711dc8c4ae12867c4f3a82c7b767eca759bc56cf0b698294"
    },
    "b829193a-3ec3-488f-a4b9-9e3f8bec16db": {
      "doc_hash": "4adba433165f38f2302a3df5df653877ddc556f37eef2172f5f7f61b7194e065"
    },
    "04424a6d-a9ec-4307-b135-c9f8d95037fc": {
      "doc_hash": "689da0358fc0164fdfe889c470e00d31d72a0dbce462deefe433dbef56b31b5f"
    },
    "e2e993b4-339f-4956-9491-c0595edfebaa": {
      "doc_hash": "78c8e5e78dd072208ba5d428d40b75ebd75d71e4357be53d33db1fe54a9b3f2d"
    },
    "e18b5b3e-751b-4475-a303-240255fc90f1": {
      "doc_hash": "4023805f4a22e7c9e81012ec49909a1ed832f5942f0321d630c94345db7ec24a"
    },
    "e7447797-cfc5-436f-a4df-01bc405b3e42": {
      "doc_hash": "990bed822637bc3b072fb31dcd0a67db73156e48536728cc74ddd0a0b4342455"
    },
    "52aa8f96-d12b-4100-a683-2fabce06375d": {
      "doc_hash": "b8d6b931cbe57a4c1123c327a282574e45279a7c11e7005634ccc033c6c2e514"
    },
    "6489b718-0596-4d95-a998-6f7ef42684b2": {
      "doc_hash": "e13546b79b28e7d034db96699009039b833cc4e1a6d44fee6c9e541aad3b115d"
    },
    "589d0ad3-61e0-4613-a4af-f4c284376bb6": {
      "doc_hash": "4b627a6e19b9a393359e2b7a47fc21c3c712d1d43d68ffa6e309af754381e7fa"
    },
    "8b04af71-4392-4f23-9ef9-16d89e9567e1": {
      "doc_hash": "eb8d4d56369d8820defa05f0bfc2454afb8bf209689c75c1738466fcd9ac324b"
    },
    "bdc434d1-669c-4ce4-b8ca-d756924c94ab": {
      "doc_hash": "79867b675279e872165566b49e2feb8b2b7f677245522769fc1ef3b0efe8fdef"
    },
    "ee12588f-82df-4d5c-afbd-19272bc78758": {
      "doc_hash": "4fc916b90bc3edcdc01884cde7d6c19d778fa99ebd33638aaaf18ee84c9d49cf"
    },
    "b00058e7-ce28-419b-9328-b074993f2aed": {
      "doc_hash": "ddf0147efe4fdf9326cd9bd053ab8fb35312626346b089101ba66f6d57c2d566"
    },
    "c1698da0-b0f3-4f8f-847b-efdb17132cbd": {
      "doc_hash": "6f64a93f00334c61988d02f381c0ec99c0a05305160c0a464ee185dd3d97c596"
    },
    "3c5c4648-9cc0-40de-91d4-e8fd6b54b660": {
      "doc_hash": "c9d1bd67cf75685a30a023e16fe280398347d9d217055bec00d8eac4141d9d49"
    },
    "3c47c642-2780-43fd-ab6c-ce6ca6aef292": {
      "doc_hash": "0792d2dffc2dd647056520b8e279751bb215e65dad44b0ccc4d8b977874f1d64"
    },
    "8d963132-457e-4acf-8848-e17995edf9d0": {
      "doc_hash": "d801ce200eb98b3f60e162f5014aa3b480a328f7e2f69c1936d6a2e55ecab5ec"
    },
    "9964dc49-ebfc-450a-96c9-de158ebe113f": {
      "doc_hash": "ee667d021351914702b1eb8654514bb5f1aa1e60725bbab6e2bba97d7b36213c",
      "ref_doc_id": "da6d8f50-17df-4277-b562-36c4fb2945d9"
    },
    "0c2e48b9-73da-4f43-babc-3b18cf6f7214": {
      "doc_hash": "76fa7ac690c79a94b28c653805cc82d2fa00e40b19a84440059a5444c7510aaa",
      "ref_doc_id": "3cb07e1e-a972-4b15-8864-3b8808c9aa85"
    },
    "85f12440-2271-485c-ad4e-8496778b575b": {
      "doc_hash": "ca49309587267f1214db1cab415f1de19e598c006ef88e4aaad9863f7e3efafb",
      "ref_doc_id": "3cb07e1e-a972-4b15-8864-3b8808c9aa85"
    },
    "ad0fb2a3-e94f-49f4-b21d-51da4589d3c2": {
      "doc_hash": "5b64c8f8e8ce5366227946ce0cdb2445e3060474578ea2d79b7913766d1dd0df",
      "ref_doc_id": "7b57235f-87b5-42d8-a8f2-4939052b47a8"
    },
    "24e6c414-4be5-45df-bc79-c03531869c3a": {
      "doc_hash": "844557556426fe5043911f89032c8cd1e5bded7d17a4f57ac84902464cbeb355",
      "ref_doc_id": "a5402da5-10e5-4cad-88ab-37b26d552e5a"
    },
    "de4cfc0b-56b3-4241-aadc-02422a183732": {
      "doc_hash": "68519b70a4aebb7acab66db9ef53eed71d13a025c568afc310161794b555c9ad",
      "ref_doc_id": "a5402da5-10e5-4cad-88ab-37b26d552e5a"
    },
    "d4fa09ce-3b39-41da-bf22-6244167ddc89": {
      "doc_hash": "b75876b5a67dedf798d1b7a626e57bfd5dacc91f7954bd6041d0b4e9230adddb",
      "ref_doc_id": "a5402da5-10e5-4cad-88ab-37b26d552e5a"
    },
    "b96927de-27fa-4d7d-8103-754b42f0692a": {
      "doc_hash": "753aed58b905bf7643b71b5a1881a814c61195e1b3abb5f04652fdcb6358c83e",
      "ref_doc_id": "a5402da5-10e5-4cad-88ab-37b26d552e5a"
    },
    "9f573fe0-7021-4542-a36b-bee5e32ad298": {
      "doc_hash": "db8a5817d28e793c2fbb1ed607854c7b1cff84dc3ca1354bb610ffcb6ef5d61f",
      "ref_doc_id": "a5402da5-10e5-4cad-88ab-37b26d552e5a"
    },
    "5dc15948-0824-476a-a37c-54a781e0eece": {
      "doc_hash": "c4957676096941f56cba01fca17536c81b94e91fb08fd9b1823ab20ee1ffcc10",
      "ref_doc_id": "a5402da5-10e5-4cad-88ab-37b26d552e5a"
    },
    "41d94ac2-9f56-4291-9a4c-e68d24b653b1": {
      "doc_hash": "efc39850acc6a3a242a5d32da5f8b31057529b428c76b2e42402f99b182c52e1",
      "ref_doc_id": "a5402da5-10e5-4cad-88ab-37b26d552e5a"
    },
    "3236e272-f1b2-410f-a311-8ada5d747880": {
      "doc_hash": "12d2a96741e5d86fcfebfb5709bc3cf478576fed9aceeee1cda7d0485f23cc83",
      "ref_doc_id": "a5402da5-10e5-4cad-88ab-37b26d552e5a"
    },
    "d385007c-ad47-4231-9aac-c38b724e62df": {
      "doc_hash": "48c39062d01934e89ed97e4b3451feba8f1d97a1a861e798545d38418f139449",
      "ref_doc_id": "a5402da5-10e5-4cad-88ab-37b26d552e5a"
    },
    "c0e4bfcd-4a19-4f5f-a96f-ebc07c8320a3": {
      "doc_hash": "d681d335f233dfc178b9a72535afdc889dad003aafdd6e22bd3904882d9d3c7a",
      "ref_doc_id": "a5402da5-10e5-4cad-88ab-37b26d552e5a"
    },
    "f020f23f-7cf2-499d-a5b0-253c9d99b047": {
      "doc_hash": "dde934f677c81d97106671afa15706f0bf5a510e6122b62d81087a56516daa42",
      "ref_doc_id": "a5402da5-10e5-4cad-88ab-37b26d552e5a"
    },
    "1f67b334-0f66-4815-a36a-bf8b0ad6b3d0": {
      "doc_hash": "0f572521ed3f06ca9bb09f4c639bc66c2d0857914dc50cb02fdbbcd6f2ef00c3",
      "ref_doc_id": "a5402da5-10e5-4cad-88ab-37b26d552e5a"
    },
    "0d02d136-a814-49ac-bd9e-2da19939fa39": {
      "doc_hash": "bdf95cd2b2a9cafaf5a72f08e54fd973981263e2e88536f23b7af5a15f10aba9",
      "ref_doc_id": "a5402da5-10e5-4cad-88ab-37b26d552e5a"
    },
    "a367e7d1-51bd-4bad-8569-ac94f712069a": {
      "doc_hash": "ae532e663e02062cdd46264b6ea61e0e16e82158b54154ca1b924d3c87523c68",
      "ref_doc_id": "a5402da5-10e5-4cad-88ab-37b26d552e5a"
    },
    "9652eed2-57cb-4984-899b-c8cb45836ecd": {
      "doc_hash": "b05f86747db1c385f38969c452e986f1e6941589cec20625708661112228f739",
      "ref_doc_id": "a5402da5-10e5-4cad-88ab-37b26d552e5a"
    },
    "cbf43e7b-09cf-4e42-bf25-80d9493232d9": {
      "doc_hash": "c29cae46fbc70bd93772a3de118b0fc6edf757b998eba9d976abde1ef1a1ecc5",
      "ref_doc_id": "a5402da5-10e5-4cad-88ab-37b26d552e5a"
    },
    "6d93f9de-1013-4e3a-9e63-e7ab1826bf4d": {
      "doc_hash": "f4d1c84a925f4fba3d4e94a8af29843e81f7b651faaf42a93a3374a009ec8401",
      "ref_doc_id": "d0430c8b-3920-4c2c-a677-9efa91473af7"
    },
    "a6f4b51c-1a05-4239-a66d-46af4f8a4689": {
      "doc_hash": "651f6b9076b11bb1f09b29e4c4387acee5ec0465ae881bdd276f2efb02f4021b",
      "ref_doc_id": "b79260c6-ee80-4821-9ff1-b144808cefba"
    },
    "fd5dad1f-0aa5-463c-ae84-9af0badfedce": {
      "doc_hash": "69dd9d1f739b589473b5e83d7bb6246fbe6eb669631db91e64449701f1450d96",
      "ref_doc_id": "52fe421e-157e-4fba-939f-ad9df0f7a916"
    },
    "21c92f2b-ff5d-4cf0-ae87-c4bf806119ad": {
      "doc_hash": "403b7e7a479fa1049765b0b5237cf0cebc85f44e70f0c5069e3e0a71616ebc6a",
      "ref_doc_id": "52fe421e-157e-4fba-939f-ad9df0f7a916"
    },
    "e855d2ae-6914-46f7-96f6-10a18d197360": {
      "doc_hash": "52312b5a5154e94ec533ac5d752865ebd1d612ba6dc74459b02713193b67417d",
      "ref_doc_id": "8bace2cd-e1a2-4dfd-b52f-1fc842a42a90"
    },
    "1f643ec2-f04d-4887-8c88-2692c764d682": {
      "doc_hash": "6b89a1b468896578f3d7edea8e3c8032d83338ea450813170ebe9e412d58b543",
      "ref_doc_id": "4941c0c4-d920-47a7-ad59-7d6f709b5301"
    },
    "002ce96f-ffcc-40e0-b2a4-f625b68f55be": {
      "doc_hash": "ea8ca63c39fb1a3474ba0dd433f974dc842e5e0445b542414e71ce664f6b87e7",
      "ref_doc_id": "4941c0c4-d920-47a7-ad59-7d6f709b5301"
    },
    "0998911d-fdb6-48e4-b118-7c2d4efbeaf8": {
      "doc_hash": "81562c0c5550422709fbb250c29fcc9a1ddb0ed8ae20676be3af96ba90d64240",
      "ref_doc_id": "8b81e5a0-c866-4fa8-8c9d-92b540ca6fa2"
    },
    "112ac152-9c9d-406f-ba78-6afe67303cf7": {
      "doc_hash": "268bb7757369283ecfe61ea15f7e16cbe4dd629aeb0c73f9c7c9bfb9d64bf98c",
      "ref_doc_id": "7412287d-bc29-44c8-867c-2e7a678a60f2"
    },
    "9b7ef78c-f08b-4f56-86a1-3ddda86b0645": {
      "doc_hash": "9ad9e5f778e636922a4e0b81c877968bea2ba0f1e5752ccdf5581b6b8ec36166",
      "ref_doc_id": "4e32d862-8a4e-463e-9bb7-724f60bc1dad"
    },
    "2d743ff6-ebde-47af-9298-0a9d9b64098c": {
      "doc_hash": "85aa8e757ef881f0e2ad87ab963bd3a8766b376b7caf6113521ae19e25971cc6",
      "ref_doc_id": "d5b40f05-89e7-469e-8c8e-33b89df900e0"
    },
    "61b49f61-2e40-4792-b5d4-f5bf95489e13": {
      "doc_hash": "dd5dd3a345dfe22707d5e154891ad1554ff352d707e08741790476536a22e038",
      "ref_doc_id": "21d69f33-12c7-48c8-943e-ec7c63538fdb"
    },
    "610061e5-08f3-4ab2-918f-5d71970208ad": {
      "doc_hash": "9f34227944884c5936ee0a093ef4ce88fc2eb663c6cfaa8b81becb8eedd57b5d",
      "ref_doc_id": "e1dd58a1-1655-4846-bd2c-dbe87e3b1d8d"
    },
    "1df7b78e-d883-4148-b5c8-3b6e071cb4cf": {
      "doc_hash": "c1b04def916cac9d06ba552dfdf4d739ada53d9c20954aeaaf6179ec2c056d4d",
      "ref_doc_id": "e1dd58a1-1655-4846-bd2c-dbe87e3b1d8d"
    },
    "09248f01-b0cf-4114-9602-367d37bcf60f": {
      "doc_hash": "9a06ad35584811b3c4d5ad47fbd6255cc260f59c68876d0f33696117f9fafc70",
      "ref_doc_id": "e1dd58a1-1655-4846-bd2c-dbe87e3b1d8d"
    },
    "ad2b5cb1-e2af-4d68-891a-e297dd0b0dbb": {
      "doc_hash": "e85b6573ca14b8a0bd1ecafc59ba5aeec3477cdccbec366013f7f332e8b9a89a",
      "ref_doc_id": "e1dd58a1-1655-4846-bd2c-dbe87e3b1d8d"
    },
    "df53392e-b34f-46c7-b11c-68340917877e": {
      "doc_hash": "746bb844eed0f466f71e65be149c12576989ef04cf56f3a657ed316681ecd1c8",
      "ref_doc_id": "e1dd58a1-1655-4846-bd2c-dbe87e3b1d8d"
    },
    "e3cf9e1b-3609-40ac-b4cf-a6bba834ac1a": {
      "doc_hash": "ecd84897ef89349d69182a9a0a6c94e546a633eeb377437a4a6a5286d78659af",
      "ref_doc_id": "e1dd58a1-1655-4846-bd2c-dbe87e3b1d8d"
    },
    "9ee175cc-707a-4d1f-8952-1dc4b22bf115": {
      "doc_hash": "14dad5729ef48205a9e15b65398a037705d519ab27e21569c3cb7838f82eccaf",
      "ref_doc_id": "e1dd58a1-1655-4846-bd2c-dbe87e3b1d8d"
    },
    "326912d7-afdb-4c5a-9c57-0f55ccabe400": {
      "doc_hash": "325276241d8f9986ca19629335443cb01846ca19b219db7ad01213f7f7ac3e8d",
      "ref_doc_id": "e1dd58a1-1655-4846-bd2c-dbe87e3b1d8d"
    },
    "c6298b77-55ba-4f1b-914e-1a9a62185ce1": {
      "doc_hash": "f043c1d0cf2d49153a707ca81109b2101aac83213227669779a9bb320acd5556",
      "ref_doc_id": "0e5ec832-5e40-4111-90fb-2402796144c8"
    },
    "2dfff652-e893-403f-83c3-8333f9013947": {
      "doc_hash": "39b432264adfaab159f7c3e3b6d6650429b903225ce9debda9507b16f530ec4b",
      "ref_doc_id": "aa629b38-5cac-4440-a2db-f69d9742fbf0"
    },
    "ee631768-43a8-42df-a2bd-c333477b6333": {
      "doc_hash": "49a3b4a0ee581a277f34f01e38a8b5e2a67fa83b5ab6163f644a3c486c13695f",
      "ref_doc_id": "8a578ba5-7a1b-4646-8ff1-c4c25a415168"
    },
    "5400d990-b59d-44f9-9384-a6b7d97ca8a1": {
      "doc_hash": "1595f3a50762e16c771a22b427aa3cbedee06b5a1f85618a0f529b24a33c919e",
      "ref_doc_id": "8a578ba5-7a1b-4646-8ff1-c4c25a415168"
    },
    "70b69885-dbbd-40e6-adc1-fe149953f6d6": {
      "doc_hash": "c1ee743350601d2f85c0db7d116d044973eb53cb52f3337145da3462401d49cf",
      "ref_doc_id": "8a578ba5-7a1b-4646-8ff1-c4c25a415168"
    },
    "ec0c7d54-5759-4549-8478-0a44e33f5672": {
      "doc_hash": "49a95884dff7dd18d6d27e6a8ae969b5d87342e9f9e44d2a65a78e672a0ba8d8",
      "ref_doc_id": "8a578ba5-7a1b-4646-8ff1-c4c25a415168"
    },
    "1f34dba1-dd49-4236-9a20-52b3f5aebc58": {
      "doc_hash": "b3de6ac09982e0290ab28b06bc2759caa707b85bee5ac6f6f232d20495a7ba58",
      "ref_doc_id": "8a578ba5-7a1b-4646-8ff1-c4c25a415168"
    },
    "a312476c-d788-45dc-a718-4fd3c06c9bcb": {
      "doc_hash": "cdacb0ccea8452c67e8f665fc3d6fb9b66788fb67b671d7d74d66dadfc5fe170",
      "ref_doc_id": "8a578ba5-7a1b-4646-8ff1-c4c25a415168"
    },
    "b63c30d5-23dc-4a14-accb-b352fb5e882a": {
      "doc_hash": "f43c5fe04052751a739787313266b30d123ecc592ae37b8a5b1d173784177a9b",
      "ref_doc_id": "8a578ba5-7a1b-4646-8ff1-c4c25a415168"
    },
    "576d317a-7e3b-4d0b-96ca-b5b4b3f374ad": {
      "doc_hash": "db92dfb3c8f5b7acedaaa4c5916bbb0bddca58b95ecb544a3fe190552ca8fb83",
      "ref_doc_id": "775a1596-77f5-4642-80af-2f9ead7f2134"
    },
    "5440e1cc-02d6-4016-970d-31bdd2b57d07": {
      "doc_hash": "af5ef248d674438176274f51fd28cd7c6530a0081ab026b63a7102ead8d56d1c",
      "ref_doc_id": "775a1596-77f5-4642-80af-2f9ead7f2134"
    },
    "3ecb3c78-b5e8-4528-a177-8bdfa9e6ccd3": {
      "doc_hash": "decc2c82b4640aaa33e2c4823f365c0ef94d07555128911b666091fb21d4e2f2",
      "ref_doc_id": "775a1596-77f5-4642-80af-2f9ead7f2134"
    },
    "dba834ca-dab2-4831-b2d0-8471a3d060e4": {
      "doc_hash": "8eb314c925eb3059ad1f0497aa654a264f5b4ed630a4c88f35fce951feadbbf5",
      "ref_doc_id": "775a1596-77f5-4642-80af-2f9ead7f2134"
    },
    "9da843f8-6e9f-4a2e-8095-a1df76e3b247": {
      "doc_hash": "63d0c24a249533ad09ce575ab8ac7279843262617488d361fc5d8f75767f9a70",
      "ref_doc_id": "775a1596-77f5-4642-80af-2f9ead7f2134"
    },
    "d1ada899-0d70-4c31-9538-31cde12809ef": {
      "doc_hash": "e5f22226a9ae03391eaa15300d2690d776c93e337183b851456b223d0a21f116",
      "ref_doc_id": "775a1596-77f5-4642-80af-2f9ead7f2134"
    },
    "1703b6b8-8bb6-4a63-a246-c0dd35b45564": {
      "doc_hash": "ebcdff8621c968528a3d7a7a7594753803a180e15ffa2ff4734563c14c3d3c4c",
      "ref_doc_id": "775a1596-77f5-4642-80af-2f9ead7f2134"
    },
    "46056be1-b47c-45cb-8c06-ea2e70c1ad06": {
      "doc_hash": "bdd14b7feb18b0fb26852544cc4de7e6a42f4734017797e7a8b1876bd4b337d6",
      "ref_doc_id": "775a1596-77f5-4642-80af-2f9ead7f2134"
    },
    "ce326ed6-39ba-4961-a1a9-8d9cfab591b2": {
      "doc_hash": "3422e6fc25ab1d2dc753c678d570fef8315cc89092e366bc195f237b8f449b38",
      "ref_doc_id": "775a1596-77f5-4642-80af-2f9ead7f2134"
    },
    "d9703c2d-1591-46fa-bccb-84dd94f48531": {
      "doc_hash": "6679bf39a14eed74c2aacab6a05691779e4cee1a68d8e9fb3082bdfe2556a180",
      "ref_doc_id": "775a1596-77f5-4642-80af-2f9ead7f2134"
    },
    "808b2407-f5ee-43b4-a076-7c05457b91c4": {
      "doc_hash": "779295b5f96c2c117e257cfb3a7de2384a9850c7082ce7179f4d8b9ea4703fbf",
      "ref_doc_id": "775a1596-77f5-4642-80af-2f9ead7f2134"
    },
    "50f3e5ec-9f29-4ced-80e4-92e37482b829": {
      "doc_hash": "f875feb43328b1fc95b91e526f6061e48faf58487c5d8225468da4a266258405",
      "ref_doc_id": "775a1596-77f5-4642-80af-2f9ead7f2134"
    },
    "2405cfc3-9869-412f-a9c6-6efcf03d072c": {
      "doc_hash": "43dd07aa3bb7df720396c2dfefae7ed9d3984ee4dade64f2247bb7aed1441f8f",
      "ref_doc_id": "775a1596-77f5-4642-80af-2f9ead7f2134"
    },
    "ed7a9d6d-33ce-477c-8dad-a1bc7ca4f03c": {
      "doc_hash": "faa68d76affe9570f73c5d7290ae2446e26f30e0cd70424ba5ef1052795ccfa7",
      "ref_doc_id": "775a1596-77f5-4642-80af-2f9ead7f2134"
    },
    "a739c4ae-732c-4b76-8d8c-d506708cdc1f": {
      "doc_hash": "30c0f1d4543af1a0009172f150a2d296c26da2f0c0f79a37cad14854c9c08cb2",
      "ref_doc_id": "775a1596-77f5-4642-80af-2f9ead7f2134"
    },
    "bb7e6b92-7180-4a14-a1e6-9391212f5264": {
      "doc_hash": "0c82e1581cfdf1cebb0e9638cc3173b03d2ed380902ae3860bbf27848db0c74e",
      "ref_doc_id": "775a1596-77f5-4642-80af-2f9ead7f2134"
    },
    "5303bae3-97b9-4655-8f5c-ef33dd873d81": {
      "doc_hash": "b77e335d5af68ae5cfc0e841d4a2fdeb086872877e60c5b473046456babe6deb",
      "ref_doc_id": "775a1596-77f5-4642-80af-2f9ead7f2134"
    },
    "257909c7-7113-4b00-a3e0-45c7adfce6bd": {
      "doc_hash": "62bd2b4391bc149e973719c52706970cfbafe18d24fc47d7b075c4a6c079af5f",
      "ref_doc_id": "775a1596-77f5-4642-80af-2f9ead7f2134"
    },
    "cdf109bf-b3be-4aac-af0a-2874e77a44b9": {
      "doc_hash": "cf51a9c7d7affc2e6af375a2e2568ecf92949f7334154905b193cc49cad6e507",
      "ref_doc_id": "775a1596-77f5-4642-80af-2f9ead7f2134"
    },
    "88f12b13-f280-41ad-9aad-c6d1ad434192": {
      "doc_hash": "eb72d8691b66f86c19b116b55f0f5ec0c41c80c98bfe01b076379d0e776ae20b",
      "ref_doc_id": "775a1596-77f5-4642-80af-2f9ead7f2134"
    },
    "3b55de4d-1776-40c8-8239-ee62f2aaa5f5": {
      "doc_hash": "f8a90190bb6c581c7d33bc385ca9d89f2e2eb3824a0d90b192420cef294096d2",
      "ref_doc_id": "775a1596-77f5-4642-80af-2f9ead7f2134"
    },
    "bc8b8b93-eaf4-469a-b8bb-4493d1ea82da": {
      "doc_hash": "088d30940cfcf378cc8795ffe795eed679ab98b1c899dfa23790043fa4fb94c0",
      "ref_doc_id": "775a1596-77f5-4642-80af-2f9ead7f2134"
    },
    "655cc94b-1685-4b9d-b251-0daf7c6af2d8": {
      "doc_hash": "d555954f39cb0c912a64e74986a8bb6e91aefeb9a35287626a6fee5dba3c4956",
      "ref_doc_id": "775a1596-77f5-4642-80af-2f9ead7f2134"
    },
    "b18ecf5c-e61c-4920-a86a-1e790216fd26": {
      "doc_hash": "ae2ab56d1f59949bfe3bcf11e7fc0c355f63b3a8ff20ba5389ee9366ee85b619",
      "ref_doc_id": "1760b2bf-567c-445d-b307-22e6f964e9b7"
    },
    "691f2189-cffa-4537-8ed4-3cae0ec5a0c7": {
      "doc_hash": "3cb7464f00555a6332db76627a214fdc6c5c0a95071cdad41585bf6bb4cfe351",
      "ref_doc_id": "1760b2bf-567c-445d-b307-22e6f964e9b7"
    },
    "d07d3e7c-3c64-4503-946a-01d747499b7b": {
      "doc_hash": "befc69d4e82762d4123eb53befc52ec35579e6d0ae121389f26e447c689b603d",
      "ref_doc_id": "1760b2bf-567c-445d-b307-22e6f964e9b7"
    },
    "d1f1fed0-52b3-4987-95eb-6cd3e26ea311": {
      "doc_hash": "fe2db6e60020b4c50b89b5f9563aee6029ec0d3ddce089ce271d9a986ef0ae03",
      "ref_doc_id": "1760b2bf-567c-445d-b307-22e6f964e9b7"
    },
    "60c91bd4-1ff2-4088-9738-4bb341bc6f94": {
      "doc_hash": "24979f48decb641a29f160d11346369c108e0d82c2603032f7a75ee9e9ea2228",
      "ref_doc_id": "1760b2bf-567c-445d-b307-22e6f964e9b7"
    },
    "27efba46-99ea-4352-afdc-79a7485e8213": {
      "doc_hash": "8c33b9e96437ad3ad26d5fd09a42987081aa7065dffe9bccc31c5ec16e057039",
      "ref_doc_id": "1760b2bf-567c-445d-b307-22e6f964e9b7"
    },
    "f3c5ea33-d21c-430a-9bc8-c2bc40376191": {
      "doc_hash": "8bda0e4c463336e848ad265045b723b8b178428c43cc802dbd90b3177b8a5dd9",
      "ref_doc_id": "1760b2bf-567c-445d-b307-22e6f964e9b7"
    },
    "14b2773c-e341-4fb6-aad1-85d061f9e16a": {
      "doc_hash": "852bcf6e764f8738a2aea7f5471cfbbaafcca521ddfff849f86ef800a57360eb",
      "ref_doc_id": "1760b2bf-567c-445d-b307-22e6f964e9b7"
    },
    "043581dc-ddb9-4ebe-8723-f027867d4afe": {
      "doc_hash": "9615ca7623677278179b555ee6de40ecb08fcd3b820298d177327ae30ae13882",
      "ref_doc_id": "1760b2bf-567c-445d-b307-22e6f964e9b7"
    },
    "7b23b817-8a51-48f5-9dfe-54933b8ec74d": {
      "doc_hash": "4d60db26f2f4a39eb2616c25de1ebf49ed8833089ee5c21f79215929acc6539b",
      "ref_doc_id": "1760b2bf-567c-445d-b307-22e6f964e9b7"
    },
    "48a55e52-c68e-480c-b2e8-2ba93135c8ce": {
      "doc_hash": "f8fe941414472e44d3c91060cb1f389dede535cd3e500c662c3c10537e9769ef",
      "ref_doc_id": "1760b2bf-567c-445d-b307-22e6f964e9b7"
    },
    "210cdb8b-87bd-48e1-b5c5-500f28dd9f68": {
      "doc_hash": "e4ad199a45e633198862e60c38bd022d22200e23353091eab8fc61aafb470b2c",
      "ref_doc_id": "1760b2bf-567c-445d-b307-22e6f964e9b7"
    },
    "a78e7dd7-adcb-4fdc-a667-83ebcd2d0c83": {
      "doc_hash": "57db737ebb0fdbc6937d427e4c090f3c6643243647292491e621a096d36b2583",
      "ref_doc_id": "1760b2bf-567c-445d-b307-22e6f964e9b7"
    },
    "7e4f53a3-6306-4604-b0cb-4ee49048f3e6": {
      "doc_hash": "7dbe5a1c66e6c3105b0120aa3a6cbc95815260c19531536a9b4cd7b7e367a2a4",
      "ref_doc_id": "1760b2bf-567c-445d-b307-22e6f964e9b7"
    },
    "561259f6-6146-426f-a00e-589fb818da4d": {
      "doc_hash": "e79a13c17b2edb797212f477f11ecb24f09f725b2f28f14df22cbc339e3a9b4a",
      "ref_doc_id": "1760b2bf-567c-445d-b307-22e6f964e9b7"
    },
    "be31eeb4-8dba-4c4b-9390-750000109174": {
      "doc_hash": "5bab7067cb475fa62470a5d6f25026d6036673b7c50e2be601e336fe810411c9",
      "ref_doc_id": "1760b2bf-567c-445d-b307-22e6f964e9b7"
    },
    "e39d45d9-200d-4183-9c7a-2fd1f6a305ea": {
      "doc_hash": "806f3be352bec4884fe910d718dea6bee742920c3c93609ab4c58ca6bb3e8092",
      "ref_doc_id": "1760b2bf-567c-445d-b307-22e6f964e9b7"
    },
    "877cf157-4f19-4e6f-bb6c-93688a1e90bf": {
      "doc_hash": "871fa382f3389c779a0d194fd5c84a4f2b1b5ddec8ab4278b01caea2857e9177",
      "ref_doc_id": "1760b2bf-567c-445d-b307-22e6f964e9b7"
    },
    "264475de-19f5-4ce1-afe5-83ecafc5a589": {
      "doc_hash": "02e9ca2b9076fa23cd3da8a9bca8978f8aba6b1c1023eacb54a43599dfc710e4",
      "ref_doc_id": "1760b2bf-567c-445d-b307-22e6f964e9b7"
    },
    "6d6e87db-a119-40e9-aa96-cd47a2fa1a04": {
      "doc_hash": "6ad37d18ab357ed270b2532f3304cc813626a2112686ab0c7ab08b2614652168",
      "ref_doc_id": "1760b2bf-567c-445d-b307-22e6f964e9b7"
    },
    "f89aade3-d8ad-4914-b203-a535ed40e172": {
      "doc_hash": "d5d101a88960fa916f27f86952854c1e5c389c5fcae03c6786cf1c55dc6ec72a",
      "ref_doc_id": "d1f6290b-658f-4ec1-8bd8-65f7c563197f"
    },
    "5180efc2-9f78-43db-9930-8d137bc95818": {
      "doc_hash": "a4c0431ce4761b6deafc57a27c8dcf9737b7d3bbb7e609da623820a8c244456f",
      "ref_doc_id": "d1f6290b-658f-4ec1-8bd8-65f7c563197f"
    },
    "22e640ca-28ae-4ce6-8e5d-0a9ed9989d0c": {
      "doc_hash": "bab9ef11cde2e863c89b25b6ac06d07b40ae46a0d222e4a8de6d88a8c87afd96",
      "ref_doc_id": "d1f6290b-658f-4ec1-8bd8-65f7c563197f"
    },
    "4ffb8336-0912-4fd7-9925-adc04c642f3f": {
      "doc_hash": "44611b17ce642e3ee11407c831300460cee85334b60ea18f81078698534f4d05",
      "ref_doc_id": "d1f6290b-658f-4ec1-8bd8-65f7c563197f"
    },
    "128adaac-700f-45e4-bfa2-bf45b102c362": {
      "doc_hash": "1768465b995015debbbf60411b2fccaa2ac83912f6ab1ffd0c2a9b43c7b9f0c2",
      "ref_doc_id": "d1f6290b-658f-4ec1-8bd8-65f7c563197f"
    },
    "de1c79f9-ee30-4e5b-b062-ca583ca6a720": {
      "doc_hash": "4edf1bc98eb8ebefe2845cae5a5e963f6232153eac4007f794b626be9ebe4837",
      "ref_doc_id": "f704ac66-8744-4697-8c70-c06e3af28252"
    },
    "27a60777-4116-47c7-b705-cbd3eafa5f5b": {
      "doc_hash": "13c5780e7c7839f6ddbc7fbac8d4ad4adb2e75a1f6490c4103a5214c002bce14",
      "ref_doc_id": "f704ac66-8744-4697-8c70-c06e3af28252"
    },
    "04b785da-e897-47d0-b393-567fe996a7b7": {
      "doc_hash": "daeedd65688e9e2298db617d9a89fa13fc9e43934affb45db95bc7165c1244e5",
      "ref_doc_id": "f704ac66-8744-4697-8c70-c06e3af28252"
    },
    "684dce58-30f5-4bed-a8c7-996076bbe548": {
      "doc_hash": "816effb291d9c28ddf85fb2bc0a5a4397a78e529108e2aae82d8877e4f164b6c",
      "ref_doc_id": "f704ac66-8744-4697-8c70-c06e3af28252"
    },
    "f0449142-a468-47fe-8552-1c5dff7508c3": {
      "doc_hash": "3ae322f5332609e987eaee4611354a10fa9a34779814a37df9e02c36d9f8d4ae",
      "ref_doc_id": "f704ac66-8744-4697-8c70-c06e3af28252"
    },
    "88a05154-3994-4497-aaab-0abee055eb1c": {
      "doc_hash": "6d7eeb6f0ed86013e621365b3430c2d9d2215d3d38df1c3b10f1be10f22fc972",
      "ref_doc_id": "f704ac66-8744-4697-8c70-c06e3af28252"
    },
    "ec2fae4c-76cf-4048-bf24-317cdae844e5": {
      "doc_hash": "98810c0cdd7cf026c2f565eb4c97520e282b98444ea2121b2713d7c556e7d219",
      "ref_doc_id": "1493b302-b7ca-4fdb-ad36-39a0d5bff339"
    },
    "d968bc65-d1e9-4f17-b2bf-58b97a150768": {
      "doc_hash": "351233cc364e06d087888a25705e18dcdb1722d9f2b944e40ed2ac29992c4ddc",
      "ref_doc_id": "1493b302-b7ca-4fdb-ad36-39a0d5bff339"
    },
    "0c34b50a-1403-478d-adb0-ed0017c39c4b": {
      "doc_hash": "4edc3ee9c253b0a7b09358383dfeb13396dd67c07a86e5f0a55f3d652b38f1ec",
      "ref_doc_id": "1493b302-b7ca-4fdb-ad36-39a0d5bff339"
    },
    "b505d39f-64c7-4903-acb9-b2e07355a70a": {
      "doc_hash": "7aada9d7ed36503f3a53552b5d794d861e1bd8962a54f6a2907c3eadd5e67205",
      "ref_doc_id": "1493b302-b7ca-4fdb-ad36-39a0d5bff339"
    },
    "b71413ec-fbef-4c84-a34b-1b696ef91c5d": {
      "doc_hash": "d4406cf94c326acca19daa20459fa9e7f7571411d45c8d3f23d8252821de2fce",
      "ref_doc_id": "1493b302-b7ca-4fdb-ad36-39a0d5bff339"
    },
    "40552d33-514b-4661-a123-f6fd045f4d26": {
      "doc_hash": "63edd6a28eacda7b353c06e74e697bc33ccb06cfd2eb2b4413523900253299f0",
      "ref_doc_id": "24ef60e9-a5fe-4906-b98d-9620e68c7ea4"
    },
    "4484e424-16e4-4fa7-b169-994a23ae6d65": {
      "doc_hash": "ca33a44b2405b383b2351764b15d368df7004f1fb6b2ce71ef24d7c74b2f8d46",
      "ref_doc_id": "24ef60e9-a5fe-4906-b98d-9620e68c7ea4"
    },
    "a2c42716-321f-4c84-87dd-19c89c083703": {
      "doc_hash": "d8289392c3c06976bcc05c151f5e690f4d26cefb1be10aeb84354ee3e99e1fac",
      "ref_doc_id": "24ef60e9-a5fe-4906-b98d-9620e68c7ea4"
    },
    "5a7596ba-6a4a-46e7-ab1c-5e0e2f963249": {
      "doc_hash": "27fa7eb40d685964d0671b3aa64a400fb4c57c468f62969d2feb175b014f6a38",
      "ref_doc_id": "24ef60e9-a5fe-4906-b98d-9620e68c7ea4"
    },
    "ae746f1f-317d-424a-92a4-598c1de17f3c": {
      "doc_hash": "86fe06420e9a594b3e4dde3316220094b168d6fc4ad9da9d07eb05d3983c6288",
      "ref_doc_id": "24ef60e9-a5fe-4906-b98d-9620e68c7ea4"
    },
    "45a9f428-c0b6-4b03-870b-d72e209dd4c4": {
      "doc_hash": "f901f9d4ba2d52fdfc426e7502c7ac836f81a4ff402aa7538f19db0aba7672f4",
      "ref_doc_id": "24ef60e9-a5fe-4906-b98d-9620e68c7ea4"
    },
    "5a840a70-1afe-4617-afd2-870c6c3a0b00": {
      "doc_hash": "ca0c49c0eea7a08f8f7fd560a0cdda6644d9424bdc349f32a3aad91709701f67",
      "ref_doc_id": "24ef60e9-a5fe-4906-b98d-9620e68c7ea4"
    },
    "9d6c9af5-3d60-4bc4-91fc-abd243e4d539": {
      "doc_hash": "9898ac948019cb8d28a4b194767580f276a25dadb840d4035af3aeea315e2eaa",
      "ref_doc_id": "24ef60e9-a5fe-4906-b98d-9620e68c7ea4"
    },
    "e9100a29-120c-43df-bdb6-23417f4352eb": {
      "doc_hash": "5dd7e1c945d51f10759c7a058c1201154ab1050a1e0d10bef7f609579e7b0011",
      "ref_doc_id": "24ef60e9-a5fe-4906-b98d-9620e68c7ea4"
    },
    "6b29c435-3cad-4536-95c2-b913d6a80e3a": {
      "doc_hash": "7c1dee42092ba58cc1cf5cc84d21b3cd1207565490fed35aa0d61ec871655d4f",
      "ref_doc_id": "24ef60e9-a5fe-4906-b98d-9620e68c7ea4"
    },
    "e15d877d-7876-4d2d-9626-86ca743e596a": {
      "doc_hash": "eb41afa3e69c499e7c5768508301a07caae4265b2e0ae79e7d9b40800b027b4a",
      "ref_doc_id": "24ef60e9-a5fe-4906-b98d-9620e68c7ea4"
    },
    "06ee97eb-67f6-4909-b50d-539e9d85e31c": {
      "doc_hash": "671e4a085c92aa09f1edd4215a09a052b159a0b6140f045f6422bdd6ef59f0e8",
      "ref_doc_id": "24ef60e9-a5fe-4906-b98d-9620e68c7ea4"
    },
    "9ba9d8e4-1d36-4b01-bf3c-5ab205556bd0": {
      "doc_hash": "5fb437f81125d95c643350dbc11434cf121ffbbd2e396595f75ab19b0a713ed7",
      "ref_doc_id": "93ccc7a7-6629-4b22-a86d-f45c045d69dd"
    },
    "70acd3a6-f0b2-4158-8544-ea8c6fb686cb": {
      "doc_hash": "639ed64a2fb8ac69ae0995a10c1a5785ec815f58a8ff76aa8aeebd573c9d093c",
      "ref_doc_id": "d900b4c4-d458-49a3-8141-7a0ef3bb1da2"
    },
    "ec4d0811-20d1-4b78-a3c4-d9e90397961c": {
      "doc_hash": "6f69f85c43e8651cadd637b8fdf65813f00fcaf1c67becfa4a528b719fcf1cfb",
      "ref_doc_id": "d900b4c4-d458-49a3-8141-7a0ef3bb1da2"
    },
    "c83c805a-1e82-4ded-b92f-a487a2ff66a9": {
      "doc_hash": "e4b6f97aa98283488f617c0cf652096b65a070d67fcbc28d013d768f45979b22",
      "ref_doc_id": "5e676915-5512-4fc1-bcb6-dec5818071d0"
    },
    "ea16f1d0-82d6-4050-9a02-71b4ed07903a": {
      "doc_hash": "e0c9879f09537e45e17d6e44caa800a034a5d2f24857ba229b88fa1e8642de17",
      "ref_doc_id": "f1da73bb-4483-4e5f-9678-0832489b4100"
    },
    "a831fe36-b333-413f-b3bf-381d66b70cb0": {
      "doc_hash": "ea3e80d3e7ac3260c57becc913f0d8119e22b73631bf838cbdf170f9ff489a3e",
      "ref_doc_id": "f09998f0-322a-489e-92c7-82363ddc7e7c"
    },
    "0a0bda39-be3b-4651-baae-9bbae484b08b": {
      "doc_hash": "493f08ed5cebaabe4866126be490fa3b50ca3b7a6135242793fe80cafbfe4106",
      "ref_doc_id": "f09998f0-322a-489e-92c7-82363ddc7e7c"
    },
    "43031e2b-2954-4bd9-b4e4-4d8ffb0479a7": {
      "doc_hash": "2d529ee32ee0c7e3345726449106c9dafb1699c2095cf07695deda1512a9fa41",
      "ref_doc_id": "f09998f0-322a-489e-92c7-82363ddc7e7c"
    },
    "cd53566e-098a-45a4-bdd9-7426609b5e7b": {
      "doc_hash": "16c7b41552ebb91b31be1353403397534bf8991bf45a558e828dfdfc62971b33",
      "ref_doc_id": "f09998f0-322a-489e-92c7-82363ddc7e7c"
    },
    "cb1b26e0-eca8-4753-950d-aa822c6c3948": {
      "doc_hash": "af51c25373b3e72e3514a135bcc09d61947dc270846c95f3dd481f553a4757f7",
      "ref_doc_id": "f09998f0-322a-489e-92c7-82363ddc7e7c"
    },
    "c3838f41-3cad-4f29-8fcf-90185558d3b4": {
      "doc_hash": "62f1c36b5941635863bd9f861d10efc52d1147fee82e04cc8e077c8a59c10a49",
      "ref_doc_id": "f09998f0-322a-489e-92c7-82363ddc7e7c"
    },
    "13568fa7-93fb-430e-8b53-99d8fdcdc77b": {
      "doc_hash": "a406cc562d69cb96adea8970b99971c395d7eeff23f98bb824b19997d6d22fa7",
      "ref_doc_id": "f09998f0-322a-489e-92c7-82363ddc7e7c"
    },
    "0203fb4b-d32c-4988-9246-c2efb8d8ff53": {
      "doc_hash": "cd9ca9e73ff6e90883f56b7c03181b035df14675b6701a6d8200c8ef748521c7",
      "ref_doc_id": "f09998f0-322a-489e-92c7-82363ddc7e7c"
    },
    "7505963f-f930-4e08-9d29-d657eeffde2e": {
      "doc_hash": "b4193f923120d8ed264e5297ee11152433c61290fbb5105d649ca5fbedc6dc0c",
      "ref_doc_id": "f53eff25-b0df-4569-a4dd-285ec231f4cb"
    },
    "69b88068-ebaa-40a0-8ac6-5ec2681a2ab1": {
      "doc_hash": "ae8f66ecac9fa1bc18261f619b8e79a1102d847e3882425437b3aa625c10970f",
      "ref_doc_id": "f53eff25-b0df-4569-a4dd-285ec231f4cb"
    },
    "941b9651-96c8-4cc3-9cfa-cd68b14a9910": {
      "doc_hash": "53dddf9b5409553235f3d8f0d7080dae4043976acebefd97e0897439bc3efeed",
      "ref_doc_id": "26604887-0847-45aa-aea2-bdc17b6461ff"
    },
    "b2a9c38a-4134-4afc-8208-19f354cd3e67": {
      "doc_hash": "19be0a20cfecf5f0f655e2969c1d5e5827bc4173e4449a3746968ee860721a45",
      "ref_doc_id": "b3eaa467-6b24-495d-92c4-5a7b0713c147"
    },
    "b40a01ef-d941-48cc-b7d7-177cbffe3304": {
      "doc_hash": "6345e4a68b48cd43acd51fcef0bb4f72a120b213ccd035c839d6daea6dd16be4",
      "ref_doc_id": "b3eaa467-6b24-495d-92c4-5a7b0713c147"
    },
    "d0e5473f-48c9-4fd0-a8de-18a4c0f070d4": {
      "doc_hash": "69a63a326fa38ba84007322da83319e0e52e1ea59f12b48c9cf57dd0da2ee8aa",
      "ref_doc_id": "b3eaa467-6b24-495d-92c4-5a7b0713c147"
    },
    "7afd5431-8387-427c-9569-0a23b1b41ea2": {
      "doc_hash": "bff80e1d7a9a1c699dcb230ec83bcf0e14ce53756b7543806f2c3b10c343a803",
      "ref_doc_id": "26b2192d-413a-426a-90b0-7be83cc7661e"
    },
    "e9df8bf6-e94d-4889-98f2-af2d6abb2e4d": {
      "doc_hash": "25e452ebb921107047c35d5fa2670726a2d22b6e7d81896259b8850daaab1dec",
      "ref_doc_id": "e96b71db-d4f3-48f5-ab28-6e5ae24398b8"
    },
    "5308930d-8750-4199-adac-9619a3068efb": {
      "doc_hash": "586fce6cd4283cd0e7188aecac826cd4337f2949009ada5eca76067beeb63525",
      "ref_doc_id": "e96b71db-d4f3-48f5-ab28-6e5ae24398b8"
    },
    "ff4fa664-10fb-4ecd-8490-7a415aaaf691": {
      "doc_hash": "d19f793f1d30b8d51cdd791b1cc393077bb4bde34d91f2091398e5cec3e774e9",
      "ref_doc_id": "e96b71db-d4f3-48f5-ab28-6e5ae24398b8"
    },
    "16b6a56a-1502-4b09-8faf-538ce4f087fe": {
      "doc_hash": "7e589949f7fb79b08c4311921b089755011f2da442d7b5cf9021d2d82925c627",
      "ref_doc_id": "74eb5f6d-42d2-44b7-a555-3d0b4372542c"
    },
    "c96ec641-e4b5-4d3e-b59e-a273422d313f": {
      "doc_hash": "a5c563762b958146a3a46937414a78fbcf67db8ba38dea286d988fa117c22d9c",
      "ref_doc_id": "b2f47d6c-6224-4cab-95ce-da038ac94744"
    },
    "61fce21b-e69e-4d52-8806-d271d98c93dc": {
      "doc_hash": "e52c458799a2d3be818da0deb968c8e05779ac67c8e8a24e8e900916acf53732",
      "ref_doc_id": "c0e46bff-e238-4d81-8a71-430603928398"
    },
    "2a8d5087-b2c0-4743-af1f-4cedf012bc90": {
      "doc_hash": "f1848cb3afd578a06cf5f00c425f1a10a611c53a58d368c4e3bc7ab19ce1f207",
      "ref_doc_id": "b829193a-3ec3-488f-a4b9-9e3f8bec16db"
    },
    "2bf319a1-3239-4020-b9b9-701de6a7c068": {
      "doc_hash": "97105d9a9830b06828f0be222e97a046710ad1f9a9874b839c1183322719d7c6",
      "ref_doc_id": "04424a6d-a9ec-4307-b135-c9f8d95037fc"
    },
    "6aac1afa-46a7-4e43-892b-d6ebda6d7614": {
      "doc_hash": "5f78452cc9af1ec690d18a26b93e58bc438af4d4b7ee01d15b30ca9b5d95d0da",
      "ref_doc_id": "04424a6d-a9ec-4307-b135-c9f8d95037fc"
    },
    "0e95905f-ae7d-419a-940f-33529f315f11": {
      "doc_hash": "d76780d3fc2a93b64ab06dcdcfbbb53bb1fa8bc138ca0418d3e892c03e904432",
      "ref_doc_id": "04424a6d-a9ec-4307-b135-c9f8d95037fc"
    },
    "8c9cbc2f-99d9-43c4-9372-dbf27f91d4fb": {
      "doc_hash": "19ea6f926d504507817854b93ea961d0310ab2568e6be385cd3d7937e90b20c2",
      "ref_doc_id": "04424a6d-a9ec-4307-b135-c9f8d95037fc"
    },
    "748a28df-af66-4f5e-8927-d0e3ca37221f": {
      "doc_hash": "3dff4df51c74133299a66f444554742f5b5234f3dc587a404227138692d99b11",
      "ref_doc_id": "04424a6d-a9ec-4307-b135-c9f8d95037fc"
    },
    "94234594-5158-4035-9842-b51603b6c0d5": {
      "doc_hash": "254c5fd0d4d582bfdc20fbe440db85209ced12d3f83979c47fa238de6d759118",
      "ref_doc_id": "04424a6d-a9ec-4307-b135-c9f8d95037fc"
    },
    "82020273-3233-47b0-9749-7fb01bcb3173": {
      "doc_hash": "b2d987adfd2c4f2c313fc570d099725d60fef911091672216e9d6d7ae423f594",
      "ref_doc_id": "04424a6d-a9ec-4307-b135-c9f8d95037fc"
    },
    "52129057-61d8-4bf6-9d9e-d5e764ef724f": {
      "doc_hash": "0b9d90c40d468e08cb408df49a14e6ed72e3e2a4c425ed556cc60a455d0b3250",
      "ref_doc_id": "04424a6d-a9ec-4307-b135-c9f8d95037fc"
    },
    "973780a6-1aef-4d24-bc48-e839481592ec": {
      "doc_hash": "4113730bf2e693bee58425a03f70e57ed54b66aed074a95da6b18ffa0f19e258",
      "ref_doc_id": "04424a6d-a9ec-4307-b135-c9f8d95037fc"
    },
    "749a02f4-d585-4a0e-b739-0a139a9820da": {
      "doc_hash": "32f1b98d562d9da03b672728ffd222353f113c3485fae903e09f2a0e45b10d54",
      "ref_doc_id": "04424a6d-a9ec-4307-b135-c9f8d95037fc"
    },
    "a5bf9e73-43fd-495f-b158-9aae3d8deaa3": {
      "doc_hash": "72d2539400ff94e2f85b7dded4befa9e599f3ba784583af34fc6b415f13588aa",
      "ref_doc_id": "e2e993b4-339f-4956-9491-c0595edfebaa"
    },
    "0254e550-b604-4af1-a9d6-9da0054dcf3c": {
      "doc_hash": "ba8d60ab2e625cbb229d9c4167d43296f278e5fdb4408d08819e24ea760dd1a5",
      "ref_doc_id": "e2e993b4-339f-4956-9491-c0595edfebaa"
    },
    "ec1f0362-9857-442d-9ae3-98da581206f3": {
      "doc_hash": "e060bad0b0638cd87ccc43030c5f3a7d5b615268e5b03edcedfdc556d2245f54",
      "ref_doc_id": "e2e993b4-339f-4956-9491-c0595edfebaa"
    },
    "d54f760c-35e3-4a19-9316-66d6b1780df1": {
      "doc_hash": "79d106f15b5ed52053e4ae7871089d3c7dedf940b09b2ef384f6639106082a21",
      "ref_doc_id": "e2e993b4-339f-4956-9491-c0595edfebaa"
    },
    "9621b182-ab3d-40e9-a092-4f5cc234106c": {
      "doc_hash": "58897294d7defc3ade7035fdb9e3f0a21af349f159a5d47ab4fb513430ad4a86",
      "ref_doc_id": "e2e993b4-339f-4956-9491-c0595edfebaa"
    },
    "943f9da7-987f-41b7-99a8-f66699f44255": {
      "doc_hash": "0bd6fa6dcdb0dee8f7907a2aa57ce0f94953413c324ae82837b64d2c98d0e8c7",
      "ref_doc_id": "e2e993b4-339f-4956-9491-c0595edfebaa"
    },
    "238acfba-87cf-41db-886f-8b304b35e396": {
      "doc_hash": "d91270dab9ad90f5e8188878cccbad7c1445c0f6285b40a128665ade9192e039",
      "ref_doc_id": "e2e993b4-339f-4956-9491-c0595edfebaa"
    },
    "f75f1d02-dac7-4541-a370-38733fc3fb28": {
      "doc_hash": "eb9d072e64a1831e3ffbd61dbc183c8fa62060f2c296184f370e59434fe633e3",
      "ref_doc_id": "e2e993b4-339f-4956-9491-c0595edfebaa"
    },
    "22b4a0ac-4cc7-42a7-b69f-4d21a8bb37d1": {
      "doc_hash": "0a3892848b76c7c9d8f5eb9247b899b3cc05c13a8250efc1e80d3b6c24a926b5",
      "ref_doc_id": "e2e993b4-339f-4956-9491-c0595edfebaa"
    },
    "75cb36ad-3aae-48de-86d3-92818e7cd63c": {
      "doc_hash": "1337ae7756b3ea80f6785d6dc29ba696dda3c3098c53a37f3ffa4210d05814bc",
      "ref_doc_id": "e2e993b4-339f-4956-9491-c0595edfebaa"
    },
    "b9258295-208e-4aa4-91b9-1583060aa262": {
      "doc_hash": "9daba6c831a6f163f1e057677179daf1e8647d0ec46bcd9916042208d1a14696",
      "ref_doc_id": "e2e993b4-339f-4956-9491-c0595edfebaa"
    },
    "a6f90609-0917-479b-9fbe-b63e8d8bdc71": {
      "doc_hash": "a5b9bfe24ef9e71fa7c85264b58d16deb098269aba6d23f159aeda15fb37581c",
      "ref_doc_id": "e18b5b3e-751b-4475-a303-240255fc90f1"
    },
    "4babb374-f536-46ad-ae92-ed11f4d8d0f7": {
      "doc_hash": "2570be58374c7f1cabb5df1d6d34e59cc41bae597596f6802aa3c948cf407655",
      "ref_doc_id": "e7447797-cfc5-436f-a4df-01bc405b3e42"
    },
    "f7b8af00-b95e-4b79-bb76-22e7823d89c5": {
      "doc_hash": "76131713383d316fb09d6580c9d89d9c2c6371a77e15ee4481e237c08dc08276",
      "ref_doc_id": "e7447797-cfc5-436f-a4df-01bc405b3e42"
    },
    "35987dbb-ef07-4cd5-8d2b-a823e0f57294": {
      "doc_hash": "3044122efa0700770920e1d14c15ab5adf471c7f025c50d3a2513932cc22ad4a",
      "ref_doc_id": "e7447797-cfc5-436f-a4df-01bc405b3e42"
    },
    "d4ba86a9-0a12-4258-9b25-8eae9b4a99ea": {
      "doc_hash": "b7034ef0c4f29845540fe7c827c9d9c306b2405be8d6a1338b1c85ee0eb4bfeb",
      "ref_doc_id": "e7447797-cfc5-436f-a4df-01bc405b3e42"
    },
    "5441bebc-109a-494c-8aca-d65ca24d5729": {
      "doc_hash": "c5c28e02acc042c87fd74d9dd1673a4d5a6310a197885029fc0ffa8a5b828229",
      "ref_doc_id": "52aa8f96-d12b-4100-a683-2fabce06375d"
    },
    "0660f123-8c74-46f2-84e9-d083f9f952fd": {
      "doc_hash": "78dd726e6c2de7775ff85e2675f7637ac2e44a1b1a28d17c008d455b13e9b622",
      "ref_doc_id": "6489b718-0596-4d95-a998-6f7ef42684b2"
    },
    "5f028014-d275-4494-a9a1-e2a381477611": {
      "doc_hash": "3e1c99894e37bd739ac5ef47db03624a490b6dc5c223423f3d510f67cc019513",
      "ref_doc_id": "589d0ad3-61e0-4613-a4af-f4c284376bb6"
    },
    "9fb1d197-ba9b-45f1-980f-5369ef1b3114": {
      "doc_hash": "bdb12b88deb0e0f4594a646c6430f82916a9143f0d45fbfa234ab0b77dd40f54",
      "ref_doc_id": "589d0ad3-61e0-4613-a4af-f4c284376bb6"
    },
    "bf9563b5-f52a-480c-9d2f-0065718ee7ba": {
      "doc_hash": "a59417dd6ba444eefee7072c26023970bd8bd02e9ecf8b2428a3347a79841bb1",
      "ref_doc_id": "589d0ad3-61e0-4613-a4af-f4c284376bb6"
    },
    "8a68714c-e9b1-47db-a0e2-9b266ecdefb2": {
      "doc_hash": "2f3920cc1702a8c8b3a36eb1036b0ce57e4b1231af8654ff57e318139fb17905",
      "ref_doc_id": "589d0ad3-61e0-4613-a4af-f4c284376bb6"
    },
    "ef401163-7a44-4a0e-933a-0494fea60d69": {
      "doc_hash": "03f833021b78bb3c0691732d792151f1efcf4d61b323edbbbafa38ff1e2c1ac9",
      "ref_doc_id": "589d0ad3-61e0-4613-a4af-f4c284376bb6"
    },
    "2f792bd6-1e79-46a7-82a6-25dffb18b431": {
      "doc_hash": "540f92d463699fee2585ecf8f964e12fe651425588cdc26b844cbc5280d5f521",
      "ref_doc_id": "589d0ad3-61e0-4613-a4af-f4c284376bb6"
    },
    "4f8e34c8-8100-462a-a8dc-2634e8b39557": {
      "doc_hash": "0972ef4716026f2f251c48c01f01a90d0f418d0b189ca5adf39471449fe05d5f",
      "ref_doc_id": "589d0ad3-61e0-4613-a4af-f4c284376bb6"
    },
    "30bcc146-d841-4939-8865-2449bc93b35c": {
      "doc_hash": "5dedab2dccbcda0419685d831afc1dff719431da1d0d2b3cbf72b97534b44dee",
      "ref_doc_id": "8b04af71-4392-4f23-9ef9-16d89e9567e1"
    },
    "808df8bb-b94e-4ff1-9ff4-552b7019dfaf": {
      "doc_hash": "34d2617b75964cb9b3f588ec7c2551f7382f2b579f38588e916fcc2a5d86917d",
      "ref_doc_id": "bdc434d1-669c-4ce4-b8ca-d756924c94ab"
    },
    "6704a0f5-4799-4f60-b1ae-ea5f61a98e0a": {
      "doc_hash": "0923fbf9c061f3fcd1a78568b9cb5b741c2c73f80277d373ae3f59a312b4f0e1",
      "ref_doc_id": "bdc434d1-669c-4ce4-b8ca-d756924c94ab"
    },
    "6cb9484f-1f0b-4539-9cb3-51915eaadd50": {
      "doc_hash": "97cdae44d3da90465196b53ea17098af52d0c0ab14547ad215bdd0f99914b451",
      "ref_doc_id": "bdc434d1-669c-4ce4-b8ca-d756924c94ab"
    },
    "0bbf90a5-aa8b-4736-b33f-7bf4df666884": {
      "doc_hash": "b7ae3466c19abf141d66a35c55b4ba4f71137c0b1eae749cd09c290735ea7267",
      "ref_doc_id": "bdc434d1-669c-4ce4-b8ca-d756924c94ab"
    },
    "bcd683d1-7544-4a8f-a08d-20f87db6c9b6": {
      "doc_hash": "8ed6e4e8f6824f706acc1c988c987c7691da356770665c8854a4a969b94dd65d",
      "ref_doc_id": "ee12588f-82df-4d5c-afbd-19272bc78758"
    },
    "6807fbcf-d4fb-4b29-b0d7-24f88b451b0a": {
      "doc_hash": "e7cd664284640ffff6b8d407b26146b6360657dda043959a6bd96c4a29fc5bf2",
      "ref_doc_id": "b00058e7-ce28-419b-9328-b074993f2aed"
    },
    "21d7f0d2-1222-4724-b86a-dcacb08d7a0d": {
      "doc_hash": "bd071516323a5439fc56952f930945cef4cc2f9ca8d75a2396d3355274099ecc",
      "ref_doc_id": "c1698da0-b0f3-4f8f-847b-efdb17132cbd"
    },
    "979c319a-d3eb-464e-9ad7-df3ff9ecbe2e": {
      "doc_hash": "334669b6d9f749197f0ccc27829dcb76f91689b69709bc714be220cad28c5c95",
      "ref_doc_id": "c1698da0-b0f3-4f8f-847b-efdb17132cbd"
    },
    "134ab959-f3f9-4e7e-9996-64416e380f62": {
      "doc_hash": "9a354ffba388bc4e8415cbe7072e50d217d38a4ac4582c0f389aa0ad4fab28e2",
      "ref_doc_id": "c1698da0-b0f3-4f8f-847b-efdb17132cbd"
    },
    "0aa70024-be72-44c5-8efe-c501680f7cda": {
      "doc_hash": "1a31052bcc6223242a2090baf31edd0e0a80974e458e6c97ee0e8e75cec3bdde",
      "ref_doc_id": "c1698da0-b0f3-4f8f-847b-efdb17132cbd"
    },
    "006f2691-d840-442d-9f4f-33f59af1ddbc": {
      "doc_hash": "dc4b986879ef4ad6a9f1e40127091f9aa1c8d83e5200fcc23a2ef1c976165369",
      "ref_doc_id": "c1698da0-b0f3-4f8f-847b-efdb17132cbd"
    },
    "9b80f7d6-d16f-4510-898c-7764ca000723": {
      "doc_hash": "85b6e995f141dcf82dc5c18fff1a3afc6dd49b8c06bbb2de28e26d7d090dc67e",
      "ref_doc_id": "c1698da0-b0f3-4f8f-847b-efdb17132cbd"
    },
    "a1e77dc7-43c9-4980-a5c3-a2d2faf5321f": {
      "doc_hash": "0c251661476a88e33c2de053ea125c295960fb39728ee22e1d8283ff59d12d27",
      "ref_doc_id": "c1698da0-b0f3-4f8f-847b-efdb17132cbd"
    },
    "e7bf8319-8855-41c7-b7c3-79497347c818": {
      "doc_hash": "19a39d1014784ac77ed3638f1514343702faca92f85707dec9e866f43b1b2280",
      "ref_doc_id": "3c5c4648-9cc0-40de-91d4-e8fd6b54b660"
    },
    "1957ee17-7db7-4cb8-ba63-b176f857c8c0": {
      "doc_hash": "89321bbf99dcb31537545798709d4e3343ca57da8f0032f3592891dca537fcc0",
      "ref_doc_id": "3c5c4648-9cc0-40de-91d4-e8fd6b54b660"
    },
    "c1e5609c-fbed-4dde-a319-91f0e097ec14": {
      "doc_hash": "b49bd7f8c598b378f501ce39e88560c4858daca92f91101fbab99db6a9ff255b",
      "ref_doc_id": "3c5c4648-9cc0-40de-91d4-e8fd6b54b660"
    },
    "c6465e20-4d8d-4dd1-979f-ce30f9f6dd97": {
      "doc_hash": "65e943f7e3ee71c7931fe24ae1aee996c1120b4a8737560c3957063a25058ea7",
      "ref_doc_id": "3c47c642-2780-43fd-ab6c-ce6ca6aef292"
    },
    "f8bce584-981a-4415-b3fc-f1206668a9e5": {
      "doc_hash": "e198edbd33d4cfb397d0cb08341082bc094354387f73516922087ffb5a5078de",
      "ref_doc_id": "3c47c642-2780-43fd-ab6c-ce6ca6aef292"
    },
    "e337e91a-e700-47d5-864f-c9417d634e45": {
      "doc_hash": "3aeab8ef6dc8cac8179207b4d7177101368bb3953be9949e42ec11cc4e75bfc2",
      "ref_doc_id": "3c47c642-2780-43fd-ab6c-ce6ca6aef292"
    },
    "ce32c131-6109-45d2-99e6-392ba5126684": {
      "doc_hash": "8e5095f93c6fc4187aecd60f04657c7655e8059dff26436079750990e3e12253",
      "ref_doc_id": "3c47c642-2780-43fd-ab6c-ce6ca6aef292"
    },
    "df33e539-ac02-45e3-a607-e52a8c8a0553": {
      "doc_hash": "4abfb5ea8426bb94465db4dba119a7a9bac0ad7a658997de6f9404afe64d4a75",
      "ref_doc_id": "3c47c642-2780-43fd-ab6c-ce6ca6aef292"
    },
    "8b8d1d77-71d7-4f55-bf95-88009710e9f3": {
      "doc_hash": "0a7108fecdd17ec6d51a947483985d3db28eeedfd0b1beb84b33e53e8c4a01d1",
      "ref_doc_id": "3c47c642-2780-43fd-ab6c-ce6ca6aef292"
    },
    "bfbdc446-ebe8-4777-a695-ccbcbfa522d9": {
      "doc_hash": "ce3b010974c2de42b1e1830a7419a29329e5e7ac9972de1c2d44c75a64db835d",
      "ref_doc_id": "3c47c642-2780-43fd-ab6c-ce6ca6aef292"
    },
    "93e92bf5-1811-4469-83df-7ca1ab0ded89": {
      "doc_hash": "067e776ecbf790238841c847af9216f03a092d7a0f806f9e99038402c96a4e0a",
      "ref_doc_id": "8d963132-457e-4acf-8848-e17995edf9d0"
    },
    "a1a800d7-018f-40ab-8395-190ec5a0d2bc": {
      "doc_hash": "bd2d06e9c40c7c2cf2c899ea48e4e8d7535955760d0589b0bdef9ad6013095b7",
      "ref_doc_id": "8d963132-457e-4acf-8848-e17995edf9d0"
    },
    "c3d32185-6823-4b80-a3e1-b8af8c856256": {
      "doc_hash": "93797b1c3edee97e7755ad243ffc79f9a1274bcd980659ee4c645d0d9f58113c",
      "ref_doc_id": "8d963132-457e-4acf-8848-e17995edf9d0"
    },
    "783cc29a-47e7-474b-b573-27cfabf7aeab": {
      "doc_hash": "16ecc1db8571d3c5c5dbdf6b4f53b23f444e4c13f8a324681ab2487d039743ca",
      "ref_doc_id": "8d963132-457e-4acf-8848-e17995edf9d0"
    },
    "c776261b-c258-4f37-b0b3-bdeddb50a453": {
      "doc_hash": "a92ab4f9ff2d2d35aee22cbbb1ab1f3461699d4af6a2a035b29848098efe8dc9",
      "ref_doc_id": "8d963132-457e-4acf-8848-e17995edf9d0"
    },
    "0d3456a6-9271-4d48-a0cb-524c6237e3ae": {
      "doc_hash": "8186399639865c5e705158ae0d850dce88b6cf6c9a5043776cb61579665474d2",
      "ref_doc_id": "8d963132-457e-4acf-8848-e17995edf9d0"
    },
    "c3f99a26-ac33-4e02-8b1d-1120cbe6177e": {
      "doc_hash": "1968094ec531135bf1d131d3159eddfb2d03c4f5fd53b3c20f56a28c3c0de874",
      "ref_doc_id": "8d963132-457e-4acf-8848-e17995edf9d0"
    },
    "f2840fcb-6583-4692-950e-d6140b21c0e9": {
      "doc_hash": "edc41b368e6285e59b8eb59451dca1d2af4eb8592230975f64045c490077e916",
      "ref_doc_id": "8d963132-457e-4acf-8848-e17995edf9d0"
    },
    "7403bb3f-4234-42ef-8414-5461478373b7": {
      "doc_hash": "d4dfdd7e91d76361818585fb4fed8eefe74c4135fbb9a3088d8efa3e12852e04",
      "ref_doc_id": "8d963132-457e-4acf-8848-e17995edf9d0"
    }
  },
  "docstore/data": {
    "9964dc49-ebfc-450a-96c9-de158ebe113f": {
      "__data__": {
        "id_": "9964dc49-ebfc-450a-96c9-de158ebe113f",
        "embedding": null,
        "metadata": {
          "source": "https://paulgraham.com/",
          "title": "Paul Graham",
          "language": null
        },
        "excluded_embed_metadata_keys": [],
        "excluded_llm_metadata_keys": [],
        "relationships": {
          "1": {
            "node_id": "da6d8f50-17df-4277-b562-36c4fb2945d9",
            "node_type": "4",
            "metadata": {
              "source": "https://paulgraham.com/",
              "title": "Paul Graham",
              "language": null
            },
            "hash": "795ef5c8f7731a9afecfd25efec4ccc7ba96867eb024f6d57b3a6bac93eec701",
            "class_name": "RelatedNodeInfo"
          },
          "3": {
            "node_id": "0c2e48b9-73da-4f43-babc-3b18cf6f7214",
            "node_type": "1",
            "metadata": {},
            "hash": "35491ecf570fe3df89ab88ed746b7c92f84c541e2f087130d3a79f4216dbb0f5",
            "class_name": "RelatedNodeInfo"
          }
        },
        "text": "Paul Graham\n\n\n\nNew:\n\nHow to Start Google |\nBest Essay | \nSuperlinear\n\n\n\n\n\nWant to start a startup? Get funded by Y Combinator.\n\n\n\n\n\n\n\n\n\n\u00a9 mmxxiv pg",
        "start_char_idx": 0,
        "end_char_idx": 147,
        "text_template": "{metadata_str}\n\n{content}",
        "metadata_template": "{key}: {value}",
        "metadata_seperator": "\n",
        "class_name": "TextNode"
      },
      "__type__": "1"
    },
    "0c2e48b9-73da-4f43-babc-3b18cf6f7214": {
      "__data__": {
        "id_": "0c2e48b9-73da-4f43-babc-3b18cf6f7214",
        "embedding": null,
        "metadata": {
          "source": "https://paulgraham.com/raq.html",
          "title": "RAQs",
          "language": null
        },
        "excluded_embed_metadata_keys": [],
        "excluded_llm_metadata_keys": [],
        "relationships": {
          "1": {
            "node_id": "3cb07e1e-a972-4b15-8864-3b8808c9aa85",
            "node_type": "4",
            "metadata": {
              "source": "https://paulgraham.com/raq.html",
              "title": "RAQs",
              "language": null
            },
            "hash": "827897ef2fdf26135718ba7cee154caaf2a72ec2fa0127aed4ef4d1b6769b257",
            "class_name": "RelatedNodeInfo"
          },
          "2": {
            "node_id": "9964dc49-ebfc-450a-96c9-de158ebe113f",
            "node_type": "1",
            "metadata": {
              "source": "https://paulgraham.com/",
              "title": "Paul Graham",
              "language": null
            },
            "hash": "ee667d021351914702b1eb8654514bb5f1aa1e60725bbab6e2bba97d7b36213c",
            "class_name": "RelatedNodeInfo"
          },
          "3": {
            "node_id": "85f12440-2271-485c-ad4e-8496778b575b",
            "node_type": "1",
            "metadata": {},
            "hash": "0d40424375c0d3c0a7174b3b037659d4eb661082fc7ab8de03610fd22cf10d9a",
            "class_name": "RelatedNodeInfo"
          }
        },
        "text": "RAQs\n\nThese are questions that I've only been asked once or twice, but\nwhich seem especially interesting.Why don't more painters have hacking jobs?Probably for the same\nreason that few hackers take up painting.  They both seem\nfrom the outside like great abstruse mysteries.  You can\nlearn great abstruse mysteries as a teenager, because\neverything is a mystery at that point anyway.  And you have the\nboundless self confidence that comes from ignorance.  But unless you\nlearn both as a teenager, which is rare, you'll be afraid\nof the other later.What should I read to learn more about history?The way to do it is piecemeal.  You could just sit down and\ntry reading Roberts's History of the World cover\nto cover, but you'd probably lose interest.  I think it's\na better plan to read books about specific topics, even\nif you don't understand everything the first time\nthrough.Here are the most exciting ones I can think of:Clark, Civilisation\nWhite, Medieval Technology and Social Change\nMcEvedy, Penguin Atlases of Ancient and Medieval History\nLaslett, The World We Have Lost\nBernal, The Extension of Man\nFranklin, Autobiography\nGirouard, Life in the English Country House\nPirenne, Mohammed and Charlemagne\nRunciman, The Fall of Constantinople\nCipolla, Guns, Sails and Empires\nHadas, A History of Rome\nOman, The Art of War in the Middle Ages\nVasari, Lives of the Artists\nBovill, The Golden Trade of the Moors\nCaesar, Gallic Wars\nKuhn, The Copernican RevolutionCouldn't you add something equivalent to Lisp macros to \nlanguages like Perl or Python?Not without turning them into dialects of Lisp.\nReal macros need to operate on the parse tree of the program.  \nTo allow that in a language with syntax, you have to\n(a) make public the translation from \nsource code to parse trees, and (b) give the programmer the\nopportunity to run programs on parse trees before they go on to \nthe compiler.But it would be hard to do that without\ncreating a notation for parse trees; and once you do, \nyour language has become a skin on Lisp, in much \nthe same way that in \nOS X, the Mac OS became a skin on Unix.How can I avoid turning into a pointy-haired boss?The pointy-haired boss is a manager who doesn't program.  So the \nsurest way to avoid becoming him is to stay a programmer. \nWhat tempts programmers to become\nmanagers are companies with old-fashioned corporate structure, where\nthe only way to advance in salary and prestige is to go into\nmanagement.  So if you want to avoid becoming a PHB, avoid\nsuch companies, and work for (or start) startups.I never had to manage anyone in our startup, even though I\nwas the president.  The other hackers\nwere my peers, and would have given me the raspberry if I'd tried\nto \"manage\" them.  We operated by consensus.  And the rest of the \ncompany reported\nto our experienced COO, who was also more of a peer.Why be a manager when you could be a founder or early\nemployee at a startup?I'm about to become a teacher.  How can I be a good one?The best teachers I remember from school had three things\nin common:(1) They had high standards.  Like three year olds testing their\nparents, students will test teachers to see if they can\nget away with low-quality work or bad behavior.  They won't \nrespect the teachers who don't call them on it.(2) They liked us.  Like dogs, kids can tell very accurately\nwhether or not someone wishes them well.  I think a lot of our\nteachers either never liked kids much, or got burned out and\nstarted not to like them.  It's hard to be a good teacher once\nthat happens.  I can't think of one teacher in all the schools\nI went to who managed to be good despite disliking students.(3) They were interested in the subject.  Most of the public\nschool teachers I had weren't really interested in what they \ntaught.  Enthusiasm is contagious, and so is boredom.Two startups want to hire me.\nWhich should I choose?The one with the most determined and smartest founders (in\nthat order) is the more likely to succeed.",
        "start_char_idx": 0,
        "end_char_idx": 3970,
        "text_template": "{metadata_str}\n\n{content}",
        "metadata_template": "{key}: {value}",
        "metadata_seperator": "\n",
        "class_name": "TextNode"
      },
      "__type__": "1"
    },
    "85f12440-2271-485c-ad4e-8496778b575b": {
      "__data__": {
        "id_": "85f12440-2271-485c-ad4e-8496778b575b",
        "embedding": null,
        "metadata": {
          "source": "https://paulgraham.com/raq.html",
          "title": "RAQs",
          "language": null
        },
        "excluded_embed_metadata_keys": [],
        "excluded_llm_metadata_keys": [],
        "relationships": {
          "1": {
            "node_id": "3cb07e1e-a972-4b15-8864-3b8808c9aa85",
            "node_type": "4",
            "metadata": {
              "source": "https://paulgraham.com/raq.html",
              "title": "RAQs",
              "language": null
            },
            "hash": "827897ef2fdf26135718ba7cee154caaf2a72ec2fa0127aed4ef4d1b6769b257",
            "class_name": "RelatedNodeInfo"
          },
          "2": {
            "node_id": "0c2e48b9-73da-4f43-babc-3b18cf6f7214",
            "node_type": "1",
            "metadata": {
              "source": "https://paulgraham.com/raq.html",
              "title": "RAQs",
              "language": null
            },
            "hash": "76fa7ac690c79a94b28c653805cc82d2fa00e40b19a84440059a5444c7510aaa",
            "class_name": "RelatedNodeInfo"
          },
          "3": {
            "node_id": "ad0fb2a3-e94f-49f4-b21d-51da4589d3c2",
            "node_type": "1",
            "metadata": {},
            "hash": "8a3955979684de79766320f74da506a8478501b0260f789885f91854c5c30152",
            "class_name": "RelatedNodeInfo"
          }
        },
        "text": "They won't \nrespect the teachers who don't call them on it.(2) They liked us.  Like dogs, kids can tell very accurately\nwhether or not someone wishes them well.  I think a lot of our\nteachers either never liked kids much, or got burned out and\nstarted not to like them.  It's hard to be a good teacher once\nthat happens.  I can't think of one teacher in all the schools\nI went to who managed to be good despite disliking students.(3) They were interested in the subject.  Most of the public\nschool teachers I had weren't really interested in what they \ntaught.  Enthusiasm is contagious, and so is boredom.Two startups want to hire me.\nWhich should I choose?The one with the most determined and smartest founders (in\nthat order) is the more likely to succeed.  Pretend you're\nan investor\u2014which you are, of your time\u2014and ask\nyourself which of the two you'd buy stock in.How can I become really good at Lisp programming?Write an application big enough that you can make the lower\nlevels into a language layer.  Embedded languages (or as they\nnow seem to be called, DSLs) are the essence of Lisp hacking.What philosophy books would you recommend?I can't think of any I'd recommend. What I learned from trying to study philosophy is that the place to look is in other fields. If you understand math or history or aeronautical engineering very well, the most abstract of the things you know are what philosophy is supposed to be teaching. Books on philosophy per se are either highly technical stuff that doesn't matter much, or vague concatenations of abstractions their own authors didn't fully understand (e.g. Hegel).It can be interesting to study ancient philosophy, but more as a kind of accident report than to teach you anything useful.I want to start a startup, but I don't know how to program.  How \nlong will it take to learn?I would guess a smart person can learn to hack sufficiently well in\n6 months to a year.  The best way to do it would be to find some \nstartup to hire you in an initially menial capacity, and start\nlearning to program on the side.  Then gradually\nwork your way up from answering phones through system administration\nto actual software design.  There is always so much to do in a\nstartup that people won't be too picky about your paper qualifications,\nif you can solve problems for them without screwing up.",
        "start_char_idx": 3211,
        "end_char_idx": 5548,
        "text_template": "{metadata_str}\n\n{content}",
        "metadata_template": "{key}: {value}",
        "metadata_seperator": "\n",
        "class_name": "TextNode"
      },
      "__type__": "1"
    },
    "ad0fb2a3-e94f-49f4-b21d-51da4589d3c2": {
      "__data__": {
        "id_": "ad0fb2a3-e94f-49f4-b21d-51da4589d3c2",
        "embedding": null,
        "metadata": {
          "source": "https://paulgraham.com/arc.html",
          "title": "Arc",
          "language": null
        },
        "excluded_embed_metadata_keys": [],
        "excluded_llm_metadata_keys": [],
        "relationships": {
          "1": {
            "node_id": "7b57235f-87b5-42d8-a8f2-4939052b47a8",
            "node_type": "4",
            "metadata": {
              "source": "https://paulgraham.com/arc.html",
              "title": "Arc",
              "language": null
            },
            "hash": "b30475f747bca71d2cc31b05b3b43696ee247c107b8156de7654a034859a5725",
            "class_name": "RelatedNodeInfo"
          },
          "2": {
            "node_id": "85f12440-2271-485c-ad4e-8496778b575b",
            "node_type": "1",
            "metadata": {
              "source": "https://paulgraham.com/raq.html",
              "title": "RAQs",
              "language": null
            },
            "hash": "ca49309587267f1214db1cab415f1de19e598c006ef88e4aaad9863f7e3efafb",
            "class_name": "RelatedNodeInfo"
          },
          "3": {
            "node_id": "24e6c414-4be5-45df-bc79-c03531869c3a",
            "node_type": "1",
            "metadata": {},
            "hash": "8dd43c0f9b56f400ee3b042f3944c493fd4706fd719df832f7b98ad81c592016",
            "class_name": "RelatedNodeInfo"
          }
        },
        "text": "Arc\n\nArc is a new dialect of Lisp we're working on.   You can \nfind an early release and ask questions at \narclanguage.org.\nThe Arc community is very newbie-friendly,\nbecause all the users are newbies to some extent.To get an idea of where we eventually hope to take Arc,\nsee Being Popular\nand The Hundred-Year Language.\nForumTutorialGet ArcArc's OutTake the Arc ChallengeFirst Priority: Core LanguageArc FAQHelp UsDesign PhilosophyWhy Arc Isn't Especially Object-OrientedLFM and LFSPIdeas People Have Sent UsOld Arc Stuff",
        "start_char_idx": 0,
        "end_char_idx": 522,
        "text_template": "{metadata_str}\n\n{content}",
        "metadata_template": "{key}: {value}",
        "metadata_seperator": "\n",
        "class_name": "TextNode"
      },
      "__type__": "1"
    },
    "24e6c414-4be5-45df-bc79-c03531869c3a": {
      "__data__": {
        "id_": "24e6c414-4be5-45df-bc79-c03531869c3a",
        "embedding": null,
        "metadata": {
          "source": "https://paulgraham.com/start.html",
          "title": "How to Start a Startup",
          "language": null
        },
        "excluded_embed_metadata_keys": [],
        "excluded_llm_metadata_keys": [],
        "relationships": {
          "1": {
            "node_id": "a5402da5-10e5-4cad-88ab-37b26d552e5a",
            "node_type": "4",
            "metadata": {
              "source": "https://paulgraham.com/start.html",
              "title": "How to Start a Startup",
              "language": null
            },
            "hash": "e7ce94512d6f70c719833a207949510f80645c0061caaa06244da613b912e1f1",
            "class_name": "RelatedNodeInfo"
          },
          "2": {
            "node_id": "ad0fb2a3-e94f-49f4-b21d-51da4589d3c2",
            "node_type": "1",
            "metadata": {
              "source": "https://paulgraham.com/arc.html",
              "title": "Arc",
              "language": null
            },
            "hash": "5b64c8f8e8ce5366227946ce0cdb2445e3060474578ea2d79b7913766d1dd0df",
            "class_name": "RelatedNodeInfo"
          },
          "3": {
            "node_id": "de4cfc0b-56b3-4241-aadc-02422a183732",
            "node_type": "1",
            "metadata": {},
            "hash": "001608948939adf73565495078f6cd32bf2e0620f135c8d87b1e4704678e64b3",
            "class_name": "RelatedNodeInfo"
          }
        },
        "text": "How to Start a Startup\n\n\n\nWant to start a startup?  Get funded by\nY Combinator.\n\n\n\n\nMarch 2005(This essay is derived from a talk at the Harvard Computer\nSociety.)You need three things to create a successful startup: to start with\ngood people, to make something customers actually want, and to spend\nas little money as possible.  Most startups that fail do it because\nthey fail at one of these.  A startup that does all three will\nprobably succeed.And that's kind of exciting, when you think about it, because all\nthree are doable.  Hard, but doable.  And since a startup that\nsucceeds ordinarily makes its founders rich, that implies getting\nrich is doable too.  Hard, but doable.If there is one message I'd like to get across about startups,\nthat's it.  There is no magically difficult step that requires\nbrilliance to solve.The IdeaIn particular, you don't need a brilliant \nidea to start a startup\naround.   The way a startup makes money is to offer people better\ntechnology than they have now.  But what people have now is often\nso bad that it doesn't take brilliance to do better.Google's plan, for example, was simply to create a search site that\ndidn't suck.  They had three new ideas: index more of the Web, use\nlinks to rank search results, and have clean, simple web pages with\nunintrusive keyword-based ads.  Above all, they were determined to\nmake a site that was good to use.  No doubt there are great technical\ntricks within Google, but the overall plan was straightforward.\nAnd while they probably have bigger ambitions now, this alone brings\nthem a billion dollars a year. [1]There are plenty of other areas that are just as backward as search\nwas before Google.  I can think of several heuristics for generating\nideas for startups, but most reduce to this: look at something\npeople are trying to do, and figure out how to do it in a way that\ndoesn't suck.For example, dating sites currently suck far worse than search did\nbefore Google.  They all use the same simple-minded model.\nThey seem to have approached the problem by thinking about how to\ndo database matches instead of how dating works in the real world.\nAn undergrad could build something better as a class project.  And\nyet there's a lot of money at stake.  Online dating is a valuable\nbusiness now, and it might be worth a hundred times as much if it\nworked.An idea for a startup, however, is only a beginning.  A lot of\nwould-be startup founders think the key to the whole process is the\ninitial idea, and from that point all you have to do is execute.\nVenture capitalists know better.  If you go to VC firms with a\nbrilliant idea that you'll tell them about if they sign a nondisclosure\nagreement, most will tell you to get lost.   That shows how much a \nmere idea is worth. The market price is less than the inconvenience \nof signing an NDA.Another sign of how little the initial idea is worth is the number\nof startups that change their plan en route. Microsoft's original\nplan was to make money selling programming languages, of all things.\nTheir current business model didn't occur to them until IBM dropped\nit in their lap five years later.Ideas for startups are worth something, certainly, but the trouble\nis, they're not transferrable.  They're not something you could\nhand to someone else to execute.  Their value is mainly as starting\npoints: as questions for the people who had them to continue thinking\nabout.What matters is not ideas, but the people who have them.  Good\npeople can fix bad ideas, but good ideas can't save bad people.  \nPeopleWhat do I mean by good people?  One of the best tricks I learned   \nduring our startup was a rule for deciding \nwho to hire.  Could you\ndescribe the person as an animal?  It might be hard to translate   \nthat into another language, but I think everyone in the US knows  \nwhat it means.",
        "start_char_idx": 0,
        "end_char_idx": 3821,
        "text_template": "{metadata_str}\n\n{content}",
        "metadata_template": "{key}: {value}",
        "metadata_seperator": "\n",
        "class_name": "TextNode"
      },
      "__type__": "1"
    },
    "de4cfc0b-56b3-4241-aadc-02422a183732": {
      "__data__": {
        "id_": "de4cfc0b-56b3-4241-aadc-02422a183732",
        "embedding": null,
        "metadata": {
          "source": "https://paulgraham.com/start.html",
          "title": "How to Start a Startup",
          "language": null
        },
        "excluded_embed_metadata_keys": [],
        "excluded_llm_metadata_keys": [],
        "relationships": {
          "1": {
            "node_id": "a5402da5-10e5-4cad-88ab-37b26d552e5a",
            "node_type": "4",
            "metadata": {
              "source": "https://paulgraham.com/start.html",
              "title": "How to Start a Startup",
              "language": null
            },
            "hash": "e7ce94512d6f70c719833a207949510f80645c0061caaa06244da613b912e1f1",
            "class_name": "RelatedNodeInfo"
          },
          "2": {
            "node_id": "24e6c414-4be5-45df-bc79-c03531869c3a",
            "node_type": "1",
            "metadata": {
              "source": "https://paulgraham.com/start.html",
              "title": "How to Start a Startup",
              "language": null
            },
            "hash": "844557556426fe5043911f89032c8cd1e5bded7d17a4f57ac84902464cbeb355",
            "class_name": "RelatedNodeInfo"
          },
          "3": {
            "node_id": "d4fa09ce-3b39-41da-bf22-6244167ddc89",
            "node_type": "1",
            "metadata": {},
            "hash": "55cf6888a0668cff0f6f63a12f90d6228313e3a770d89d6ad863382a45fcce17",
            "class_name": "RelatedNodeInfo"
          }
        },
        "text": "Microsoft's original\nplan was to make money selling programming languages, of all things.\nTheir current business model didn't occur to them until IBM dropped\nit in their lap five years later.Ideas for startups are worth something, certainly, but the trouble\nis, they're not transferrable.  They're not something you could\nhand to someone else to execute.  Their value is mainly as starting\npoints: as questions for the people who had them to continue thinking\nabout.What matters is not ideas, but the people who have them.  Good\npeople can fix bad ideas, but good ideas can't save bad people.  \nPeopleWhat do I mean by good people?  One of the best tricks I learned   \nduring our startup was a rule for deciding \nwho to hire.  Could you\ndescribe the person as an animal?  It might be hard to translate   \nthat into another language, but I think everyone in the US knows  \nwhat it means.  It means someone who takes their work a little too   \nseriously; someone who does what they do so well that they pass\nright through professional and cross over into obsessive.What it means specifically depends on the job: a salesperson who\njust won't take no for an answer; a hacker who will stay up till   \n4:00 AM rather than go to bed leaving code with a bug in it; a PR   \nperson who will cold-call New York Times reporters on their cell\nphones; a graphic designer who feels physical pain when something \nis two millimeters out of place.Almost everyone who worked for us was an animal at what they did. \nThe woman in charge of sales was so tenacious that I used to feel\nsorry for potential customers on the phone with her.  You could  \nsense them squirming on the hook, but you knew there would be no  \nrest for them till they'd signed up.If you think about people you know, you'll find the animal test is\neasy to apply.  Call the person's image to mind and imagine the\nsentence \"so-and-so is an animal.\"  If you laugh, they're not.  You\ndon't need or perhaps even want this quality in big companies, but\nyou need it in a startup.For programmers we had three additional tests.  Was the person\ngenuinely smart?  If so, could they actually get things done?  And\nfinally, since a few good hackers have unbearable personalities,   \ncould we stand to have them around?That last test filters out surprisingly few people.  We could bear\nany amount of nerdiness if someone was truly smart.  What we couldn't\nstand were people with a lot of attitude.  But most of those weren't\ntruly smart, so our third test was largely a restatement of the\nfirst.When nerds are unbearable it's usually because they're trying too\nhard to seem smart.  But the smarter they are, the less pressure\nthey feel to act smart.  So as a rule you can recognize genuinely\nsmart people by their ability to say things like \"I don't know,\"   \n\"Maybe you're right,\" and \"I don't understand x well enough.\"This technique doesn't always work, because people can be influenced\nby their environment.  In the MIT CS department, there seems to be\na tradition of acting like a brusque know-it-all. I'm told it derives\nultimately from Marvin Minsky, in the same way the classic airline\npilot manner is said to derive from Chuck Yeager.  Even genuinely\nsmart people start to act this way there, so you have to make\nallowances.It helped us to have Robert Morris, who is one of the readiest to\nsay \"I don't know\" of anyone I've met.  (At least, he was before he \nbecame a professor at MIT.)  No one dared put on attitude around   \nRobert, because he was obviously smarter than they were and yet had\nzero attitude himself.Like most startups, ours began with a group of friends, and it was\nthrough personal contacts that we got most of the people we hired.\nThis is a crucial difference between startups and big companies.\nBeing friends with someone for even a couple days will tell you \nmore than companies could ever learn in interviews.  [2]It's no coincidence that startups start around universities, because\nthat's where smart people meet.  It's not what people learn in    \nclasses at MIT and Stanford that has made technology companies\nspring up around them.  They could sing campfire songs in the classes\nso long as admissions worked the same.If you start a startup, there's a good chance it will be with people\nyou know from college or grad school.",
        "start_char_idx": 2935,
        "end_char_idx": 7230,
        "text_template": "{metadata_str}\n\n{content}",
        "metadata_template": "{key}: {value}",
        "metadata_seperator": "\n",
        "class_name": "TextNode"
      },
      "__type__": "1"
    },
    "d4fa09ce-3b39-41da-bf22-6244167ddc89": {
      "__data__": {
        "id_": "d4fa09ce-3b39-41da-bf22-6244167ddc89",
        "embedding": null,
        "metadata": {
          "source": "https://paulgraham.com/start.html",
          "title": "How to Start a Startup",
          "language": null
        },
        "excluded_embed_metadata_keys": [],
        "excluded_llm_metadata_keys": [],
        "relationships": {
          "1": {
            "node_id": "a5402da5-10e5-4cad-88ab-37b26d552e5a",
            "node_type": "4",
            "metadata": {
              "source": "https://paulgraham.com/start.html",
              "title": "How to Start a Startup",
              "language": null
            },
            "hash": "e7ce94512d6f70c719833a207949510f80645c0061caaa06244da613b912e1f1",
            "class_name": "RelatedNodeInfo"
          },
          "2": {
            "node_id": "de4cfc0b-56b3-4241-aadc-02422a183732",
            "node_type": "1",
            "metadata": {
              "source": "https://paulgraham.com/start.html",
              "title": "How to Start a Startup",
              "language": null
            },
            "hash": "68519b70a4aebb7acab66db9ef53eed71d13a025c568afc310161794b555c9ad",
            "class_name": "RelatedNodeInfo"
          },
          "3": {
            "node_id": "b96927de-27fa-4d7d-8103-754b42f0692a",
            "node_type": "1",
            "metadata": {},
            "hash": "dd18250c6c5e36ff4985eb6b8bd0635a4c44e424101c3aea5d5ec4cd6105e859",
            "class_name": "RelatedNodeInfo"
          }
        },
        "text": "(At least, he was before he \nbecame a professor at MIT.)  No one dared put on attitude around   \nRobert, because he was obviously smarter than they were and yet had\nzero attitude himself.Like most startups, ours began with a group of friends, and it was\nthrough personal contacts that we got most of the people we hired.\nThis is a crucial difference between startups and big companies.\nBeing friends with someone for even a couple days will tell you \nmore than companies could ever learn in interviews.  [2]It's no coincidence that startups start around universities, because\nthat's where smart people meet.  It's not what people learn in    \nclasses at MIT and Stanford that has made technology companies\nspring up around them.  They could sing campfire songs in the classes\nso long as admissions worked the same.If you start a startup, there's a good chance it will be with people\nyou know from college or grad school.  So in theory you ought to  \ntry to make friends with as many smart people as you can in school,\nright?  Well, no.  Don't make a conscious effort to schmooze; that\ndoesn't work well with hackers.What you should do in college is work on your own projects.  Hackers\nshould do this even if they don't plan to start startups, because \nit's the only real way to learn how to program.   In some cases you\nmay collaborate with other students, and this is the best way to\nget to know good hackers.  The project may even grow into a startup.\nBut once again, I wouldn't aim too directly at either target.  Don't\nforce things; just work on stuff you like with people you like.Ideally you want between two and four founders.  It would be hard\nto start with just one.  One person would find the moral weight of\nstarting a company hard to bear.  Even Bill Gates, who seems to be   \nable to bear a good deal of moral weight, had to have a co-founder. \nBut you don't want so many founders that the company starts to look\nlike a group photo.  Partly because you don't need a lot of people\nat first, but mainly because the more founders you have, the worse\ndisagreements you'll have. When there are just two or three founders,\nyou know you have to resolve disputes immediately or perish.  If\nthere are seven or eight, disagreements can linger and harden into\nfactions.  You don't want mere voting; you need unanimity.In a technology startup, which most startups are, the founders\nshould include technical people.   During the Internet Bubble there \nwere a number of startups founded by business people who then went\nlooking for hackers to create their product for them.  This doesn't  \nwork well.  Business people are bad at deciding what to do with   \ntechnology, because they don't know what the options are, or which\nkinds of problems are hard and which are easy.  And when business\npeople try to hire hackers, they can't tell which ones are \ngood.\nEven other hackers have a hard time doing that. \nFor business people it's roulette.Do the founders of a startup have to include business people?  That\ndepends.  We thought so when we started ours, and we asked several \npeople who were said to know about this mysterious thing called\n\"business\" if they would be the president.  But they all said no,\nso I had to do it myself.  And what I discovered was that business\nwas no great mystery.   It's not something like physics or medicine\nthat requires extensive study.  You just try to get people to pay\nyou for stuff.I think the reason I made such a mystery of business was that I was\ndisgusted by the idea of doing it.  I wanted to work in the pure,   \nintellectual world of software, not deal with customers' mundane  \nproblems.  People who don't want to get dragged into some kind of\nwork often develop a protective incompetence at it.  Paul Erdos was\nparticularly good at this.  By seeming unable even to cut a grapefruit\nin half (let alone go to the store and buy one), he forced other\npeople to do such things for him, leaving all his time free for\nmath.  Erdos was an extreme case, but most husbands use the same  \ntrick to some degree.Once I was forced to discard my protective incompetence, I found\nthat business was neither so hard nor so boring as I feared.  There\nare esoteric areas of business that are quite hard, like tax law\nor the pricing of derivatives, but you don't need to know about   \nthose in a startup.",
        "start_char_idx": 6310,
        "end_char_idx": 10639,
        "text_template": "{metadata_str}\n\n{content}",
        "metadata_template": "{key}: {value}",
        "metadata_seperator": "\n",
        "class_name": "TextNode"
      },
      "__type__": "1"
    },
    "b96927de-27fa-4d7d-8103-754b42f0692a": {
      "__data__": {
        "id_": "b96927de-27fa-4d7d-8103-754b42f0692a",
        "embedding": null,
        "metadata": {
          "source": "https://paulgraham.com/start.html",
          "title": "How to Start a Startup",
          "language": null
        },
        "excluded_embed_metadata_keys": [],
        "excluded_llm_metadata_keys": [],
        "relationships": {
          "1": {
            "node_id": "a5402da5-10e5-4cad-88ab-37b26d552e5a",
            "node_type": "4",
            "metadata": {
              "source": "https://paulgraham.com/start.html",
              "title": "How to Start a Startup",
              "language": null
            },
            "hash": "e7ce94512d6f70c719833a207949510f80645c0061caaa06244da613b912e1f1",
            "class_name": "RelatedNodeInfo"
          },
          "2": {
            "node_id": "d4fa09ce-3b39-41da-bf22-6244167ddc89",
            "node_type": "1",
            "metadata": {
              "source": "https://paulgraham.com/start.html",
              "title": "How to Start a Startup",
              "language": null
            },
            "hash": "b75876b5a67dedf798d1b7a626e57bfd5dacc91f7954bd6041d0b4e9230adddb",
            "class_name": "RelatedNodeInfo"
          },
          "3": {
            "node_id": "9f573fe0-7021-4542-a36b-bee5e32ad298",
            "node_type": "1",
            "metadata": {},
            "hash": "70811d50d0a7489b8ef499aa62301c4971883b29f52f6b18a2d78ff9c7ff184d",
            "class_name": "RelatedNodeInfo"
          }
        },
        "text": "I wanted to work in the pure,   \nintellectual world of software, not deal with customers' mundane  \nproblems.  People who don't want to get dragged into some kind of\nwork often develop a protective incompetence at it.  Paul Erdos was\nparticularly good at this.  By seeming unable even to cut a grapefruit\nin half (let alone go to the store and buy one), he forced other\npeople to do such things for him, leaving all his time free for\nmath.  Erdos was an extreme case, but most husbands use the same  \ntrick to some degree.Once I was forced to discard my protective incompetence, I found\nthat business was neither so hard nor so boring as I feared.  There\nare esoteric areas of business that are quite hard, like tax law\nor the pricing of derivatives, but you don't need to know about   \nthose in a startup.  All you need to know about business to run a  \nstartup are commonsense things people knew before there were business\nschools, or even universities.If you work your way down the Forbes 400 making an x next to the   \nname of each person with an MBA, you'll learn something important\nabout business school.  After Warren Buffett, you don't hit another \nMBA till number 22,\nPhil Knight, the CEO of Nike.  There are only 5 MBAs in the top\n50.  What you notice in the Forbes 400 are a lot of people with      \ntechnical backgrounds.  Bill Gates, Steve Jobs, Larry Ellison,\nMichael Dell, Jeff Bezos, Gordon Moore.  The rulers of the technology\nbusiness tend to come from technology, not business.  So if you   \nwant to invest two years in something that will help you succeed  \nin business, the evidence suggests you'd do better to learn how to   \nhack than get an MBA. [3]There is one reason you might want to include business people in a\nstartup, though: because you have to have at least one person willing\nand able to focus on what customers want. Some believe only business\npeople can do this-- that hackers can implement software, but not   \ndesign it.  That's nonsense.  There's nothing about knowing how to\nprogram that prevents hackers from understanding users, or about\nnot knowing how to program that magically enables business people \nto understand them.If you can't understand users, however, you should either learn how\nor find a co-founder who can.  That is the single most important\nissue for technology startups, and the rock that sinks more of them\nthan anything else.What Customers WantIt's not just startups that have to worry about this.  I think most\nbusinesses that fail do it because they don't give customers what\nthey want.  Look at restaurants.  A large percentage fail, about a\nquarter in the first year.  But can you think of one restaurant\nthat had really good food and went out of business?Restaurants with great food seem to prosper no matter what.  A    \nrestaurant with great food can be expensive, crowded, noisy, dingy,\nout of the way, and even have bad service, and people will keep\ncoming.  It's true that a restaurant with mediocre food can sometimes \nattract customers through gimmicks.  But that approach is very  \nrisky.  It's more straightforward just to make the food good.It's the same with technology.  You hear all kinds of reasons why\nstartups fail.  But can you think of one that had a massively popular\nproduct and still failed?In nearly every failed startup, the real problem was that customers\ndidn't want the product.  For most, the cause of death is listed  \nas \"ran out of funding,\" but that's only the immediate cause.  Why \ncouldn't they get more funding?  Probably because the product was\na dog, or never seemed likely to be done, or both.When I was trying to think of the things every startup needed to   \ndo, I almost included a fourth: get a version 1 out as soon as you\ncan.  But I decided not to, because that's implicit in making\nsomething customers want.  The only way to make something customers\nwant is to get a prototype in front of them and refine it based on   \ntheir reactions.The other approach is what I call the \"Hail Mary\" strategy.  You  \nmake elaborate plans for a product, hire a team of engineers to   \ndevelop it (people who do this tend to use the term \"engineer\" for   \nhackers), and then find after a year that you've spent two million\ndollars to develop something no one wants.",
        "start_char_idx": 9833,
        "end_char_idx": 14095,
        "text_template": "{metadata_str}\n\n{content}",
        "metadata_template": "{key}: {value}",
        "metadata_seperator": "\n",
        "class_name": "TextNode"
      },
      "__type__": "1"
    },
    "9f573fe0-7021-4542-a36b-bee5e32ad298": {
      "__data__": {
        "id_": "9f573fe0-7021-4542-a36b-bee5e32ad298",
        "embedding": null,
        "metadata": {
          "source": "https://paulgraham.com/start.html",
          "title": "How to Start a Startup",
          "language": null
        },
        "excluded_embed_metadata_keys": [],
        "excluded_llm_metadata_keys": [],
        "relationships": {
          "1": {
            "node_id": "a5402da5-10e5-4cad-88ab-37b26d552e5a",
            "node_type": "4",
            "metadata": {
              "source": "https://paulgraham.com/start.html",
              "title": "How to Start a Startup",
              "language": null
            },
            "hash": "e7ce94512d6f70c719833a207949510f80645c0061caaa06244da613b912e1f1",
            "class_name": "RelatedNodeInfo"
          },
          "2": {
            "node_id": "b96927de-27fa-4d7d-8103-754b42f0692a",
            "node_type": "1",
            "metadata": {
              "source": "https://paulgraham.com/start.html",
              "title": "How to Start a Startup",
              "language": null
            },
            "hash": "753aed58b905bf7643b71b5a1881a814c61195e1b3abb5f04652fdcb6358c83e",
            "class_name": "RelatedNodeInfo"
          },
          "3": {
            "node_id": "5dc15948-0824-476a-a37c-54a781e0eece",
            "node_type": "1",
            "metadata": {},
            "hash": "fbd46a071f4bd600cebac482991779a80a13d0ff43b9e390a7945d4261c5456c",
            "class_name": "RelatedNodeInfo"
          }
        },
        "text": "Why \ncouldn't they get more funding?  Probably because the product was\na dog, or never seemed likely to be done, or both.When I was trying to think of the things every startup needed to   \ndo, I almost included a fourth: get a version 1 out as soon as you\ncan.  But I decided not to, because that's implicit in making\nsomething customers want.  The only way to make something customers\nwant is to get a prototype in front of them and refine it based on   \ntheir reactions.The other approach is what I call the \"Hail Mary\" strategy.  You  \nmake elaborate plans for a product, hire a team of engineers to   \ndevelop it (people who do this tend to use the term \"engineer\" for   \nhackers), and then find after a year that you've spent two million\ndollars to develop something no one wants.  This was not uncommon\nduring the Bubble, especially in companies run by business types, \nwho thought of software development as something terrifying that\ntherefore had to be carefully planned.We never even considered that approach.  As a Lisp hacker, I come \nfrom the tradition of rapid prototyping.  I would not claim (at\nleast, not here) that this is the right way to write every program,\nbut it's certainly the right way to write software for a startup.\nIn a startup, your initial plans are almost certain to be wrong in\nsome way, and your first priority should be to figure out where.   \nThe only way to do that is to try implementing them.Like most startups, we changed our plan on the fly.  At first we\nexpected our customers to be Web consultants.  But it turned out\nthey didn't like us, because our software was easy to use and we hosted\nthe site.  It would be too easy for clients to fire them.  We also\nthought we'd be able to sign up a lot of catalog companies, because\nselling online was a natural extension of their existing business.\nBut in 1996 that was a hard sell.  The middle managers we talked   \nto at catalog companies saw the Web not as an opportunity, but as\nsomething that meant more work for them.We did get a few of the more adventurous catalog companies.  Among\nthem was Frederick's of Hollywood, which gave us valuable experience\ndealing with heavy loads on our servers.  But most of our users   \nwere small, individual merchants who saw the Web as an opportunity \nto build a business.  Some had retail stores, but many only existed\nonline.  And so we changed direction to focus on these users.\nInstead of concentrating on the features Web consultants and catalog\ncompanies would want, we worked to make the software easy to use.I learned something valuable from that.  It's worth trying very, \nvery hard to make technology easy to use.  Hackers are so used to\ncomputers that they have no idea how horrifying software seems to\nnormal people.  Stephen Hawking's editor told him that every equation\nhe included in his book would cut sales in half.  When you work on\nmaking technology easier to use, you're riding that curve up instead  \nof down. A 10% improvement in ease of use doesn't just increase    \nyour sales 10%.  It's more likely to double your sales.How do you figure out what customers want?  Watch them.  One of the\nbest places to do this was at trade shows.  Trade shows didn't pay \nas a way of getting new customers, but they were worth it as market\nresearch.  We didn't just give canned presentations at trade shows.\nWe used to show people how to build real, working stores.  Which   \nmeant we got to watch as they used our software, and talk to them    \nabout what they needed.No matter what kind of startup you start, it will probably be a   \nstretch for you, the founders, to understand what users want.  The\nonly kind of software you can build without studying users is the    \nsort for which you are the typical user.  But this is just the kind\nthat tends to be open source: operating systems, programming\nlanguages, editors, and so on.  So if you're developing technology\nfor money, you're probably not going to be developing it for people\nlike you.  Indeed, you can use this as a way to generate ideas for\nstartups: what do people who are not like you want from technology?When most people think of startups, they think of companies like\nApple or Google.  Everyone knows these, because they're big consumer\nbrands.  But for every startup like that, there are twenty more  \nthat operate in niche markets or live quietly down in the infrastructure.",
        "start_char_idx": 13310,
        "end_char_idx": 17691,
        "text_template": "{metadata_str}\n\n{content}",
        "metadata_template": "{key}: {value}",
        "metadata_seperator": "\n",
        "class_name": "TextNode"
      },
      "__type__": "1"
    },
    "5dc15948-0824-476a-a37c-54a781e0eece": {
      "__data__": {
        "id_": "5dc15948-0824-476a-a37c-54a781e0eece",
        "embedding": null,
        "metadata": {
          "source": "https://paulgraham.com/start.html",
          "title": "How to Start a Startup",
          "language": null
        },
        "excluded_embed_metadata_keys": [],
        "excluded_llm_metadata_keys": [],
        "relationships": {
          "1": {
            "node_id": "a5402da5-10e5-4cad-88ab-37b26d552e5a",
            "node_type": "4",
            "metadata": {
              "source": "https://paulgraham.com/start.html",
              "title": "How to Start a Startup",
              "language": null
            },
            "hash": "e7ce94512d6f70c719833a207949510f80645c0061caaa06244da613b912e1f1",
            "class_name": "RelatedNodeInfo"
          },
          "2": {
            "node_id": "9f573fe0-7021-4542-a36b-bee5e32ad298",
            "node_type": "1",
            "metadata": {
              "source": "https://paulgraham.com/start.html",
              "title": "How to Start a Startup",
              "language": null
            },
            "hash": "db8a5817d28e793c2fbb1ed607854c7b1cff84dc3ca1354bb610ffcb6ef5d61f",
            "class_name": "RelatedNodeInfo"
          },
          "3": {
            "node_id": "41d94ac2-9f56-4291-9a4c-e68d24b653b1",
            "node_type": "1",
            "metadata": {},
            "hash": "0a899e076c6cd47bbeea8b46653de04fd75677dcdc80a6944b0717cb677ba2fe",
            "class_name": "RelatedNodeInfo"
          }
        },
        "text": "The\nonly kind of software you can build without studying users is the    \nsort for which you are the typical user.  But this is just the kind\nthat tends to be open source: operating systems, programming\nlanguages, editors, and so on.  So if you're developing technology\nfor money, you're probably not going to be developing it for people\nlike you.  Indeed, you can use this as a way to generate ideas for\nstartups: what do people who are not like you want from technology?When most people think of startups, they think of companies like\nApple or Google.  Everyone knows these, because they're big consumer\nbrands.  But for every startup like that, there are twenty more  \nthat operate in niche markets or live quietly down in the infrastructure.\nSo if you start a successful startup, odds are you'll start one of \nthose.Another way to say that is, if you try to start the kind of startup\nthat has to be a big consumer brand, the odds against succeeding\nare steeper.  The best odds are in niche markets.  Since startups  \nmake money by offering people something better than they had before,\nthe best opportunities are where things suck most.  And it would   \nbe hard to find a place where things suck more than in corporate  \nIT departments.  You would not believe the amount of money companies\nspend on software, and the crap they get in return.  This imbalance\nequals opportunity.If you want ideas for startups, one of the most valuable things you\ncould do is find a middle-sized non-technology company and spend a  \ncouple weeks just watching what they do with computers.  Most good\nhackers have no more idea of the horrors perpetrated in these places\nthan rich Americans do of what goes on in Brazilian slums.Start by writing software for smaller companies, because it's easier\nto sell to them.  It's worth so much to sell stuff to big companies\nthat the people selling them the crap they currently use spend a\nlot of time and money to do it.  And while you can outhack Oracle\nwith one frontal lobe tied behind your back, you can't outsell an\nOracle salesman.  So if you want to win through better technology,\naim at smaller customers.  [4]They're the more strategically valuable part of the market anyway.    \nIn technology, the low end always eats the high end.  It's easier  \nto make an inexpensive product more powerful than to make a powerful\nproduct cheaper.  So the products that start as cheap, simple options\ntend to gradually grow more powerful till, like water rising in a  \nroom, they squash the \"high-end\" products against the ceiling.  Sun\ndid this to mainframes, and Intel is doing it to Sun.  Microsoft\nWord did it to desktop publishing software like Interleaf and\nFramemaker.  Mass-market digital cameras are doing it to the expensive\nmodels made for professionals.  Avid did it to the manufacturers     \nof specialized video editing systems, and now Apple is doing it to\nAvid.  Henry Ford did it to the car makers that preceded\nhim.  If you build the simple, inexpensive option, you'll not only\nfind it easier to sell at first, but you'll also be in the best   \nposition to conquer the rest of the market.It's very dangerous to let anyone fly under you.  If you have the\ncheapest, easiest product, you'll own the low end.  And if you\ndon't, you're in the crosshairs of whoever does.Raising MoneyTo make all this happen, you're going to need money.  Some startups\nhave been self-funding-- Microsoft for example-- but most aren't.\nI think it's wise to take money from investors.  To be self-funding,\nyou have to start as a consulting company, and it's hard to switch\nfrom that to a product company.Financially, a startup is like a pass/fail course.  The way to get\nrich from a startup is to maximize the company's chances of succeeding,\nnot to maximize the amount of stock you retain.  So if you can trade\nstock for something that improves your odds, it's probably a smart \nmove.To most hackers, getting investors seems like a terrifying and\nmysterious process.  Actually it's merely tedious.  I'll try to\ngive an outline of how it works.The first thing you'll need is a few tens of thousands of dollars   \nto pay your expenses while you develop a prototype.  This is called\nseed capital.",
        "start_char_idx": 16946,
        "end_char_idx": 21153,
        "text_template": "{metadata_str}\n\n{content}",
        "metadata_template": "{key}: {value}",
        "metadata_seperator": "\n",
        "class_name": "TextNode"
      },
      "__type__": "1"
    },
    "41d94ac2-9f56-4291-9a4c-e68d24b653b1": {
      "__data__": {
        "id_": "41d94ac2-9f56-4291-9a4c-e68d24b653b1",
        "embedding": null,
        "metadata": {
          "source": "https://paulgraham.com/start.html",
          "title": "How to Start a Startup",
          "language": null
        },
        "excluded_embed_metadata_keys": [],
        "excluded_llm_metadata_keys": [],
        "relationships": {
          "1": {
            "node_id": "a5402da5-10e5-4cad-88ab-37b26d552e5a",
            "node_type": "4",
            "metadata": {
              "source": "https://paulgraham.com/start.html",
              "title": "How to Start a Startup",
              "language": null
            },
            "hash": "e7ce94512d6f70c719833a207949510f80645c0061caaa06244da613b912e1f1",
            "class_name": "RelatedNodeInfo"
          },
          "2": {
            "node_id": "5dc15948-0824-476a-a37c-54a781e0eece",
            "node_type": "1",
            "metadata": {
              "source": "https://paulgraham.com/start.html",
              "title": "How to Start a Startup",
              "language": null
            },
            "hash": "c4957676096941f56cba01fca17536c81b94e91fb08fd9b1823ab20ee1ffcc10",
            "class_name": "RelatedNodeInfo"
          },
          "3": {
            "node_id": "3236e272-f1b2-410f-a311-8ada5d747880",
            "node_type": "1",
            "metadata": {},
            "hash": "fea0f0c461311920f028e9a552c953c58ca771d67a7ef87f82ddb4f6731daf5b",
            "class_name": "RelatedNodeInfo"
          }
        },
        "text": "Some startups\nhave been self-funding-- Microsoft for example-- but most aren't.\nI think it's wise to take money from investors.  To be self-funding,\nyou have to start as a consulting company, and it's hard to switch\nfrom that to a product company.Financially, a startup is like a pass/fail course.  The way to get\nrich from a startup is to maximize the company's chances of succeeding,\nnot to maximize the amount of stock you retain.  So if you can trade\nstock for something that improves your odds, it's probably a smart \nmove.To most hackers, getting investors seems like a terrifying and\nmysterious process.  Actually it's merely tedious.  I'll try to\ngive an outline of how it works.The first thing you'll need is a few tens of thousands of dollars   \nto pay your expenses while you develop a prototype.  This is called\nseed capital.  Because so little money is involved, raising seed\ncapital is comparatively easy-- at least in the sense of getting a\nquick yes or no.Usually you get seed money from individual rich people called\n\"angels.\" Often they're people who themselves got rich from technology.\nAt the seed stage, investors don't expect you to have an elaborate\nbusiness plan.  Most know that they're supposed to decide quickly.\nIt's not unusual to get a check within a week based on a half-page\nagreement.We started Viaweb with $10,000 of seed money from our friend Julian.\nBut he gave us a lot more than money.  He's a former CEO and also\na corporate lawyer, so he gave us a lot of valuable advice about\nbusiness, and also did all the legal work of getting us set up as\na company.  Plus he introduced us to one of the two \nangel investors who supplied our next round of funding.Some angels, especially those with technology backgrounds, may be     \nsatisfied with a demo and a verbal description of what you plan to \ndo.  But many will want a copy of your business plan, if only to\nremind themselves what they invested in.Our angels asked for one, and looking back, I'm amazed how much\nworry it caused me.  \"Business plan\" has that word \"business\" in\nit, so I figured it had to be something I'd have to read a book\nabout business plans to write.  Well, it doesn't.  At this stage,\nall most investors expect is a brief description of what you plan    \nto do and how you're going to make money from it, and the resumes \nof the founders.  If you just sit down and write out what you've\nbeen saying to one another, that should be fine.  It shouldn't take\nmore than a couple hours, and you'll probably find that writing it\nall down gives you more ideas about what to do.For the angel to have someone to make the check out to, you're going\nto have to have some kind of company.  Merely incorporating yourselves\nisn't hard.  The problem is, for the company to exist, you have to\ndecide who the founders are, and how much stock they each have.  If\nthere are two founders with the same qualifications who are both\nequally committed to the business, that's easy.  But if you have a\nnumber of people who are expected to contribute in varying degrees,\narranging the proportions of stock can be hard.  And once you've\ndone it, it tends to be set in stone.I have no tricks for dealing with this problem.  All I can say is,\ntry hard to do it right.  I do have a rule of thumb for recognizing\nwhen you have, though.  When everyone feels they're getting a\nslightly bad deal, that they're doing more than they should for the\namount of stock they have, the stock is optimally apportioned.There is more to setting up a company than incorporating it, of\ncourse: insurance, business license, unemployment compensation,    \nvarious things with the IRS.  I'm not even sure what the list is,\nbecause we, ah, skipped all that.  When we got real funding near\nthe end of 1996, we hired a great CFO, who fixed everything   \nretroactively.  It turns out that no one comes and arrests you if\nyou don't do everything you're supposed to when starting a company.\nAnd a good thing too, or a lot of startups would never get started.\n[5]It can be dangerous to delay turning yourself into a company, because\none or more of the founders might decide to split off and start   \nanother company doing the same thing.  This does happen.",
        "start_char_idx": 20316,
        "end_char_idx": 24522,
        "text_template": "{metadata_str}\n\n{content}",
        "metadata_template": "{key}: {value}",
        "metadata_seperator": "\n",
        "class_name": "TextNode"
      },
      "__type__": "1"
    },
    "3236e272-f1b2-410f-a311-8ada5d747880": {
      "__data__": {
        "id_": "3236e272-f1b2-410f-a311-8ada5d747880",
        "embedding": null,
        "metadata": {
          "source": "https://paulgraham.com/start.html",
          "title": "How to Start a Startup",
          "language": null
        },
        "excluded_embed_metadata_keys": [],
        "excluded_llm_metadata_keys": [],
        "relationships": {
          "1": {
            "node_id": "a5402da5-10e5-4cad-88ab-37b26d552e5a",
            "node_type": "4",
            "metadata": {
              "source": "https://paulgraham.com/start.html",
              "title": "How to Start a Startup",
              "language": null
            },
            "hash": "e7ce94512d6f70c719833a207949510f80645c0061caaa06244da613b912e1f1",
            "class_name": "RelatedNodeInfo"
          },
          "2": {
            "node_id": "41d94ac2-9f56-4291-9a4c-e68d24b653b1",
            "node_type": "1",
            "metadata": {
              "source": "https://paulgraham.com/start.html",
              "title": "How to Start a Startup",
              "language": null
            },
            "hash": "efc39850acc6a3a242a5d32da5f8b31057529b428c76b2e42402f99b182c52e1",
            "class_name": "RelatedNodeInfo"
          },
          "3": {
            "node_id": "d385007c-ad47-4231-9aac-c38b724e62df",
            "node_type": "1",
            "metadata": {},
            "hash": "51ccf80103bd2332e062d352a8d242d81fc9946cf02164547cf4f5971d15d5a0",
            "class_name": "RelatedNodeInfo"
          }
        },
        "text": "I'm not even sure what the list is,\nbecause we, ah, skipped all that.  When we got real funding near\nthe end of 1996, we hired a great CFO, who fixed everything   \nretroactively.  It turns out that no one comes and arrests you if\nyou don't do everything you're supposed to when starting a company.\nAnd a good thing too, or a lot of startups would never get started.\n[5]It can be dangerous to delay turning yourself into a company, because\none or more of the founders might decide to split off and start   \nanother company doing the same thing.  This does happen.  So when\nyou set up the company, as well as as apportioning the stock, you\nshould get all the founders to sign something agreeing that everyone's\nideas belong to this company, and that this company is going to be\neveryone's only job.[If this were a movie, ominous music would begin here.]While you're at it, you should ask what else they've signed.  One\nof the worst things that can happen to a startup is to run into       \nintellectual property problems.  We did, and it came closer to \nkilling us than any competitor ever did.As we were in the middle of getting bought, we discovered that one\nof our people had, early on, been bound by an agreement that said\nall his ideas belonged to the giant company that was paying for him\nto go to grad school.  In theory, that could have meant someone\nelse owned big chunks of our software.  So the acquisition came to\na screeching halt while we tried to sort this out.  The problem      \nwas, since we'd been about to be acquired, we'd allowed ourselves \nto run low on cash.  Now we needed to raise more to keep going. \nBut it's hard to raise money with an IP cloud over your head, because\ninvestors can't judge how serious it is.Our existing investors, knowing that we needed money and had nowhere\nelse to get it, at this point attempted certain gambits which I\nwill not describe in detail, except to remind readers that the word   \n\"angel\" is a metaphor.  The founders thereupon proposed to walk   \naway from the company, after giving the investors a brief tutorial \non how to administer the servers themselves.  And while this was\nhappening, the acquirers used the delay as an excuse to welch on  \nthe deal.Miraculously it all turned out ok.  The investors backed down; we\ndid another round of funding at a reasonable valuation; the giant\ncompany finally gave us a piece of paper saying they didn't own our\nsoftware; and six months later we were bought by Yahoo for much\nmore than the earlier acquirer had agreed to pay.  So we were happy\nin the end, though the experience probably took several years off  \nmy life.Don't do what we did.  Before you consummate a startup, ask \neveryone about their previous IP history.Once you've got a company set up, it may seem presumptuous to go\nknocking on the doors of rich people and asking them to invest tens\nof thousands of dollars in something that is really just a bunch \nof guys with some ideas.  But when you look at it from the rich\npeople's point of view, the picture is more encouraging. Most rich \npeople are looking for good investments.  If you really think you\nhave a chance of succeeding, you're doing them a favor by letting\nthem invest.  Mixed with any annoyance they might feel about being   \napproached will be the thought: are these guys the next Google?Usually angels are financially equivalent to founders.  They get \nthe same kind of stock and get diluted the same amount in future\nrounds.  How much stock should they get?  That depends on how\nambitious you feel.  When you offer x percent of your company for\ny dollars, you're implicitly claiming a certain value for the whole\ncompany.  Venture investments are usually described in terms of\nthat number.  If you give an investor new shares equal to 5% of\nthose already outstanding in return for $100,000, then you've done\nthe deal at a pre-money valuation of $2 million.How do you decide what the value of the company should be?  There\nis no rational way.  At this stage the company is just a bet.  I\ndidn't realize that when we were raising money.  Julian\nthought we ought to value the company at several million \ndollars.",
        "start_char_idx": 23960,
        "end_char_idx": 28105,
        "text_template": "{metadata_str}\n\n{content}",
        "metadata_template": "{key}: {value}",
        "metadata_seperator": "\n",
        "class_name": "TextNode"
      },
      "__type__": "1"
    },
    "d385007c-ad47-4231-9aac-c38b724e62df": {
      "__data__": {
        "id_": "d385007c-ad47-4231-9aac-c38b724e62df",
        "embedding": null,
        "metadata": {
          "source": "https://paulgraham.com/start.html",
          "title": "How to Start a Startup",
          "language": null
        },
        "excluded_embed_metadata_keys": [],
        "excluded_llm_metadata_keys": [],
        "relationships": {
          "1": {
            "node_id": "a5402da5-10e5-4cad-88ab-37b26d552e5a",
            "node_type": "4",
            "metadata": {
              "source": "https://paulgraham.com/start.html",
              "title": "How to Start a Startup",
              "language": null
            },
            "hash": "e7ce94512d6f70c719833a207949510f80645c0061caaa06244da613b912e1f1",
            "class_name": "RelatedNodeInfo"
          },
          "2": {
            "node_id": "3236e272-f1b2-410f-a311-8ada5d747880",
            "node_type": "1",
            "metadata": {
              "source": "https://paulgraham.com/start.html",
              "title": "How to Start a Startup",
              "language": null
            },
            "hash": "12d2a96741e5d86fcfebfb5709bc3cf478576fed9aceeee1cda7d0485f23cc83",
            "class_name": "RelatedNodeInfo"
          },
          "3": {
            "node_id": "c0e4bfcd-4a19-4f5f-a96f-ebc07c8320a3",
            "node_type": "1",
            "metadata": {},
            "hash": "1dcc8587ea0c9a2bb201cad053f8bf9fbba466d81672f8ae6d45861487f156bf",
            "class_name": "RelatedNodeInfo"
          }
        },
        "text": "They get \nthe same kind of stock and get diluted the same amount in future\nrounds.  How much stock should they get?  That depends on how\nambitious you feel.  When you offer x percent of your company for\ny dollars, you're implicitly claiming a certain value for the whole\ncompany.  Venture investments are usually described in terms of\nthat number.  If you give an investor new shares equal to 5% of\nthose already outstanding in return for $100,000, then you've done\nthe deal at a pre-money valuation of $2 million.How do you decide what the value of the company should be?  There\nis no rational way.  At this stage the company is just a bet.  I\ndidn't realize that when we were raising money.  Julian\nthought we ought to value the company at several million \ndollars.  I thought it was preposterous to claim that a couple\nthousand lines of code, which was all we had at the time, were worth\nseveral million dollars.  Eventually we settled on one million,\nbecause Julian said no one would invest in a company with a valuation\nany lower. [6]What I didn't grasp at the time was that the valuation wasn't just   \nthe value of the code we'd written so far.  It was also the value\nof our ideas, which turned out to be right, and of all the future\nwork we'd do, which turned out to be a lot.The next round of funding is the one in which you might deal with \nactual \nventure capital firms.  \nBut don't wait till you've burned   \nthrough your last round of funding to start approaching them.  VCs are slow to\nmake up their minds.  They can take months.  You don't want to be \nrunning out of money while you're trying to negotiate with them.Getting money from an actual VC firm is a bigger deal than getting\nmoney from angels.  The amounts of money involved are larger, millions\nusually.  So the deals take longer, dilute you more, and impose\nmore onerous conditions.Sometimes the VCs want to install a new CEO of their own choosing. \nUsually the claim is that you need someone mature and experienced,\nwith a business background.  Maybe in some cases this is true.   And\nyet Bill Gates was young and inexperienced and had no business \nbackground, and he seems to have done ok.  Steve Jobs got booted\nout of his own company by someone mature and experienced, with a\nbusiness background, who then proceeded to ruin the company.  So I\nthink people who are mature and experienced, with a business\nbackground, may be overrated.  We used to call these guys \"newscasters,\"\nbecause they had neat hair and spoke in deep, confident voices, and\ngenerally didn't know much more than they read on the teleprompter.We talked to a number of VCs, but eventually we ended up financing\nour startup entirely with angel money.  The main reason was that     \nwe feared a brand-name VC firm would stick us with a newscaster as\npart of the deal.  That might have been ok if he was content to\nlimit himself to talking to the press, but what if he wanted to  \nhave a say in running the company?   That would have led to disaster,\nbecause our software was so complex.  We were a company whose whole\nm.o. was to win through better technology.  The strategic decisions\nwere mostly decisions about technology, and we didn't need any help\nwith those.This was also one reason we didn't go public.  Back in 1998 our CFO\ntried to talk me into it.  In those days you could go public as a\ndogfood portal, so as a company with a real product and real revenues,\nwe might have done well.  But I feared it would have meant taking\non a newscaster-- someone who, as they say, \"can talk Wall Street's\nlanguage.\"I'm happy to see Google is bucking that trend.  They didn't talk\nWall Street's language when they did their IPO, and Wall Street\ndidn't buy.  And now Wall Street is collectively kicking itself.\nThey'll pay attention next time.  Wall Street learns new languages   \nfast when money is involved.You have more leverage negotiating with VCs than you realize.  The   \nreason is other VCs.  I know a number of VCs now, and when you talk\nto them you realize that it's a seller's market.  Even now there\nis too much money chasing too few good deals.VCs form a pyramid.",
        "start_char_idx": 27338,
        "end_char_idx": 31456,
        "text_template": "{metadata_str}\n\n{content}",
        "metadata_template": "{key}: {value}",
        "metadata_seperator": "\n",
        "class_name": "TextNode"
      },
      "__type__": "1"
    },
    "c0e4bfcd-4a19-4f5f-a96f-ebc07c8320a3": {
      "__data__": {
        "id_": "c0e4bfcd-4a19-4f5f-a96f-ebc07c8320a3",
        "embedding": null,
        "metadata": {
          "source": "https://paulgraham.com/start.html",
          "title": "How to Start a Startup",
          "language": null
        },
        "excluded_embed_metadata_keys": [],
        "excluded_llm_metadata_keys": [],
        "relationships": {
          "1": {
            "node_id": "a5402da5-10e5-4cad-88ab-37b26d552e5a",
            "node_type": "4",
            "metadata": {
              "source": "https://paulgraham.com/start.html",
              "title": "How to Start a Startup",
              "language": null
            },
            "hash": "e7ce94512d6f70c719833a207949510f80645c0061caaa06244da613b912e1f1",
            "class_name": "RelatedNodeInfo"
          },
          "2": {
            "node_id": "d385007c-ad47-4231-9aac-c38b724e62df",
            "node_type": "1",
            "metadata": {
              "source": "https://paulgraham.com/start.html",
              "title": "How to Start a Startup",
              "language": null
            },
            "hash": "48c39062d01934e89ed97e4b3451feba8f1d97a1a861e798545d38418f139449",
            "class_name": "RelatedNodeInfo"
          },
          "3": {
            "node_id": "f020f23f-7cf2-499d-a5b0-253c9d99b047",
            "node_type": "1",
            "metadata": {},
            "hash": "d3aeeeed2e4c884f1404f70cc930addb3b7ad37786366a5f89a8261e2a5071ce",
            "class_name": "RelatedNodeInfo"
          }
        },
        "text": "In those days you could go public as a\ndogfood portal, so as a company with a real product and real revenues,\nwe might have done well.  But I feared it would have meant taking\non a newscaster-- someone who, as they say, \"can talk Wall Street's\nlanguage.\"I'm happy to see Google is bucking that trend.  They didn't talk\nWall Street's language when they did their IPO, and Wall Street\ndidn't buy.  And now Wall Street is collectively kicking itself.\nThey'll pay attention next time.  Wall Street learns new languages   \nfast when money is involved.You have more leverage negotiating with VCs than you realize.  The   \nreason is other VCs.  I know a number of VCs now, and when you talk\nto them you realize that it's a seller's market.  Even now there\nis too much money chasing too few good deals.VCs form a pyramid.  At the top are famous ones like Sequoia and\nKleiner Perkins, but beneath those are a huge number you've never \nheard of.  What they all have in common is that a dollar from them \nis worth one dollar.  Most VCs will tell you that they don't just \nprovide money, but connections and advice.  If you're talking to  \nVinod Khosla or John Doerr or Mike Moritz, this is true.  But such\nadvice and connections can come very expensive.  And as you go down\nthe food chain the VCs get rapidly \n\ndumber.  A few steps down from \nthe top you're basically talking to bankers who've picked up a few\nnew vocabulary words from reading Wired.  (Does your product\nuse XML?)  So I'd advise you to be skeptical about claims\nof experience and connections.  Basically, a VC is a source of\nmoney.  I'd be inclined to go with whoever offered the most money  \nthe soonest with the least strings attached.You may wonder how much to tell VCs.  And you should, because some\nof them may one day be funding your competitors.  I think the best\nplan is not to be overtly secretive, but not to tell them everything\neither.  After all, as most VCs say, they're more interested in the\npeople than the ideas.  The main reason they want to talk about\nyour idea is to judge you, not the idea.  So as long as you seem\nlike you know what you're doing, you can probably keep a few things\nback from them. [7]Talk to as many VCs as you can, even if you don't want their money,\nbecause a) they may be on the board of someone who will buy you,     \nand b) if you seem impressive, they'll be discouraged from investing\nin your competitors.  The most efficient way to reach VCs, especially\nif you only want them to know about you and don't want their money,\nis at the conferences that are occasionally organized for startups   \nto present to them.Not Spending ItWhen and if you get an infusion of real money from investors, what\nshould you do with it?  Not spend it, that's what.  In nearly every   \nstartup that fails, the proximate cause is running out of money. \nUsually there is something deeper wrong.  But even a proximate cause\nof death is worth trying hard to avoid.During the Bubble many startups tried to \"get big fast.\" Ideally\nthis meant getting a lot of customers fast.  But it was easy for\nthe meaning to slide over into hiring a lot of people fast.Of the two versions, the one where you get a lot of customers fast\nis of course preferable.  But even that may be overrated.  The idea\nis to get there first and get all the users, leaving none for\ncompetitors.  But I think in most businesses the advantages of being\nfirst to market are not so overwhelmingly great.  Google is again\na case in point.  When they appeared it seemed as if search was a\nmature market, dominated by big players who'd spent millions to\nbuild their brands: Yahoo, Lycos, Excite, Infoseek, Altavista,  \nInktomi.  Surely 1998 was a little late to arrive at the party.But as the founders of Google knew, brand is worth next to nothing\nin the search business.  You can come along at any point and make \nsomething better, and users will gradually seep over to you.  As  \nif to emphasize the point, Google never did any advertising.",
        "start_char_idx": 30643,
        "end_char_idx": 34624,
        "text_template": "{metadata_str}\n\n{content}",
        "metadata_template": "{key}: {value}",
        "metadata_seperator": "\n",
        "class_name": "TextNode"
      },
      "__type__": "1"
    },
    "f020f23f-7cf2-499d-a5b0-253c9d99b047": {
      "__data__": {
        "id_": "f020f23f-7cf2-499d-a5b0-253c9d99b047",
        "embedding": null,
        "metadata": {
          "source": "https://paulgraham.com/start.html",
          "title": "How to Start a Startup",
          "language": null
        },
        "excluded_embed_metadata_keys": [],
        "excluded_llm_metadata_keys": [],
        "relationships": {
          "1": {
            "node_id": "a5402da5-10e5-4cad-88ab-37b26d552e5a",
            "node_type": "4",
            "metadata": {
              "source": "https://paulgraham.com/start.html",
              "title": "How to Start a Startup",
              "language": null
            },
            "hash": "e7ce94512d6f70c719833a207949510f80645c0061caaa06244da613b912e1f1",
            "class_name": "RelatedNodeInfo"
          },
          "2": {
            "node_id": "c0e4bfcd-4a19-4f5f-a96f-ebc07c8320a3",
            "node_type": "1",
            "metadata": {
              "source": "https://paulgraham.com/start.html",
              "title": "How to Start a Startup",
              "language": null
            },
            "hash": "d681d335f233dfc178b9a72535afdc889dad003aafdd6e22bd3904882d9d3c7a",
            "class_name": "RelatedNodeInfo"
          },
          "3": {
            "node_id": "1f67b334-0f66-4815-a36a-bf8b0ad6b3d0",
            "node_type": "1",
            "metadata": {},
            "hash": "175c544b1f732c3e56461f032a5507bdfbfb2084b8d538841726a479de6e4924",
            "class_name": "RelatedNodeInfo"
          }
        },
        "text": "But even that may be overrated.  The idea\nis to get there first and get all the users, leaving none for\ncompetitors.  But I think in most businesses the advantages of being\nfirst to market are not so overwhelmingly great.  Google is again\na case in point.  When they appeared it seemed as if search was a\nmature market, dominated by big players who'd spent millions to\nbuild their brands: Yahoo, Lycos, Excite, Infoseek, Altavista,  \nInktomi.  Surely 1998 was a little late to arrive at the party.But as the founders of Google knew, brand is worth next to nothing\nin the search business.  You can come along at any point and make \nsomething better, and users will gradually seep over to you.  As  \nif to emphasize the point, Google never did any advertising.  They're\nlike dealers; they sell the stuff, but they know better than to use\nit themselves.The competitors Google buried would have done better to spend those\nmillions improving their software.  Future startups should learn\nfrom that mistake.  Unless you're in a market where products are   \nas undifferentiated as cigarettes or vodka or laundry detergent,\nspending a lot on brand advertising is a sign of breakage.  And few\nif any Web businesses are so undifferentiated.  The dating sites  \nare running big ad campaigns right now, which is all the \nmore evidence they're ripe for the picking.  (Fee, fie, fo, fum, I  \nsmell a company run by marketing guys.)We were compelled by circumstances to grow slowly, and in retrospect\nit was a good thing.  The founders all learned to do every job in  \nthe company.  As well as writing software, I had to do sales and\ncustomer support.  At sales I was not very good.  I was persistent,\nbut I didn't have the smoothness of a good salesman.  My message   \nto potential customers was: you'd be stupid not to sell online, and  \nif you sell online you'd be stupid to use anyone else's software.   \nBoth statements were true, but that's not the way to convince people.I was great at customer support though.  Imagine talking to a\ncustomer support person who not only knew everything about the\nproduct, but would apologize abjectly if there was a bug, and then\nfix it immediately, while you were on the phone with them.  Customers\nloved us.  And we loved them, because when you're growing slow by\nword of mouth, your first batch of users are the ones who were smart\nenough to find you by themselves.  There is nothing more valuable,\nin the early stages of a startup, than smart users.  If you listen\nto them, they'll tell you exactly how to make a winning product.      \nAnd not only will they give you this advice for free, they'll pay\nyou.We officially launched in early 1996.  By the end of that year we\nhad about 70 users.  Since this was the era of \"get big fast,\" I\nworried about how small and obscure we were.  But in fact we were\ndoing exactly the right thing.  Once you get big (in users or\nemployees) it gets hard to change your product.  That year was\neffectively a laboratory for improving our software.  By the end  \nof it, we were so far ahead of our competitors that they never had \na hope of catching up.  And since all the hackers had spent many\nhours talking to users, we understood online commerce way better\nthan anyone else.That's the key to success as a startup.  There is nothing more \nimportant than understanding your business.  You might think that\nanyone in a business must, ex officio, understand it.  Far from it.   \nGoogle's secret\nweapon was simply that they understood search.  I was working for \nYahoo when Google appeared, and Yahoo didn't understand search.  I\nknow because I once tried to convince the powers that be that we\nhad to make search better, and I got in reply what was then the\nparty line about it: that Yahoo was no longer a mere \"search engine.\"\nSearch was now only a small percentage of our page views, less than\none month's growth, and now that we were established as a \"media   \ncompany,\" or \"portal,\" or whatever we were, search could safely be\nallowed to wither and drop off, like an umbilical cord.Well, a small fraction of page views they may be, but they are an  \nimportant fraction, because they are the page views that Web sessions  \nstart with.",
        "start_char_idx": 33866,
        "end_char_idx": 38064,
        "text_template": "{metadata_str}\n\n{content}",
        "metadata_template": "{key}: {value}",
        "metadata_seperator": "\n",
        "class_name": "TextNode"
      },
      "__type__": "1"
    },
    "1f67b334-0f66-4815-a36a-bf8b0ad6b3d0": {
      "__data__": {
        "id_": "1f67b334-0f66-4815-a36a-bf8b0ad6b3d0",
        "embedding": null,
        "metadata": {
          "source": "https://paulgraham.com/start.html",
          "title": "How to Start a Startup",
          "language": null
        },
        "excluded_embed_metadata_keys": [],
        "excluded_llm_metadata_keys": [],
        "relationships": {
          "1": {
            "node_id": "a5402da5-10e5-4cad-88ab-37b26d552e5a",
            "node_type": "4",
            "metadata": {
              "source": "https://paulgraham.com/start.html",
              "title": "How to Start a Startup",
              "language": null
            },
            "hash": "e7ce94512d6f70c719833a207949510f80645c0061caaa06244da613b912e1f1",
            "class_name": "RelatedNodeInfo"
          },
          "2": {
            "node_id": "f020f23f-7cf2-499d-a5b0-253c9d99b047",
            "node_type": "1",
            "metadata": {
              "source": "https://paulgraham.com/start.html",
              "title": "How to Start a Startup",
              "language": null
            },
            "hash": "dde934f677c81d97106671afa15706f0bf5a510e6122b62d81087a56516daa42",
            "class_name": "RelatedNodeInfo"
          },
          "3": {
            "node_id": "0d02d136-a814-49ac-bd9e-2da19939fa39",
            "node_type": "1",
            "metadata": {},
            "hash": "22e60509bbdd0236d1f57e8f36f112c156f9e88bedfc1c045abe95f0d0c04a5b",
            "class_name": "RelatedNodeInfo"
          }
        },
        "text": "You might think that\nanyone in a business must, ex officio, understand it.  Far from it.   \nGoogle's secret\nweapon was simply that they understood search.  I was working for \nYahoo when Google appeared, and Yahoo didn't understand search.  I\nknow because I once tried to convince the powers that be that we\nhad to make search better, and I got in reply what was then the\nparty line about it: that Yahoo was no longer a mere \"search engine.\"\nSearch was now only a small percentage of our page views, less than\none month's growth, and now that we were established as a \"media   \ncompany,\" or \"portal,\" or whatever we were, search could safely be\nallowed to wither and drop off, like an umbilical cord.Well, a small fraction of page views they may be, but they are an  \nimportant fraction, because they are the page views that Web sessions  \nstart with.  I think Yahoo gets that now.Google understands a few other things most Web companies still\ndon't.  The most important is that you should put users before\nadvertisers, even though the advertisers are paying and users aren't.\nOne of my favorite bumper stickers reads \"if the people lead, the  \nleaders will follow.\" Paraphrased for the Web, this becomes \"get\nall the users, and the advertisers will follow.\"  More generally,\ndesign your product to please users first, and then think about how\nto make money from it.  If you don't put users first, you leave a    \ngap for competitors who do.To make something users love, you have to understand them.  And the\nbigger you are, the harder that is.  So I say \"get big slow.\" The\nslower you burn through your funding, the more time you have to\nlearn.The other reason to spend money slowly is to encourage a culture \nof cheapness.  That's something Yahoo did understand.  David Filo's \ntitle was \"Chief Yahoo,\" but he was proud that his unofficial title\nwas \"Cheap Yahoo.\"  Soon after we arrived at Yahoo, we got an email\nfrom Filo, who had been crawling around our directory hierarchy,      \nasking if it was really necessary to store so much of our data on\nexpensive RAID drives.  I was impressed by that.  Yahoo's market\ncap then was already in the billions, and they were still worrying\nabout wasting a few gigs of disk space.When you get a couple million dollars from a VC firm, you tend to\nfeel rich.  It's important to realize you're not.  A rich company\nis one with large revenues.  This money isn't revenue.  It's money\ninvestors have given you in the hope you'll be able to generate   \nrevenues.  So despite those millions in the bank, you're still poor.For most startups the model should be grad student, not law firm.\nAim for cool and cheap, not expensive and impressive.  For us the\ntest of whether a startup understood this was whether they had Aeron\nchairs.  The Aeron came out during the Bubble and was very popular\nwith startups.  Especially the type, all too common then, that was\nlike a bunch of kids playing house with money supplied by VCs.   We   \nhad office chairs so cheap that the arms all fell off.  This was \nslightly embarrassing at the time, but in retrospect the grad-studenty\natmosphere of our office was another of those things we did right \nwithout knowing it.Our offices were in a wooden triple-decker in Harvard Square.  It\nhad been an apartment until about the 1970s, and there was still a   \nclaw-footed bathtub in the bathroom.  It must once have been inhabited\nby someone fairly eccentric, because a lot of the chinks in the    \nwalls were stuffed with aluminum foil, as if to protect against   \ncosmic rays.  When eminent visitors came to see us, we were a bit\nsheepish about the low production values.  But in fact that place\nwas the perfect space for a startup.  We felt like our role was to \nbe impudent underdogs instead of corporate stuffed shirts, and that    \nis exactly the spirit you want.An apartment is also the right kind of place for developing software.\nCube farms suck for that, as you've probably discovered if you've\ntried it.  Ever notice how much easier it is to hack at home than\nat work?  So why not make work more like home?When you're looking for space for a startup, don't feel that it has\nto look professional.  Professional means doing good work, not\nelevators and glass walls.",
        "start_char_idx": 37214,
        "end_char_idx": 41450,
        "text_template": "{metadata_str}\n\n{content}",
        "metadata_template": "{key}: {value}",
        "metadata_seperator": "\n",
        "class_name": "TextNode"
      },
      "__type__": "1"
    },
    "0d02d136-a814-49ac-bd9e-2da19939fa39": {
      "__data__": {
        "id_": "0d02d136-a814-49ac-bd9e-2da19939fa39",
        "embedding": null,
        "metadata": {
          "source": "https://paulgraham.com/start.html",
          "title": "How to Start a Startup",
          "language": null
        },
        "excluded_embed_metadata_keys": [],
        "excluded_llm_metadata_keys": [],
        "relationships": {
          "1": {
            "node_id": "a5402da5-10e5-4cad-88ab-37b26d552e5a",
            "node_type": "4",
            "metadata": {
              "source": "https://paulgraham.com/start.html",
              "title": "How to Start a Startup",
              "language": null
            },
            "hash": "e7ce94512d6f70c719833a207949510f80645c0061caaa06244da613b912e1f1",
            "class_name": "RelatedNodeInfo"
          },
          "2": {
            "node_id": "1f67b334-0f66-4815-a36a-bf8b0ad6b3d0",
            "node_type": "1",
            "metadata": {
              "source": "https://paulgraham.com/start.html",
              "title": "How to Start a Startup",
              "language": null
            },
            "hash": "0f572521ed3f06ca9bb09f4c639bc66c2d0857914dc50cb02fdbbcd6f2ef00c3",
            "class_name": "RelatedNodeInfo"
          },
          "3": {
            "node_id": "a367e7d1-51bd-4bad-8569-ac94f712069a",
            "node_type": "1",
            "metadata": {},
            "hash": "f907a0f574331881517b7194d799ca35b5d2f5ffbb047fa0eebf745ec89382fa",
            "class_name": "RelatedNodeInfo"
          }
        },
        "text": "When eminent visitors came to see us, we were a bit\nsheepish about the low production values.  But in fact that place\nwas the perfect space for a startup.  We felt like our role was to \nbe impudent underdogs instead of corporate stuffed shirts, and that    \nis exactly the spirit you want.An apartment is also the right kind of place for developing software.\nCube farms suck for that, as you've probably discovered if you've\ntried it.  Ever notice how much easier it is to hack at home than\nat work?  So why not make work more like home?When you're looking for space for a startup, don't feel that it has\nto look professional.  Professional means doing good work, not\nelevators and glass walls.  I'd advise most startups to avoid\ncorporate space at first and just rent an apartment.  You want to\nlive at the office in a startup, so why not have a place designed\nto be lived in as your office?Besides being cheaper and better to work in, apartments tend to be\nin better locations than office buildings.  And for a startup\nlocation is very important.  The key to productivity is for people\nto come back to work after dinner.  Those hours after the phone\nstops ringing are by far the best for getting work done.  Great\nthings happen when a group of employees go out to dinner together, \ntalk over ideas, and then come back to their offices to implement  \nthem.  So you want to be in a place where there are a lot of\nrestaurants around, not some dreary office park that's a wasteland\nafter 6:00 PM.  Once a company shifts over into the model where \neveryone drives home to the suburbs for dinner, however late, you've\nlost something extraordinarily valuable.  God help you if you\nactually start in that mode.If I were going to start a startup today, there are only three   \nplaces I'd consider doing it: on the Red Line near Central, Harvard,\nor Davis Squares (Kendall is too sterile); in Palo Alto on University\nor California Aves; and in Berkeley immediately north or south of   \ncampus.  These are the only places I know that have the right kind\nof vibe.The most important way to not spend money is by not hiring people.  \nI may be an extremist, but I think hiring people is the worst thing\na company can do.  To start with, people are a recurring expense, \nwhich is the worst kind.  They also tend to cause you to grow out     \nof your space, and perhaps even move to the sort of uncool office\nbuilding that will make your software worse.  But worst of all,\nthey slow you down: instead of sticking your head in someone's    \noffice and checking out an idea with them, eight people have to\nhave a meeting about it.  So the fewer people you can hire, the\nbetter.During the Bubble a lot of startups had the opposite policy.  They\nwanted to get \"staffed up\" as soon as possible, as if you couldn't \nget anything done unless there was someone with the corresponding \njob title.  That's big company thinking.  Don't hire people to fill\nthe gaps in some a priori org chart.  The only reason to hire someone\nis to do something you'd like to do but can't.If hiring unnecessary people is expensive and slows you down, why\ndo nearly all companies do it?  I think the main reason is that\npeople like the idea of having a lot of people working for them.\nThis weakness often extends right up to the CEO.  If you ever end\nup running a company, you'll find the most common question people\nask is how many employees you have.  This is their way of weighing\nyou.  It's not just random people who ask this; even reporters do.\nAnd they're going to be a lot more impressed if the answer is a\nthousand than if it's ten.This is ridiculous, really.  If two companies have the same revenues,\nit's the one with fewer employees that's more impressive.  When  \npeople used to ask me how many people our startup had, and I answered\n\"twenty,\" I could see them thinking that we didn't count for much.\nI used to want to add \"but our main competitor, whose ass we regularly\nkick, has a hundred and forty, so can we have credit for the larger\nof the two numbers?\"As with office space, the number of your employees is a choice \nbetween seeming impressive, and being impressive.  Any of you who  \nwere nerds in high school know about this \nchoice.  Keep doing it when you start a company.Should You?But should you start a company?",
        "start_char_idx": 40756,
        "end_char_idx": 45050,
        "text_template": "{metadata_str}\n\n{content}",
        "metadata_template": "{key}: {value}",
        "metadata_seperator": "\n",
        "class_name": "TextNode"
      },
      "__type__": "1"
    },
    "a367e7d1-51bd-4bad-8569-ac94f712069a": {
      "__data__": {
        "id_": "a367e7d1-51bd-4bad-8569-ac94f712069a",
        "embedding": null,
        "metadata": {
          "source": "https://paulgraham.com/start.html",
          "title": "How to Start a Startup",
          "language": null
        },
        "excluded_embed_metadata_keys": [],
        "excluded_llm_metadata_keys": [],
        "relationships": {
          "1": {
            "node_id": "a5402da5-10e5-4cad-88ab-37b26d552e5a",
            "node_type": "4",
            "metadata": {
              "source": "https://paulgraham.com/start.html",
              "title": "How to Start a Startup",
              "language": null
            },
            "hash": "e7ce94512d6f70c719833a207949510f80645c0061caaa06244da613b912e1f1",
            "class_name": "RelatedNodeInfo"
          },
          "2": {
            "node_id": "0d02d136-a814-49ac-bd9e-2da19939fa39",
            "node_type": "1",
            "metadata": {
              "source": "https://paulgraham.com/start.html",
              "title": "How to Start a Startup",
              "language": null
            },
            "hash": "bdf95cd2b2a9cafaf5a72f08e54fd973981263e2e88536f23b7af5a15f10aba9",
            "class_name": "RelatedNodeInfo"
          },
          "3": {
            "node_id": "9652eed2-57cb-4984-899b-c8cb45836ecd",
            "node_type": "1",
            "metadata": {},
            "hash": "4004005056cf6080b9990f1de49a0ca2dc37a529ec598b182b499d02be425d54",
            "class_name": "RelatedNodeInfo"
          }
        },
        "text": "It's not just random people who ask this; even reporters do.\nAnd they're going to be a lot more impressed if the answer is a\nthousand than if it's ten.This is ridiculous, really.  If two companies have the same revenues,\nit's the one with fewer employees that's more impressive.  When  \npeople used to ask me how many people our startup had, and I answered\n\"twenty,\" I could see them thinking that we didn't count for much.\nI used to want to add \"but our main competitor, whose ass we regularly\nkick, has a hundred and forty, so can we have credit for the larger\nof the two numbers?\"As with office space, the number of your employees is a choice \nbetween seeming impressive, and being impressive.  Any of you who  \nwere nerds in high school know about this \nchoice.  Keep doing it when you start a company.Should You?But should you start a company?  Are you the right sort of person\nto do it?  If you are, is it worth it?More people are the right sort of person to start a startup than\nrealize it.  That's the main reason I wrote this.  There could be   \nten times more startups than there are, and that would probably be\na good thing.I was, I now realize, exactly the right sort of person to start a   \nstartup.  But the idea terrified me at first.  I was forced into   \nit because I was a Lisp hacker.  The company\nI'd been consulting for seemed to be running into trouble, and there  \nwere not a lot of other companies using Lisp.  Since I couldn't  \nbear the thought of programming in another language (this was 1995,\nremember, when \"another language\" meant C++) the only option seemed\nto be to start a new company using Lisp.I realize this sounds far-fetched, but if you're a Lisp hacker\nyou'll know what I mean.  And if the idea of starting a startup\nfrightened me so much that I only did it out of necessity, there  \nmust be a lot of people who would be good at it but who are too    \nintimidated to try.So who should start a startup?  Someone who is a good hacker, between\nabout 23 and 38, and who wants to solve the money problem in one\nshot instead of getting paid gradually over a conventional working\nlife.I can't say precisely what a good hacker is.  At a first rate   \nuniversity this might include the top half of computer science   \nmajors.  Though of course you don't have to be a CS major to be a\nhacker; I was a philosophy major in college.It's hard to tell whether you're a good hacker, especially when\nyou're young.  Fortunately the process of starting startups tends\nto select them automatically.  What drives people to start startups\nis (or should be) looking at existing technology and thinking, don't \nthese guys realize they should be doing x, y, and z?  And that's \nalso a sign that one is a good hacker.I put the lower bound at 23 not because there's something that\ndoesn't happen to your brain till then, but because you need to see\nwhat it's like in an existing business before you try running your\nown.  The business doesn't have to be a startup.  I spent a year\nworking for a software company to pay off my college loans.  It was\nthe worst year of my adult life, but I learned, without realizing  \nit at the time, a lot of valuable lessons about the software business.\nIn this case they were mostly negative lessons: don't have a lot\nof meetings; don't have chunks of code that multiple people own;\ndon't have a sales guy running the company; don't make a high-end\nproduct; don't let your code get too big; don't leave finding bugs\nto QA people; don't go too long between releases; don't isolate\ndevelopers from users; don't move from Cambridge to Route 128; and\nso on. [8] But negative lessons are just as valuable as positive \nones.  Perhaps even more valuable: it's hard to repeat a brilliant\nperformance, but it's straightforward to avoid errors. [9]The other reason it's hard to start a company before 23 is that     \npeople won't take you seriously.  VCs won't trust you, and will try\nto reduce you to a mascot as a condition of funding.  Customers\nwill worry you're going to flake out and leave them stranded.",
        "start_char_idx": 44202,
        "end_char_idx": 48250,
        "text_template": "{metadata_str}\n\n{content}",
        "metadata_template": "{key}: {value}",
        "metadata_seperator": "\n",
        "class_name": "TextNode"
      },
      "__type__": "1"
    },
    "9652eed2-57cb-4984-899b-c8cb45836ecd": {
      "__data__": {
        "id_": "9652eed2-57cb-4984-899b-c8cb45836ecd",
        "embedding": null,
        "metadata": {
          "source": "https://paulgraham.com/start.html",
          "title": "How to Start a Startup",
          "language": null
        },
        "excluded_embed_metadata_keys": [],
        "excluded_llm_metadata_keys": [],
        "relationships": {
          "1": {
            "node_id": "a5402da5-10e5-4cad-88ab-37b26d552e5a",
            "node_type": "4",
            "metadata": {
              "source": "https://paulgraham.com/start.html",
              "title": "How to Start a Startup",
              "language": null
            },
            "hash": "e7ce94512d6f70c719833a207949510f80645c0061caaa06244da613b912e1f1",
            "class_name": "RelatedNodeInfo"
          },
          "2": {
            "node_id": "a367e7d1-51bd-4bad-8569-ac94f712069a",
            "node_type": "1",
            "metadata": {
              "source": "https://paulgraham.com/start.html",
              "title": "How to Start a Startup",
              "language": null
            },
            "hash": "ae532e663e02062cdd46264b6ea61e0e16e82158b54154ca1b924d3c87523c68",
            "class_name": "RelatedNodeInfo"
          },
          "3": {
            "node_id": "cbf43e7b-09cf-4e42-bf25-80d9493232d9",
            "node_type": "1",
            "metadata": {},
            "hash": "2fa8dde1ea3f3f5d03d7dab79f86193f855f843514f143e07cf5b15617a19bb1",
            "class_name": "RelatedNodeInfo"
          }
        },
        "text": "[8] But negative lessons are just as valuable as positive \nones.  Perhaps even more valuable: it's hard to repeat a brilliant\nperformance, but it's straightforward to avoid errors. [9]The other reason it's hard to start a company before 23 is that     \npeople won't take you seriously.  VCs won't trust you, and will try\nto reduce you to a mascot as a condition of funding.  Customers\nwill worry you're going to flake out and leave them stranded.  Even\nyou yourself, unless you're very unusual, will feel your age to     \nsome degree; you'll find it awkward to be the boss of someone much \nolder than you, and if you're 21, hiring only people younger rather \nlimits your options.Some people could probably start a company at 18 if they wanted to.\nBill Gates was 19 when he and Paul Allen started Microsoft.  (Paul \nAllen was 22, though, and that probably made a difference.) So if\nyou're thinking, I don't care what he says, I'm going to start a\ncompany now, you may be the sort of person who could get away with\nit.The other cutoff, 38, has a lot more play in it.  One reason I put \nit there is that I don't think many people have the physical stamina\nmuch past that age.   I used to work till 2:00 or 3:00 AM every\nnight, seven days a week.  I don't know if I could do that now.Also,\nstartups are a big risk financially.  If you try something that\nblows up and leaves you broke at 26, big deal; a lot of 26 year\nolds are broke.  By 38 you can't take so many risks-- especially\nif you have kids.My final test may be the most restrictive.  Do you actually want\nto start a startup?  What it amounts to, economically, is compressing\nyour working life into the smallest possible space.  Instead of\nworking at an ordinary rate for 40 years, you work like hell for \nfour.  And maybe end up with nothing-- though in that case it\nprobably won't take four years.During this time you'll do little but work, because when you're not\nworking, your competitors will be.  My only leisure activities were\nrunning, which I needed to do to keep working anyway, and about\nfifteen minutes of reading a night.  I had a girlfriend for a total\nof two months during that three year period.  Every couple weeks I\nwould take a few hours off to visit a used bookshop or go to a  \nfriend's house for dinner.  I went to visit my family twice.\nOtherwise I just worked.Working was often fun, because the people I worked with were some\nof my best friends.  Sometimes it was even technically interesting.\nBut only about 10% of the time.  The best I can say for the other\n90% is that some of it is funnier in hindsight than it seemed then.\nLike the time the power went off in Cambridge for about six hours,\nand we made the mistake of trying to start a gasoline powered\ngenerator inside our offices. I won't try that again.I don't think the amount of bullshit you have to deal with in a\nstartup is more than you'd endure in an ordinary working life.  It's\nprobably less, in fact; it just seems like a lot because it's       \ncompressed into a short period.  So mainly what a startup buys you \nis time.  That's the way to think about it if you're trying to \ndecide whether to start one.  If you're the sort of person who would\nlike to solve the money problem once and for all instead of working \nfor a salary for 40 years, then a startup makes sense.For a lot of people the conflict is between startups and graduate\nschool.  Grad students are just the age, and just the sort of people,\nto start software startups.  You may worry that if you do you'll   \nblow your chances of an academic career.  But it's possible to be  \npart of a startup and stay in grad school, especially at first.  \nTwo of our three original hackers were in grad school the whole \ntime, and both got their degrees. \nThere are few sources of energy\nso powerful as a procrastinating grad student.If you do have to\nleave grad school, in the worst case it won't be for too long.  If\na startup fails, it will probably fail quickly enough that you can \nreturn to academic life.",
        "start_char_idx": 47804,
        "end_char_idx": 51812,
        "text_template": "{metadata_str}\n\n{content}",
        "metadata_template": "{key}: {value}",
        "metadata_seperator": "\n",
        "class_name": "TextNode"
      },
      "__type__": "1"
    },
    "cbf43e7b-09cf-4e42-bf25-80d9493232d9": {
      "__data__": {
        "id_": "cbf43e7b-09cf-4e42-bf25-80d9493232d9",
        "embedding": null,
        "metadata": {
          "source": "https://paulgraham.com/start.html",
          "title": "How to Start a Startup",
          "language": null
        },
        "excluded_embed_metadata_keys": [],
        "excluded_llm_metadata_keys": [],
        "relationships": {
          "1": {
            "node_id": "a5402da5-10e5-4cad-88ab-37b26d552e5a",
            "node_type": "4",
            "metadata": {
              "source": "https://paulgraham.com/start.html",
              "title": "How to Start a Startup",
              "language": null
            },
            "hash": "e7ce94512d6f70c719833a207949510f80645c0061caaa06244da613b912e1f1",
            "class_name": "RelatedNodeInfo"
          },
          "2": {
            "node_id": "9652eed2-57cb-4984-899b-c8cb45836ecd",
            "node_type": "1",
            "metadata": {
              "source": "https://paulgraham.com/start.html",
              "title": "How to Start a Startup",
              "language": null
            },
            "hash": "b05f86747db1c385f38969c452e986f1e6941589cec20625708661112228f739",
            "class_name": "RelatedNodeInfo"
          },
          "3": {
            "node_id": "6d93f9de-1013-4e3a-9e63-e7ab1826bf4d",
            "node_type": "1",
            "metadata": {},
            "hash": "eaf01a6784dc3344023a12c8b760a0a62e6475158f082253f15c7684559f6872",
            "class_name": "RelatedNodeInfo"
          }
        },
        "text": "If you're the sort of person who would\nlike to solve the money problem once and for all instead of working \nfor a salary for 40 years, then a startup makes sense.For a lot of people the conflict is between startups and graduate\nschool.  Grad students are just the age, and just the sort of people,\nto start software startups.  You may worry that if you do you'll   \nblow your chances of an academic career.  But it's possible to be  \npart of a startup and stay in grad school, especially at first.  \nTwo of our three original hackers were in grad school the whole \ntime, and both got their degrees. \nThere are few sources of energy\nso powerful as a procrastinating grad student.If you do have to\nleave grad school, in the worst case it won't be for too long.  If\na startup fails, it will probably fail quickly enough that you can \nreturn to academic life.  And if it succeeds, you may find you no   \nlonger have such a burning desire to be an assistant professor.If you want to do it, do it.  Starting a startup is not the great\nmystery it seems from outside.  It's not something you have to know\nabout \"business\" to do.  Build something users love, and spend less\nthan you make.  How hard is that?Notes[1] Google's revenues are about two billion a year, but half comes\nfrom ads on other sites.[2] One advantage startups have over established companies is that\nthere are no discrimination laws about starting businesses.  For   \nexample, I would be reluctant to start a startup with a woman\nwho had small children, or was likely to have them soon.  But you're\nnot allowed to ask prospective employees if they plan to have kids \nsoon.  Believe it or not, under current US law, you're not even   \nallowed to discriminate on the basis of intelligence.  Whereas when\nyou're starting a company, you can discriminate on any basis you\nwant about who you start it with.[3] Learning to hack is a lot cheaper than business school, because\nyou can do it mostly on your own.  For the price of a Linux box, a\ncopy of K&R, and a few hours of advice from your neighbor's fifteen\nyear old son, you'll be well on your way.[4] Corollary: Avoid starting a startup to sell things to the biggest\ncompany of all, the government.  Yes, there are lots of opportunities\nto sell them technology.  But let someone else start those startups.[5] A friend who started a company in Germany told me they do care \nabout the paperwork there, and that there's more of it.  Which helps\nexplain why there are not more startups in Germany.[6] At the seed stage our valuation was in principle $100,000, because\nJulian got 10% of the company.  But this is a very misleading number,\nbecause the money was the least important of the things Julian gave us.[7] The same goes for companies that seem to want to acquire you.\nThere will be a few that are only pretending to in order to pick\nyour brains.  But you can never tell for sure which these are, so\nthe best approach is to seem entirely open, but to fail to mention\na few critical technical secrets.[8]  I was as bad an employee as this place was a company.  I\napologize to anyone who had to work with me there.[9]  You could probably write a book about how to succeed in business\nby doing everything in exactly the opposite way from the DMV.Thanks to Trevor Blackwell, Sarah Harlin, Jessica Livingston,\nand Robert Morris for reading drafts of this essay, and to Steve\nMelendez and Gregory Price for inviting me to speak.Domain Name SearchTurkish TranslationHebrew TranslationRussian TranslationChinese TranslationFrench TranslationJapanese TranslationArabic Translation",
        "start_char_idx": 50957,
        "end_char_idx": 54538,
        "text_template": "{metadata_str}\n\n{content}",
        "metadata_template": "{key}: {value}",
        "metadata_seperator": "\n",
        "class_name": "TextNode"
      },
      "__type__": "1"
    },
    "6d93f9de-1013-4e3a-9e63-e7ab1826bf4d": {
      "__data__": {
        "id_": "6d93f9de-1013-4e3a-9e63-e7ab1826bf4d",
        "embedding": null,
        "metadata": {
          "source": "https://paulgraham.com/index.html",
          "title": "Paul Graham",
          "language": null
        },
        "excluded_embed_metadata_keys": [],
        "excluded_llm_metadata_keys": [],
        "relationships": {
          "1": {
            "node_id": "d0430c8b-3920-4c2c-a677-9efa91473af7",
            "node_type": "4",
            "metadata": {
              "source": "https://paulgraham.com/index.html",
              "title": "Paul Graham",
              "language": null
            },
            "hash": "362618007d257d345814b16b81ffa5cd3d4763629cc64081c34aa509431889b7",
            "class_name": "RelatedNodeInfo"
          },
          "2": {
            "node_id": "cbf43e7b-09cf-4e42-bf25-80d9493232d9",
            "node_type": "1",
            "metadata": {
              "source": "https://paulgraham.com/start.html",
              "title": "How to Start a Startup",
              "language": null
            },
            "hash": "c29cae46fbc70bd93772a3de118b0fc6edf757b998eba9d976abde1ef1a1ecc5",
            "class_name": "RelatedNodeInfo"
          },
          "3": {
            "node_id": "a6f4b51c-1a05-4239-a66d-46af4f8a4689",
            "node_type": "1",
            "metadata": {},
            "hash": "2c936cb101624dd2f0ab3fd56b452fd5aa0fb446a71cfd628cdd3f2420b0bc2b",
            "class_name": "RelatedNodeInfo"
          }
        },
        "text": "Paul Graham\n\n\n\nNew:\n\nHow to Start Google |\nBest Essay | \nSuperlinear\n\n\n\n\n\nWant to start a startup? Get funded by Y Combinator.\n\n\n\n\n\n\n\n\n\n\u00a9 mmxxiv pg",
        "start_char_idx": 0,
        "end_char_idx": 147,
        "text_template": "{metadata_str}\n\n{content}",
        "metadata_template": "{key}: {value}",
        "metadata_seperator": "\n",
        "class_name": "TextNode"
      },
      "__type__": "1"
    },
    "a6f4b51c-1a05-4239-a66d-46af4f8a4689": {
      "__data__": {
        "id_": "a6f4b51c-1a05-4239-a66d-46af4f8a4689",
        "embedding": null,
        "metadata": {
          "source": "https://paulgraham.com/books.html",
          "title": "Books",
          "language": null
        },
        "excluded_embed_metadata_keys": [],
        "excluded_llm_metadata_keys": [],
        "relationships": {
          "1": {
            "node_id": "b79260c6-ee80-4821-9ff1-b144808cefba",
            "node_type": "4",
            "metadata": {
              "source": "https://paulgraham.com/books.html",
              "title": "Books",
              "language": null
            },
            "hash": "683bcbac1e472a9d971d450268bf2b2facc66c2a57c8991c7ac83d5d1be12127",
            "class_name": "RelatedNodeInfo"
          },
          "2": {
            "node_id": "6d93f9de-1013-4e3a-9e63-e7ab1826bf4d",
            "node_type": "1",
            "metadata": {
              "source": "https://paulgraham.com/index.html",
              "title": "Paul Graham",
              "language": null
            },
            "hash": "f4d1c84a925f4fba3d4e94a8af29843e81f7b651faaf42a93a3374a009ec8401",
            "class_name": "RelatedNodeInfo"
          },
          "3": {
            "node_id": "fd5dad1f-0aa5-463c-ae84-9af0badfedce",
            "node_type": "1",
            "metadata": {},
            "hash": "deac2e911fe966d5fa493cf66ad45d628e3ef57fff8bf959b41e8b3f4407f47c",
            "class_name": "RelatedNodeInfo"
          }
        },
        "text": "Books\n\nOn LispANSI Common LispHackers & Painters",
        "start_char_idx": 0,
        "end_char_idx": 48,
        "text_template": "{metadata_str}\n\n{content}",
        "metadata_template": "{key}: {value}",
        "metadata_seperator": "\n",
        "class_name": "TextNode"
      },
      "__type__": "1"
    },
    "fd5dad1f-0aa5-463c-ae84-9af0badfedce": {
      "__data__": {
        "id_": "fd5dad1f-0aa5-463c-ae84-9af0badfedce",
        "embedding": null,
        "metadata": {
          "source": "https://paulgraham.com/mac.html",
          "title": "Return of the Mac",
          "language": null
        },
        "excluded_embed_metadata_keys": [],
        "excluded_llm_metadata_keys": [],
        "relationships": {
          "1": {
            "node_id": "52fe421e-157e-4fba-939f-ad9df0f7a916",
            "node_type": "4",
            "metadata": {
              "source": "https://paulgraham.com/mac.html",
              "title": "Return of the Mac",
              "language": null
            },
            "hash": "aa970fbb2f18e583486dab8700959167e1ca4aa2988778ead4fbd3931490c373",
            "class_name": "RelatedNodeInfo"
          },
          "2": {
            "node_id": "a6f4b51c-1a05-4239-a66d-46af4f8a4689",
            "node_type": "1",
            "metadata": {
              "source": "https://paulgraham.com/books.html",
              "title": "Books",
              "language": null
            },
            "hash": "651f6b9076b11bb1f09b29e4c4387acee5ec0465ae881bdd276f2efb02f4021b",
            "class_name": "RelatedNodeInfo"
          },
          "3": {
            "node_id": "21c92f2b-ff5d-4cf0-ae87-c4bf806119ad",
            "node_type": "1",
            "metadata": {},
            "hash": "74df6266a4629440d2957e2ef5a40bc89fe494e78cb2b90ac62856ae39b5b892",
            "class_name": "RelatedNodeInfo"
          }
        },
        "text": "Return of the Mac\n\nMarch 2005All the best hackers \nI know are gradually switching to Macs.  My\nfriend Robert said his whole research group at MIT recently bought\nthemselves Powerbooks.  These guys are not the graphic designers\nand grandmas who were buying Macs at Apple's low point in the\nmid 1990s.  They're about as hardcore OS hackers as you can get.The reason, of course, is OS X.  Powerbooks are beautifully designed\nand run FreeBSD.  What more do you need to know?I got a Powerbook at the end of last year.   When my IBM Thinkpad's\nhard disk died soon after, it became my only laptop.  And when my\nfriend Trevor showed up at my house recently, he was carrying a\nPowerbook identical to mine.For most of us, it's not a switch to Apple, but a return.  Hard as\nthis was to believe in the mid 90s, the Mac was in its time the\ncanonical hacker's computer.In the fall of 1983,\nthe professor in one of my college CS classes got up and announced,\nlike a prophet, that there would soon be a computer with half a MIPS\nof processing power that would fit under an airline seat and cost\nso little that we could save enough to buy one from a summer job.\nThe whole room gasped.\nAnd when the Mac appeared, it was even better than we'd hoped.  It\nwas small and powerful and cheap, as promised.  But it was also\nsomething we'd never considered a computer could be: fabulously\nwell designed.I had to have one.  And I wasn't alone.  In the mid to late 1980s,\nall the hackers I knew were either writing software for the Mac,\nor wanted to.  Every futon sofa in Cambridge seemed to have the\nsame fat white book lying open on it.  If you turned it over, it\nsaid \"Inside Macintosh.\" Then came Linux and FreeBSD, and hackers, who follow the most\npowerful OS wherever it leads, found themselves switching to Intel\nboxes.  If you cared about design, you could buy a Thinkpad, which\nwas at least not actively repellent, if you could get the Intel and\nMicrosoft stickers \noff the front. [1]With OS X, the hackers are back.  When I walked into the Apple store\nin Cambridge, it was like coming home.  Much\nwas changed, but there was still that Apple coolness in the air,\nthat feeling that the show was being run by someone who really\ncared, instead of random corporate deal-makers.So what, the business world may say. Who cares if hackers like Apple\nagain?  How big is the hacker market, after all?Quite small, but important out of proportion to its size.  When it\ncomes to computers, what hackers are doing now, everyone will be\ndoing in ten years.  Almost all technology, from Unix to bitmapped\ndisplays to the Web, became popular first within CS departments and\nresearch labs, and gradually spread to the rest of the world.I remember telling my father back in 1986 that there was a new kind\nof computer called a Sun that was a serious Unix machine, but\nso small and cheap that you could\nhave one of your own to sit in front of, instead of sitting in front\nof a VT100 connected to a single central Vax.  Maybe, I suggested,\nhe should buy some stock in this company.  I think he really wishes\nhe'd listened.In 1994 my friend Koling wanted to talk to his girlfriend in Taiwan,\nand to save long-distance bills he wrote some software that would  \nconvert sound to data packets that could be sent over the Internet.\nWe weren't sure at the time whether this was a proper use of the \nInternet, which was still then a quasi-government entity.  What he\nwas doing is now called VoIP, and it is a huge and rapidly growing\nbusiness.If you want to know what ordinary people will be doing with computers\nin ten years, just walk around the CS department at a good university.\nWhatever they're doing, you'll be doing.In the matter of \"platforms\" this tendency is even more pronounced,\nbecause novel software originates with \ngreat hackers, and they tend\nto write it first for whatever computer they personally use.  And\nsoftware sells hardware.  Many if not most of the initial sales of\nthe Apple II came from people who bought one to run VisiCalc.  And\nwhy did Bricklin and Frankston write VisiCalc for the Apple II?\nBecause they personally liked it.",
        "start_char_idx": 0,
        "end_char_idx": 4110,
        "text_template": "{metadata_str}\n\n{content}",
        "metadata_template": "{key}: {value}",
        "metadata_seperator": "\n",
        "class_name": "TextNode"
      },
      "__type__": "1"
    },
    "21c92f2b-ff5d-4cf0-ae87-c4bf806119ad": {
      "__data__": {
        "id_": "21c92f2b-ff5d-4cf0-ae87-c4bf806119ad",
        "embedding": null,
        "metadata": {
          "source": "https://paulgraham.com/mac.html",
          "title": "Return of the Mac",
          "language": null
        },
        "excluded_embed_metadata_keys": [],
        "excluded_llm_metadata_keys": [],
        "relationships": {
          "1": {
            "node_id": "52fe421e-157e-4fba-939f-ad9df0f7a916",
            "node_type": "4",
            "metadata": {
              "source": "https://paulgraham.com/mac.html",
              "title": "Return of the Mac",
              "language": null
            },
            "hash": "aa970fbb2f18e583486dab8700959167e1ca4aa2988778ead4fbd3931490c373",
            "class_name": "RelatedNodeInfo"
          },
          "2": {
            "node_id": "fd5dad1f-0aa5-463c-ae84-9af0badfedce",
            "node_type": "1",
            "metadata": {
              "source": "https://paulgraham.com/mac.html",
              "title": "Return of the Mac",
              "language": null
            },
            "hash": "69dd9d1f739b589473b5e83d7bb6246fbe6eb669631db91e64449701f1450d96",
            "class_name": "RelatedNodeInfo"
          },
          "3": {
            "node_id": "e855d2ae-6914-46f7-96f6-10a18d197360",
            "node_type": "1",
            "metadata": {},
            "hash": "9d3cbcb6f1ce72abe184710853c2638250ee81008602d7f417abd79cf3987ca2",
            "class_name": "RelatedNodeInfo"
          }
        },
        "text": "We weren't sure at the time whether this was a proper use of the \nInternet, which was still then a quasi-government entity.  What he\nwas doing is now called VoIP, and it is a huge and rapidly growing\nbusiness.If you want to know what ordinary people will be doing with computers\nin ten years, just walk around the CS department at a good university.\nWhatever they're doing, you'll be doing.In the matter of \"platforms\" this tendency is even more pronounced,\nbecause novel software originates with \ngreat hackers, and they tend\nto write it first for whatever computer they personally use.  And\nsoftware sells hardware.  Many if not most of the initial sales of\nthe Apple II came from people who bought one to run VisiCalc.  And\nwhy did Bricklin and Frankston write VisiCalc for the Apple II?\nBecause they personally liked it.  They could have chosen any machine\nto make into a star.If you want to attract hackers to write software that will sell\nyour hardware, you have to make it something that they themselves\nuse.  It's not enough to make it \"open.\"  It has to be open and\ngood.And open and good is what Macs are again, finally.  The intervening\nyears have created a situation that is, as far as I know, without\nprecedent: Apple is popular at the low end and the high end, but\nnot in the middle.  My seventy year old mother has a Mac laptop.\nMy friends with PhDs in computer science have Mac laptops. [2] And yet \nApple's overall market share is still small.Though unprecedented, I predict this situation is also temporary.So Dad, there's this company called Apple. They make a new kind of\ncomputer that's as well designed as a Bang & Olufsen stereo system,\nand underneath is the best Unix machine you can buy.  Yes, the price\nto earnings ratio is kind of high, but I think a lot of people are\ngoing to want these.\nNotes[1] These horrible stickers are much like the intrusive ads popular\non pre-Google search engines.  They say to the customer: you are\nunimportant.  We care about Intel and Microsoft, not you.[2] Y Combinator\nis (we hope) visited mostly by\nhackers.  The proportions of OSes are: \nWindows 66.4%, Macintosh 18.8%, Linux 11.4%, and FreeBSD 1.5%.\nThe Mac number is\na big change from what it would have been five years ago.Italian TranslationRussian TranslationChinese Translation",
        "start_char_idx": 3286,
        "end_char_idx": 5581,
        "text_template": "{metadata_str}\n\n{content}",
        "metadata_template": "{key}: {value}",
        "metadata_seperator": "\n",
        "class_name": "TextNode"
      },
      "__type__": "1"
    },
    "e855d2ae-6914-46f7-96f6-10a18d197360": {
      "__data__": {
        "id_": "e855d2ae-6914-46f7-96f6-10a18d197360",
        "embedding": null,
        "metadata": {
          "source": "https://paulgraham.com/faq.html",
          "title": "FAQs",
          "language": null
        },
        "excluded_embed_metadata_keys": [],
        "excluded_llm_metadata_keys": [],
        "relationships": {
          "1": {
            "node_id": "8bace2cd-e1a2-4dfd-b52f-1fc842a42a90",
            "node_type": "4",
            "metadata": {
              "source": "https://paulgraham.com/faq.html",
              "title": "FAQs",
              "language": null
            },
            "hash": "bc0fbf522b9302b9393c9763ae744b33553e0c809193388fb9d892b4380ff4e6",
            "class_name": "RelatedNodeInfo"
          },
          "2": {
            "node_id": "21c92f2b-ff5d-4cf0-ae87-c4bf806119ad",
            "node_type": "1",
            "metadata": {
              "source": "https://paulgraham.com/mac.html",
              "title": "Return of the Mac",
              "language": null
            },
            "hash": "403b7e7a479fa1049765b0b5237cf0cebc85f44e70f0c5069e3e0a71616ebc6a",
            "class_name": "RelatedNodeInfo"
          },
          "3": {
            "node_id": "1f643ec2-f04d-4887-8c88-2692c764d682",
            "node_type": "1",
            "metadata": {},
            "hash": "2a876cd03db790e5275924aee5105f435da98f6a51c3be44a66cdf2aeba09f81",
            "class_name": "RelatedNodeInfo"
          }
        },
        "text": "FAQs\n\nGeneral FAQProgramming FAQStartup FAQArc FAQLisp FAQViaweb FAQPlan for Spam FAQFFB FAQ",
        "start_char_idx": 0,
        "end_char_idx": 92,
        "text_template": "{metadata_str}\n\n{content}",
        "metadata_template": "{key}: {value}",
        "metadata_seperator": "\n",
        "class_name": "TextNode"
      },
      "__type__": "1"
    },
    "1f643ec2-f04d-4887-8c88-2692c764d682": {
      "__data__": {
        "id_": "1f643ec2-f04d-4887-8c88-2692c764d682",
        "embedding": null,
        "metadata": {
          "source": "https://paulgraham.com/articles.html",
          "title": "Essays",
          "language": null
        },
        "excluded_embed_metadata_keys": [],
        "excluded_llm_metadata_keys": [],
        "relationships": {
          "1": {
            "node_id": "4941c0c4-d920-47a7-ad59-7d6f709b5301",
            "node_type": "4",
            "metadata": {
              "source": "https://paulgraham.com/articles.html",
              "title": "Essays",
              "language": null
            },
            "hash": "65d7f8e625efe0c4dbd9db7a008fec2ff47f0d7792506b57ae48f9ed89f1daa7",
            "class_name": "RelatedNodeInfo"
          },
          "2": {
            "node_id": "e855d2ae-6914-46f7-96f6-10a18d197360",
            "node_type": "1",
            "metadata": {
              "source": "https://paulgraham.com/faq.html",
              "title": "FAQs",
              "language": null
            },
            "hash": "52312b5a5154e94ec533ac5d752865ebd1d612ba6dc74459b02713193b67417d",
            "class_name": "RelatedNodeInfo"
          },
          "3": {
            "node_id": "002ce96f-ffcc-40e0-b2a4-f625b68f55be",
            "node_type": "1",
            "metadata": {},
            "hash": "f2e550c44fbd86b5cce3afd18c3bcac7347459ef4b3d2287f2df6530f118f701",
            "class_name": "RelatedNodeInfo"
          }
        },
        "text": "Essays\n\nIf you're not sure which to read, try \nIs it Worth Being Wise?,\nHaving Kids,\nor \nHow to Lose Time and Money.\nThe RedditsHow to Start GoogleThe Best EssaySuperlinear ReturnsHow to Do Great WorkHow to Get New IdeasThe Need to ReadWhat You (Want to)* WantAlien TruthWhat I've Learned from UsersHeresyPutting Ideas into WordsIs There Such a Thing as Good Taste?Beyond SmartWeird LanguagesHow to Work HardA Project of One's OwnFierce NerdsCrazy New IdeasAn NFT That Saves LivesThe Real Reason to End the Death PenaltyHow People Get Rich NowWrite SimplyDonate UnrestrictedWhat I Worked OnEarnestnessBillionaires BuildThe AirbnbsHow to Think for YourselfEarly WorkModeling a Wealth TaxThe Four Quadrants of ConformismOrthodox PrivilegeCoronavirus and CredibilityHow to Write UsefullyBeing a NoobHatersThe Two Kinds of ModerateFashionable ProblemsHaving KidsThe Lesson to UnlearnNovelty and HeresyThe Bus Ticket Theory of GeniusGeneral and SurprisingCharisma / PowerThe Risk of DiscoveryHow to Make Pittsburgh a Startup HubLife is ShortEconomic InequalityThe RefragmentationJessica LivingstonA Way to Detect BiasWrite Like You TalkDefault Alive or Default Dead?Why It's Safe for Founders to Be NiceChange Your NameWhat Microsoft Is this the Altair Basic of?The Ronco PrincipleWhat Doesn't Seem Like Work?Don't Talk to Corp DevLet the Other 95% of Great Programmers InHow to Be an Expert in a Changing WorldHow You KnowThe Fatal PinchMean People FailBefore the StartupHow to Raise MoneyInvestor Herd DynamicsHow to Convince InvestorsDo Things that Don't ScaleStartup Investing TrendsHow to Get Startup IdeasThe Hardware RenaissanceStartup = GrowthBlack Swan FarmingThe Top of My Todo ListWriting and SpeakingHow Y Combinator StartedDefining PropertyFrighteningly Ambitious Startup IdeasA Word to the ResourcefulSchlep BlindnessSnapshot: Viaweb, June 1998Why Startup Hubs WorkThe Patent PledgeSubject: AirbnbFounder ControlTabletsWhat We Look for in FoundersThe New Funding LandscapeWhere to See Silicon ValleyHigh Resolution Fundraising What Happened to Yahoo The Future of Startup Funding The Acceleration of AddictivenessThe Top Idea in Your Mind How to Lose Time and Money Organic Startup IdeasApple's MistakeWhat Startups Are Really LikePersuade xor Discover Post-Medium PublishingThe List of N ThingsThe Anatomy of Determination What Kate Saw in Silicon Valley  The Trouble with the SegwayRamen ProfitableMaker's Schedule, Manager's Schedule A Local Revolution?Why Twitter is a Big DealThe Founder VisaFive FoundersRelentlessly ResourcefulHow to Be an Angel InvestorWhy TV LostCan You Buy a Silicon Valley?",
        "start_char_idx": 0,
        "end_char_idx": 2610,
        "text_template": "{metadata_str}\n\n{content}",
        "metadata_template": "{key}: {value}",
        "metadata_seperator": "\n",
        "class_name": "TextNode"
      },
      "__type__": "1"
    },
    "002ce96f-ffcc-40e0-b2a4-f625b68f55be": {
      "__data__": {
        "id_": "002ce96f-ffcc-40e0-b2a4-f625b68f55be",
        "embedding": null,
        "metadata": {
          "source": "https://paulgraham.com/articles.html",
          "title": "Essays",
          "language": null
        },
        "excluded_embed_metadata_keys": [],
        "excluded_llm_metadata_keys": [],
        "relationships": {
          "1": {
            "node_id": "4941c0c4-d920-47a7-ad59-7d6f709b5301",
            "node_type": "4",
            "metadata": {
              "source": "https://paulgraham.com/articles.html",
              "title": "Essays",
              "language": null
            },
            "hash": "65d7f8e625efe0c4dbd9db7a008fec2ff47f0d7792506b57ae48f9ed89f1daa7",
            "class_name": "RelatedNodeInfo"
          },
          "2": {
            "node_id": "1f643ec2-f04d-4887-8c88-2692c764d682",
            "node_type": "1",
            "metadata": {
              "source": "https://paulgraham.com/articles.html",
              "title": "Essays",
              "language": null
            },
            "hash": "6b89a1b468896578f3d7edea8e3c8032d83338ea450813170ebe9e412d58b543",
            "class_name": "RelatedNodeInfo"
          },
          "3": {
            "node_id": "0998911d-fdb6-48e4-b118-7c2d4efbeaf8",
            "node_type": "1",
            "metadata": {},
            "hash": "4802df16c8e87b0e4986d5dde1155ee330e8400e67725b9d3ce8c54e32df650b",
            "class_name": "RelatedNodeInfo"
          }
        },
        "text": "Maybe.What I've Learned from Hacker NewsStartups in 13 SentencesKeep Your Identity Small  After CredentialsCould VC be a Casualty of the Recession?The High-Res SocietyThe Other Half of \"Artists Ship\"  Why to Start a Startup in a Bad EconomyA Fundraising Survival GuideThe Pooled-Risk Company Management CompanyCities and AmbitionDisconnecting DistractionLies We Tell KidsBe GoodWhy There Aren't More GooglesSome HeroesHow to DisagreeYou Weren't Meant to Have a BossA New Venture AnimalTrollsSix Principles for Making New ThingsWhy to Move to a Startup HubThe Future of Web StartupsHow to Do PhilosophyNews from the FrontHow Not to DieHolding a Program in One's HeadStuffThe Equity EquationAn Alternative Theory of UnionsThe Hacker's Guide to InvestorsTwo Kinds of JudgementMicrosoft is DeadWhy to Not Not Start a StartupIs It Worth Being Wise?Learning from FoundersHow Art Can Be GoodThe 18 Mistakes That Kill StartupsA Student's Guide to StartupsHow to Present to InvestorsCopy What You LikeThe Island TestThe Power of the MarginalWhy Startups Condense in AmericaHow to Be Silicon ValleyThe Hardest Lessons for Startups to LearnSee RandomnessAre Software Patents Evil?6,631,372Why YCHow to Do What You LoveGood and Bad ProcrastinationWeb 2.0How to Fund a StartupThe Venture Capital SqueezeIdeas for StartupsWhat I Did this SummerInequality and RiskAfter the LadderWhat Business Can Learn from Open SourceHiring is ObsoleteThe SubmarineWhy Smart People Have Bad IdeasReturn of the MacWriting,  BrieflyUndergraduationA Unified Theory of VC SuckageHow to Start a StartupWhat You'll Wish You'd KnownMade in USAIt's Charisma, StupidBradley's GhostA Version 1.0What the Bubble Got RightThe Age of the EssayThe Python ParadoxGreat HackersMind the GapHow to Make WealthThe Word \"Hacker\"What You Can't SayFilters that Fight BackHackers and PaintersIf Lisp is So GreatThe Hundred-Year LanguageWhy Nerds are UnpopularBetter Bayesian FilteringDesign and ResearchA Plan for SpamRevenge of the NerdsSuccinctness is PowerWhat Languages FixTaste for MakersWhy Arc Isn't Especially Object-OrientedWhat Made Lisp DifferentThe Other Road AheadThe Roots of LispFive Questions about Language DesignBeing PopularJava's CoverBeating the AveragesLisp for Web-Based ApplicationsChapter 1 of Ansi Common LispChapter 2 of Ansi Common LispProgramming Bottom-UpThis Year We Can End the Death Penalty in California\nRSS feed",
        "start_char_idx": 2612,
        "end_char_idx": 5006,
        "text_template": "{metadata_str}\n\n{content}",
        "metadata_template": "{key}: {value}",
        "metadata_seperator": "\n",
        "class_name": "TextNode"
      },
      "__type__": "1"
    },
    "0998911d-fdb6-48e4-b118-7c2d4efbeaf8": {
      "__data__": {
        "id_": "0998911d-fdb6-48e4-b118-7c2d4efbeaf8",
        "embedding": null,
        "metadata": {
          "source": "https://paulgraham.com/lisp.html",
          "title": "Lisp",
          "language": null
        },
        "excluded_embed_metadata_keys": [],
        "excluded_llm_metadata_keys": [],
        "relationships": {
          "1": {
            "node_id": "8b81e5a0-c866-4fa8-8c9d-92b540ca6fa2",
            "node_type": "4",
            "metadata": {
              "source": "https://paulgraham.com/lisp.html",
              "title": "Lisp",
              "language": null
            },
            "hash": "e63b5c54571f5e7777a25741faaa68791ebbd4172aee73cb08cd85c8a347dac8",
            "class_name": "RelatedNodeInfo"
          },
          "2": {
            "node_id": "002ce96f-ffcc-40e0-b2a4-f625b68f55be",
            "node_type": "1",
            "metadata": {
              "source": "https://paulgraham.com/articles.html",
              "title": "Essays",
              "language": null
            },
            "hash": "ea8ca63c39fb1a3474ba0dd433f974dc842e5e0445b542414e71ce664f6b87e7",
            "class_name": "RelatedNodeInfo"
          },
          "3": {
            "node_id": "112ac152-9c9d-406f-ba78-6afe67303cf7",
            "node_type": "1",
            "metadata": {},
            "hash": "129e01463488d5fc145226382f1cd6e9288d7437a1a99dedb079b922dfda50a7",
            "class_name": "RelatedNodeInfo"
          }
        },
        "text": "Lisp\n\nThe Roots of LispWhat Made Lisp DifferentA Lisp StartupArc: A New LispLisp CodeLisp LinksLisp HistoryLisp QuotesLisp FAQ",
        "start_char_idx": 0,
        "end_char_idx": 126,
        "text_template": "{metadata_str}\n\n{content}",
        "metadata_template": "{key}: {value}",
        "metadata_seperator": "\n",
        "class_name": "TextNode"
      },
      "__type__": "1"
    },
    "112ac152-9c9d-406f-ba78-6afe67303cf7": {
      "__data__": {
        "id_": "112ac152-9c9d-406f-ba78-6afe67303cf7",
        "embedding": null,
        "metadata": {
          "source": "https://paulgraham.com/kedrosky.html",
          "title": "Responses",
          "language": null
        },
        "excluded_embed_metadata_keys": [],
        "excluded_llm_metadata_keys": [],
        "relationships": {
          "1": {
            "node_id": "7412287d-bc29-44c8-867c-2e7a678a60f2",
            "node_type": "4",
            "metadata": {
              "source": "https://paulgraham.com/kedrosky.html",
              "title": "Responses",
              "language": null
            },
            "hash": "1f7cc2d040398b2dbb39bfbfbec2246f1baf49ebd660c50020418118c83122c5",
            "class_name": "RelatedNodeInfo"
          },
          "2": {
            "node_id": "0998911d-fdb6-48e4-b118-7c2d4efbeaf8",
            "node_type": "1",
            "metadata": {
              "source": "https://paulgraham.com/lisp.html",
              "title": "Lisp",
              "language": null
            },
            "hash": "81562c0c5550422709fbb250c29fcc9a1ddb0ed8ae20676be3af96ba90d64240",
            "class_name": "RelatedNodeInfo"
          },
          "3": {
            "node_id": "9b7ef78c-f08b-4f56-86a1-3ddda86b0645",
            "node_type": "1",
            "metadata": {},
            "hash": "645608fab6a3da68e7b61c676d415eee4a6c1e831c3fef0313d0bc029488f611",
            "class_name": "RelatedNodeInfo"
          }
        },
        "text": "Responses\n\n\"The amount of energy necessary to refute bullshit is an order of magnitude bigger than to produce it.\"\u0096 Paul KedroskyFounders' AccentsWhat I Didn't SayFemale Founders\"I can be tricked by anyone who looks like Mark Zuckerberg.\"",
        "start_char_idx": 0,
        "end_char_idx": 238,
        "text_template": "{metadata_str}\n\n{content}",
        "metadata_template": "{key}: {value}",
        "metadata_seperator": "\n",
        "class_name": "TextNode"
      },
      "__type__": "1"
    },
    "9b7ef78c-f08b-4f56-86a1-3ddda86b0645": {
      "__data__": {
        "id_": "9b7ef78c-f08b-4f56-86a1-3ddda86b0645",
        "embedding": null,
        "metadata": {
          "source": "https://paulgraham.com/bel.html",
          "title": "Bel",
          "language": null
        },
        "excluded_embed_metadata_keys": [],
        "excluded_llm_metadata_keys": [],
        "relationships": {
          "1": {
            "node_id": "4e32d862-8a4e-463e-9bb7-724f60bc1dad",
            "node_type": "4",
            "metadata": {
              "source": "https://paulgraham.com/bel.html",
              "title": "Bel",
              "language": null
            },
            "hash": "ab453655798bf20a6f7013998cee6e7e0e5284a01fb0cfd4a45b6dd3b8fed085",
            "class_name": "RelatedNodeInfo"
          },
          "2": {
            "node_id": "112ac152-9c9d-406f-ba78-6afe67303cf7",
            "node_type": "1",
            "metadata": {
              "source": "https://paulgraham.com/kedrosky.html",
              "title": "Responses",
              "language": null
            },
            "hash": "268bb7757369283ecfe61ea15f7e16cbe4dd629aeb0c73f9c7c9bfb9d64bf98c",
            "class_name": "RelatedNodeInfo"
          },
          "3": {
            "node_id": "2d743ff6-ebde-47af-9298-0a9d9b64098c",
            "node_type": "1",
            "metadata": {},
            "hash": "7657cc1e7f1582263222af817b75540d023daef78bd79c91362949fbefc296e0",
            "class_name": "RelatedNodeInfo"
          }
        },
        "text": "Bel\n\nOct 2019Bel is a spec for a new dialect of Lisp, written in itself. This should sound familiar to people who know about Lisp's origins, because it's the way Lisp began.It consists of two text files meant to be read in parallel: a guide to the Bel language, and the Bel source.For those who just want to see some code examples, there's a file of those. But of course the Bel source is also a code example, since it's written in itself.Considering the rate at which I was discovering bugs before publishing Bel, there are bound to be more remaining. So this first version is version C, after Cunningham's Law.",
        "start_char_idx": 0,
        "end_char_idx": 612,
        "text_template": "{metadata_str}\n\n{content}",
        "metadata_template": "{key}: {value}",
        "metadata_seperator": "\n",
        "class_name": "TextNode"
      },
      "__type__": "1"
    },
    "2d743ff6-ebde-47af-9298-0a9d9b64098c": {
      "__data__": {
        "id_": "2d743ff6-ebde-47af-9298-0a9d9b64098c",
        "embedding": null,
        "metadata": {
          "source": "https://paulgraham.com/rss.html",
          "title": "RSS",
          "language": null
        },
        "excluded_embed_metadata_keys": [],
        "excluded_llm_metadata_keys": [],
        "relationships": {
          "1": {
            "node_id": "d5b40f05-89e7-469e-8c8e-33b89df900e0",
            "node_type": "4",
            "metadata": {
              "source": "https://paulgraham.com/rss.html",
              "title": "RSS",
              "language": null
            },
            "hash": "1f5145eb750677ffd31c9e4abfe7bf814f86925df78a5804c5b3d03a9f493013",
            "class_name": "RelatedNodeInfo"
          },
          "2": {
            "node_id": "9b7ef78c-f08b-4f56-86a1-3ddda86b0645",
            "node_type": "1",
            "metadata": {
              "source": "https://paulgraham.com/bel.html",
              "title": "Bel",
              "language": null
            },
            "hash": "9ad9e5f778e636922a4e0b81c877968bea2ba0f1e5752ccdf5581b6b8ec36166",
            "class_name": "RelatedNodeInfo"
          },
          "3": {
            "node_id": "61b49f61-2e40-4792-b5d4-f5bf95489e13",
            "node_type": "1",
            "metadata": {},
            "hash": "e209b86c2a56ac5fed189d63bf10733931e9453f0c2a30ffea9ccfb45da38a9b",
            "class_name": "RelatedNodeInfo"
          }
        },
        "text": "RSS\n\nAaron Swartz created a scraped\nfeed\nof the essays page.",
        "start_char_idx": 0,
        "end_char_idx": 60,
        "text_template": "{metadata_str}\n\n{content}",
        "metadata_template": "{key}: {value}",
        "metadata_seperator": "\n",
        "class_name": "TextNode"
      },
      "__type__": "1"
    },
    "61b49f61-2e40-4792-b5d4-f5bf95489e13": {
      "__data__": {
        "id_": "61b49f61-2e40-4792-b5d4-f5bf95489e13",
        "embedding": null,
        "metadata": {
          "source": "https://paulgraham.com/antispam.html",
          "title": "Spam",
          "language": null
        },
        "excluded_embed_metadata_keys": [],
        "excluded_llm_metadata_keys": [],
        "relationships": {
          "1": {
            "node_id": "21d69f33-12c7-48c8-943e-ec7c63538fdb",
            "node_type": "4",
            "metadata": {
              "source": "https://paulgraham.com/antispam.html",
              "title": "Spam",
              "language": null
            },
            "hash": "5a612d526dbb532422f5f9fddd0227f3ed5b219b021bb3fcfd13c4c34846820c",
            "class_name": "RelatedNodeInfo"
          },
          "2": {
            "node_id": "2d743ff6-ebde-47af-9298-0a9d9b64098c",
            "node_type": "1",
            "metadata": {
              "source": "https://paulgraham.com/rss.html",
              "title": "RSS",
              "language": null
            },
            "hash": "85aa8e757ef881f0e2ad87ab963bd3a8766b376b7caf6113521ae19e25971cc6",
            "class_name": "RelatedNodeInfo"
          },
          "3": {
            "node_id": "610061e5-08f3-4ab2-918f-5d71970208ad",
            "node_type": "1",
            "metadata": {},
            "hash": "fb01e6cd41a3cb0c09dafe39dd3f376b27cb6f1e7eee9a84e4e0fcd97873cc0e",
            "class_name": "RelatedNodeInfo"
          }
        },
        "text": "Spam\n\nA Plan for SpamPlan for Spam FAQBetter Bayesian FilteringSo Far, So GoodFilters that Fight BackWill Filters Kill Spam?Stopping SpamSpam is DifferentFilters vs. BlacklistsThe Destiny of BlacklistsGetting Past FiltersSpam ConferenceFiltering ResearchSpam ResourcesSpam ArchivesSpam Links",
        "start_char_idx": 0,
        "end_char_idx": 291,
        "text_template": "{metadata_str}\n\n{content}",
        "metadata_template": "{key}: {value}",
        "metadata_seperator": "\n",
        "class_name": "TextNode"
      },
      "__type__": "1"
    },
    "610061e5-08f3-4ab2-918f-5d71970208ad": {
      "__data__": {
        "id_": "610061e5-08f3-4ab2-918f-5d71970208ad",
        "embedding": null,
        "metadata": {
          "source": "https://paulgraham.com/quo.html",
          "title": "Quotes",
          "language": null
        },
        "excluded_embed_metadata_keys": [],
        "excluded_llm_metadata_keys": [],
        "relationships": {
          "1": {
            "node_id": "e1dd58a1-1655-4846-bd2c-dbe87e3b1d8d",
            "node_type": "4",
            "metadata": {
              "source": "https://paulgraham.com/quo.html",
              "title": "Quotes",
              "language": null
            },
            "hash": "69edc8c0cea0517adc25e62d3ac05bc4c3165d29e568e3308f1bb5f9f55b817c",
            "class_name": "RelatedNodeInfo"
          },
          "2": {
            "node_id": "61b49f61-2e40-4792-b5d4-f5bf95489e13",
            "node_type": "1",
            "metadata": {
              "source": "https://paulgraham.com/antispam.html",
              "title": "Spam",
              "language": null
            },
            "hash": "dd5dd3a345dfe22707d5e154891ad1554ff352d707e08741790476536a22e038",
            "class_name": "RelatedNodeInfo"
          },
          "3": {
            "node_id": "1df7b78e-d883-4148-b5c8-3b6e071cb4cf",
            "node_type": "1",
            "metadata": {},
            "hash": "8a7c5b53cbbb66f117c4e7ae50d52faf642d17f47545fd7953574ae40de961ce",
            "class_name": "RelatedNodeInfo"
          }
        },
        "text": "Quotes\n\n\"The less confident you are, the more serious you have to act.\"\u0096 Tara Ploughman\"The condition of man is already close to satiety and arrogance, and there is danger of destruction of everything in existence.\"\u0096 a Brahmin to Onesicritus, 327 BC, reported in Strabo's Geography\"Change breaks the brittle.\"\u0096 Jan HoutemaThe sons of Hermes love to play,\nAnd only do their best when they\nAre told they oughtn't;\nApollo's children never shrink\nFrom boring jobs but have to think\nTheir work important.\u0096 W. H. Auden, Under Which Lyre\"Programs must be written for people to read, and only incidentally for \nmachines to execute.\"\u0096 Abelson & Sussman, SICP, preface to the first edition\"That language is an instrument of human reason, and not merely a medium\nfor the expression of thought, is a truth generally admitted.\"\u0096 George Boole, quoted in Iverson's Turing Award Lecture\"Short words are best and the old words when short are best of all.\"\u0096 Winston Churchill\"Many big people were chasing me. I didn't know what to do. So I thought I would surprise them and throw it.\"\u0096 Garo Yepremian, Miami placekicker, after a disastrous attempt to throw a pass in the Super Bowl.\"That book is good in vain which the reader throws away. He only is the master who keeps the mind in pleasing captivity; whose pages are perused with eagerness, and in hope of new pleasure are perused again; and whose conclusion is perceived with an eye of sorrow, such as the traveller casts upon departing day.\"\u0096 Johnson, Lives of the Poets: Dryden\"Don't worry about what anybody else is going to do. The best way to predict\nthe future is to invent it.\"\u0096 Alan Kay\"But the audience is right. They're always, always right. You hear directors complain that the advertising was lousy, the distribution is no good, the date was wrong to open the film. I don't believe that. The audience is never wrong. Never.\"\u0096 William Friedkin, in a NYT interview\"Dealing with failure is easy: Work hard to improve. \nSuccess is also easy to handle: \nYou've solved the wrong problem. Work hard to improve.\"\u0096 Alan Perlis\"Frankly, I don't think you could have driven a needle up my sphincter using a sledgehammer.\"\u0096 Col. Barry Horne, F-117 pilot, on first mission over Baghdad\"Two centuries later a most clear-sighted historian of the Second Crusade can find space in a short narrative to record on many occasions the flattery, perjury, perfidy, blasphemy, heresy, arrogance, servility, deceit, pride, cunning and infidelity of the Greeks.\"\u0096 R. W. Southern, The Making of the Middle Ages\"The imagination of nature is far, far greater than the imagination of man.\"\u0096 Richard Feynman\"The greatest dangers to liberty lurk in insidious encroachment by men of zeal, well-meaning but without understanding.\"\u0096 Brandeis\"People who read Cosmopolitan magazine are very \ndifferent from those who do not.\"\u0096 Donald Berry, Statistics: A Bayesian Perspective\"The art of handling university students is to make oneself appear, and this almost ostentatiously, to be treating them as adults....\"\u0096 Arnold Toynbee, Experiences\"Americans spend an average of four hours a day watching TV, an hour of that enduring ads. That adds up to an astounding 10% of total leisure time; at current rates, a typical viewer fritters away three years of his life getting bombarded with commercials.\"\u0096 Scott Woolley, Forbes\"The best writing is rewriting.\"\u0096 E. B. White\"Modern invention has been a great leveller. A machine may operate far more quickly than a political or economic measure to abolish privilege and wipe out the distinctions of class or finance.\"\u0096 Ivor Brown, The Heart of England\"If our goal is to write poetry, the only way we are likely to \nbe any good is to try to be as great as the best.\"\u0096 Donald Hall, Poetry and Ambition\"I am annoyed to find myself continually described by people whom I have never set eyes on as bad-tempered.\"\u0096 Evelyn Waugh, Diary (26 Dec 47)\"Premature optimization is the root of all evil (or at least\nmost of it) in programming.",
        "start_char_idx": 0,
        "end_char_idx": 3977,
        "text_template": "{metadata_str}\n\n{content}",
        "metadata_template": "{key}: {value}",
        "metadata_seperator": "\n",
        "class_name": "TextNode"
      },
      "__type__": "1"
    },
    "1df7b78e-d883-4148-b5c8-3b6e071cb4cf": {
      "__data__": {
        "id_": "1df7b78e-d883-4148-b5c8-3b6e071cb4cf",
        "embedding": null,
        "metadata": {
          "source": "https://paulgraham.com/quo.html",
          "title": "Quotes",
          "language": null
        },
        "excluded_embed_metadata_keys": [],
        "excluded_llm_metadata_keys": [],
        "relationships": {
          "1": {
            "node_id": "e1dd58a1-1655-4846-bd2c-dbe87e3b1d8d",
            "node_type": "4",
            "metadata": {
              "source": "https://paulgraham.com/quo.html",
              "title": "Quotes",
              "language": null
            },
            "hash": "69edc8c0cea0517adc25e62d3ac05bc4c3165d29e568e3308f1bb5f9f55b817c",
            "class_name": "RelatedNodeInfo"
          },
          "2": {
            "node_id": "610061e5-08f3-4ab2-918f-5d71970208ad",
            "node_type": "1",
            "metadata": {
              "source": "https://paulgraham.com/quo.html",
              "title": "Quotes",
              "language": null
            },
            "hash": "9f34227944884c5936ee0a093ef4ce88fc2eb663c6cfaa8b81becb8eedd57b5d",
            "class_name": "RelatedNodeInfo"
          },
          "3": {
            "node_id": "09248f01-b0cf-4114-9602-367d37bcf60f",
            "node_type": "1",
            "metadata": {},
            "hash": "1eb7260b8fbbfee318e6eb4fa356fc8f22b78f25f7aafc0b20f8b34e457d9ea0",
            "class_name": "RelatedNodeInfo"
          }
        },
        "text": "\"\u0096 Scott Woolley, Forbes\"The best writing is rewriting.\"\u0096 E. B. White\"Modern invention has been a great leveller. A machine may operate far more quickly than a political or economic measure to abolish privilege and wipe out the distinctions of class or finance.\"\u0096 Ivor Brown, The Heart of England\"If our goal is to write poetry, the only way we are likely to \nbe any good is to try to be as great as the best.\"\u0096 Donald Hall, Poetry and Ambition\"I am annoyed to find myself continually described by people whom I have never set eyes on as bad-tempered.\"\u0096 Evelyn Waugh, Diary (26 Dec 47)\"Premature optimization is the root of all evil (or at least\nmost of it) in programming.\"\u0096 Donald Knuth\"In France those absurd perversions of the art of war which covered themselves under the name of chivalry were more omnipotent than in any other country of Europe. The strength of the armies of Philip and John of Valois was composed of a fiery and undisciplined aristocracy which imagined itself to be the most efficient military force in the world, but which was in reality little removed from an armed mob.\"\u0096 C. W. C. Oman, The Art of War in the Middle Ages\"The public should always be wondering how it is possible to give so much for the money.\"\u0096 Henry Ford\"None ever wished it longer than it is.\"\u0096 Johnson on Paradise Lost\"Many large and high class greengrocers of my acquaintance have never heard of the Golden Wonder potato.\"\u0096 Roy Genders, Vegetables for the EpicureThe best lack all conviction, while the worst\nAre full of passionate intensity.\u0096 Yeats, The Second Coming\"We act as though comfort and luxury were the chief requirements of life, when all that we need to make us happy is something to be enthusiastic about.\"\u0096 Charles Kingsley\"The path from good to evil goes through bogus.\"\u0096 Tara Ploughman\"Lisp has jokingly been called \"the most intelligent way to misuse a computer\". I think that description is a great compliment because it transmits the full flavor of liberation: it has assisted a number of our most gifted fellow humans in thinking previously impossible thoughts.\"\u0096 Edsger Dijkstra, CACM, 15:10\"Many who burnt heretics in the ordinary way of their business were otherwise excellent people.\"\u0096 G. M. Trevelyan, \"Bias in History\"\"He became an object of ridicule in 1993 when a paper published an intercepted phone call in which he told his lover Camilla Parker Bowles he wanted to be reincarnated as her tampon.\"\u0096 Reuters story, on Prince Charles\"We're even wrong about which mistakes we're making.\"\u0096 Carl Winfeld\"From this place she sent into the world those novels, which by many have been placed on the same shelf as the works of a D'Arblay and an Edgeworth.\"\u0096 Henry Austen on his sister Jane, in a preface to Persuasion\"The key to performance is elegance, not battalions of special cases.\"\u0096 Jon Bentley and Doug McIlroy\"The economic depression that struck Europe in the fourteenth century was followed ultimately by economic and technological recovery. But the depression we have moved into will have no end. We can anticipate centuries of decline and exhaustion.\"\u0096 Jean Gimpel, The Medieval Machine, 1975\"Politics is not the art of the possible. It consists in choosing between the disastrous and the unpalatable.\"\u0096 J. K. Galbraith, Letter to Kennedy, 1962\"A typical dinner from the ape menu would be tofu bake with ratatouille of aubergine, onions and sweet peppers, with pearled barley and vegetable side dishes, says the team.\"\u0096 New Scientist\"Guy Steele leads a small team of researchers in Burlington, Massachusetts, \nwho are taking on an enormous challenge \u0097 create a programming language \nbetter than Java.\"\u0096 Sun.Com (my italics)\"I had my own reactions to Paul's essay \u0097 on the whole I liked it but when I \nconnected some dots I found some suggestions of things I strongly disliked \u0097\nnot so much in the essay as suggested by it.\"\u0096 reaction to What You Can't Say in a blog\"Your twenties are always an apprenticeship, but you don't always know\nwhat for.\"\u0096 Jan Houtema\"In addition, the board rewrote the definition of science, \nso that it is no longer limited to the search for natural \nexplanations of phenomena.",
        "start_char_idx": 3304,
        "end_char_idx": 7438,
        "text_template": "{metadata_str}\n\n{content}",
        "metadata_template": "{key}: {value}",
        "metadata_seperator": "\n",
        "class_name": "TextNode"
      },
      "__type__": "1"
    },
    "09248f01-b0cf-4114-9602-367d37bcf60f": {
      "__data__": {
        "id_": "09248f01-b0cf-4114-9602-367d37bcf60f",
        "embedding": null,
        "metadata": {
          "source": "https://paulgraham.com/quo.html",
          "title": "Quotes",
          "language": null
        },
        "excluded_embed_metadata_keys": [],
        "excluded_llm_metadata_keys": [],
        "relationships": {
          "1": {
            "node_id": "e1dd58a1-1655-4846-bd2c-dbe87e3b1d8d",
            "node_type": "4",
            "metadata": {
              "source": "https://paulgraham.com/quo.html",
              "title": "Quotes",
              "language": null
            },
            "hash": "69edc8c0cea0517adc25e62d3ac05bc4c3165d29e568e3308f1bb5f9f55b817c",
            "class_name": "RelatedNodeInfo"
          },
          "2": {
            "node_id": "1df7b78e-d883-4148-b5c8-3b6e071cb4cf",
            "node_type": "1",
            "metadata": {
              "source": "https://paulgraham.com/quo.html",
              "title": "Quotes",
              "language": null
            },
            "hash": "c1b04def916cac9d06ba552dfdf4d739ada53d9c20954aeaaf6179ec2c056d4d",
            "class_name": "RelatedNodeInfo"
          },
          "3": {
            "node_id": "ad2b5cb1-e2af-4d68-891a-e297dd0b0dbb",
            "node_type": "1",
            "metadata": {},
            "hash": "6e6c5df4265ff36b5b57a67634a2823c40ae137f6a3207902538e1a21a49661c",
            "class_name": "RelatedNodeInfo"
          }
        },
        "text": "\"\u0096 New Scientist\"Guy Steele leads a small team of researchers in Burlington, Massachusetts, \nwho are taking on an enormous challenge \u0097 create a programming language \nbetter than Java.\"\u0096 Sun.Com (my italics)\"I had my own reactions to Paul's essay \u0097 on the whole I liked it but when I \nconnected some dots I found some suggestions of things I strongly disliked \u0097\nnot so much in the essay as suggested by it.\"\u0096 reaction to What You Can't Say in a blog\"Your twenties are always an apprenticeship, but you don't always know\nwhat for.\"\u0096 Jan Houtema\"In addition, the board rewrote the definition of science, \nso that it is no longer limited to the search for natural \nexplanations of phenomena.\"\u0096 AP story on Kansas Board of Education\"A danger sign that fellow-obsessionals will at once recognize\nis the tendency to regard the happiest moments of your life as\nthose that occur when someone who has an appointment to see you\nis prevented from coming.\"\u0096 Peter Medawar, Memoirs of a Thinking Radish\"Never offer what you'd hate someone for accepting.\"\u0096 Tara Ploughman\"The pagans were incensed at the rashness of a recent and obscure sect,\nwhich presumed to accuse their countrymen of error, and to devote their\nancestors to eternal misery.\"\u0096 Gibbon, The Decline and Fall of the Roman Empire\n\"Simultaneously reifying and challenging hegemonic codes of race, class,\ngender and regional or national identity, his characters explore the \ncomplex and changing postmodern cultural landscape.\"\u0096 Robert Bennett, English professor at Montana State, announcing a panel\ndiscussion about Brad Pitt\"In the councils of government, we must guard against the acquisition of unwarranted influence, whether sought or unsought, by the military-industrial complex. The potential for the disastrous rise of misplaced power exists and will persist.\"\u0096 Eisenhower, Farewell Address\"Keep away from people who try to belittle your ambitions. Small people always do that, but the really great make you feel that you, too, can become great.\"\u0096 Mark Twain\"However little television you watch, watch less.\"\u0096 David McCullough\"Any word you have to hunt for in a thesaurus is the wrong word.\"\u0096 Stephen King\"The people can always be brought to the bidding of the leaders. That is easy. All you have to do is tell them they are being attacked, and denounce the pacifists for lack of patriotism, and exposing the country to greater danger.\"\u0096 Goering at the Nuremberg Trials\"As all these results were obtained, not by any heroic method, but by\npatient and detailed reasoning, I began to think it probable that\nphilosophy had erred in adopting heroic remedies for intellectual\ndifficulties, and that solutions were to be found merely by greater\ncare and accuracy. This view I have come to hold more and more strongly\nas time went on, and it has led me to doubt whether philosophy, as a\nstudy distinct from science and possessed of a method of its own, is\nanything more than an unfortunate legacy from theology.\"\u0096 Bertrand Russell, \"Logical Atomism\"\"Get the important things right.\"\u0096 N. P. Calderwood\"The power of instruction is seldom of much efficacy except in those happy dispositions where it is almost superfluous.\"\u0096 Gibbon\"I do not know what the Lord's anointed, his Vicegerent upon earth,\ndivinely appointed by him, and accountable to none but him for his\nactions, will either think or do, upon these symptoms of reason and good sense\nwhich seem to be breaking out all over France: but this I foresee,\nthat, before the end of this century, the trade of both King and\nPriest will not be half so good a one as it has been.\"\u0096 Chesterfield, letter to his son, 13 Apr 1752\"filter(P, S) is almost always written clearer as [x for x in S if P(x)]\"\u0096 Guido van Rossum on Python\"I'm surrounded by postmodern idiots and blatherers. Your writings give me hope.\"\u0096 email from a reader\"In the last analysis, productivity of labour is the most important, the principal thing for the victory of the new social system.\"\u0096 Lenin, quoted in First Five-Year Plan for the Development of the National Economy of the People's Republic of China in 1953-1957\"Most interesting phenomena have multiple causes.",
        "start_char_idx": 6751,
        "end_char_idx": 10887,
        "text_template": "{metadata_str}\n\n{content}",
        "metadata_template": "{key}: {value}",
        "metadata_seperator": "\n",
        "class_name": "TextNode"
      },
      "__type__": "1"
    },
    "ad2b5cb1-e2af-4d68-891a-e297dd0b0dbb": {
      "__data__": {
        "id_": "ad2b5cb1-e2af-4d68-891a-e297dd0b0dbb",
        "embedding": null,
        "metadata": {
          "source": "https://paulgraham.com/quo.html",
          "title": "Quotes",
          "language": null
        },
        "excluded_embed_metadata_keys": [],
        "excluded_llm_metadata_keys": [],
        "relationships": {
          "1": {
            "node_id": "e1dd58a1-1655-4846-bd2c-dbe87e3b1d8d",
            "node_type": "4",
            "metadata": {
              "source": "https://paulgraham.com/quo.html",
              "title": "Quotes",
              "language": null
            },
            "hash": "69edc8c0cea0517adc25e62d3ac05bc4c3165d29e568e3308f1bb5f9f55b817c",
            "class_name": "RelatedNodeInfo"
          },
          "2": {
            "node_id": "09248f01-b0cf-4114-9602-367d37bcf60f",
            "node_type": "1",
            "metadata": {
              "source": "https://paulgraham.com/quo.html",
              "title": "Quotes",
              "language": null
            },
            "hash": "9a06ad35584811b3c4d5ad47fbd6255cc260f59c68876d0f33696117f9fafc70",
            "class_name": "RelatedNodeInfo"
          },
          "3": {
            "node_id": "df53392e-b34f-46c7-b11c-68340917877e",
            "node_type": "1",
            "metadata": {},
            "hash": "5fe013753a91f5f349fe810487cbadd816e84cab23c43056f21d1f15915ac937",
            "class_name": "RelatedNodeInfo"
          }
        },
        "text": "\"\u0096 Chesterfield, letter to his son, 13 Apr 1752\"filter(P, S) is almost always written clearer as [x for x in S if P(x)]\"\u0096 Guido van Rossum on Python\"I'm surrounded by postmodern idiots and blatherers. Your writings give me hope.\"\u0096 email from a reader\"In the last analysis, productivity of labour is the most important, the principal thing for the victory of the new social system.\"\u0096 Lenin, quoted in First Five-Year Plan for the Development of the National Economy of the People's Republic of China in 1953-1957\"Most interesting phenomena have multiple causes.\"\u0096 N. P. Calderwood\"From 1911 to 1920, the mood of the city varied between\nutter dullness and tremendous excitement.\"\u0096 Arthur Coffman, An Illustrated History of Palo Alto\"A new scientific truth does not triumph by convincing its opponents and making them see the light, but rather because its opponents eventually die, and a new generation grows up that is familiar with it.\"\u0096 Max Planck\"No man who ever held the office of President would congratulate a friend on obtaining it.\"\u0096 John Adams\"PowerPoint makes us stupid.\"\u0096 General James N. Mattis, USMC\"The best way to do something 'lean' is to gather a tight group of people, give them very little money, and very little time.\"\u0096 Bob Klein, chief engineer of the F-14 program\"But camels, though odious to view and endowed with the offensive spirit, did not enjoy the blessing of pachydermaty.\"\u0096 F. E. Adcock, The Greek and Macedonian Art of War\"As it turned out, the obvious clearly stated, and combined with new observations, was sometimes close to revolutionary.\"\u0096 Wallace Stegner on John Wesley Powell \"Focusing is about saying no.\"\u0096 Steve Jobs\"The very word \"secrecy\" is repugnant in a free and open society; and we are as a people inherently and historically opposed to secret societies, to secret oaths and to secret proceedings. We decided long ago that the dangers of excessive and unwarranted concealment of pertinent facts far outweighed the dangers which are cited to justify it. Even today, there is little value in opposing the threat of a closed society by imitating its arbitrary restrictions. Even today, there is little value in insuring the survival of our nation if our traditions do not survive with it.\"\u0096 John F. Kennedy\"In the Zenith Color chassis there are no printed circuits, no \nproduction shortcuts.  Every connection is carefully hand-wired\nwith the same exacting care that makes Zenith America's largest\nselling TV, and your best Color TV buy.\"\u0096 Zenith TV ad, 1964\"Semper aut discere, aut docere, aut scribere dulce habui.\"\u0096 Bede\"The qualities that made for success in a fighter-pilot seemed to be just those sturdy qualities that made for success in other professions; observation, initiative, determination, courage, including the courage to run away. In course of time it appeared that men who had a private axe to grind beyond the public axe of the King's enemies were especially successful.\"\u0096 Jim Bailey, The Sky Suspended\"Everything about it was visibly mis-shapen, corrupt, crawling, verminous; for a time I could not bear to look at it, and passed with averted eyes; recovering from this weakness, I forced myself to look, and to face day by day the question: a thing so obviously, so incontrovertibly, so indefensibly bad, why had Scott done it?\"\u0096 R. G. Collingwood on the Albert Memorial\"Anybody who cares less about wanting to be cool, I think, is more interesting.\"\u0096 Aimee Mann\"The late Richard Feynman, a superb physicist, said once as we talked about the\nlaser that the way to tell a great idea is that, when people hear it, they say,\n'Gee, I could have thought of that.'\"\u0096 Charles Townes, How the Laser Happened\"If we chose always to be wise we should rarely need to be virtuous. But inclinations which we could easily overcome irresistibly attract us. We give in to slight temptations and minimize the danger. We fall insensibly into dangerous situations, from which we could easily have safeguarded ourselves, but from which we cannot withdraw without heroic efforts which appal us. So finally, as we tumble into the abyss, we ask God why he has made us so feeble.",
        "start_char_idx": 10327,
        "end_char_idx": 14445,
        "text_template": "{metadata_str}\n\n{content}",
        "metadata_template": "{key}: {value}",
        "metadata_seperator": "\n",
        "class_name": "TextNode"
      },
      "__type__": "1"
    },
    "df53392e-b34f-46c7-b11c-68340917877e": {
      "__data__": {
        "id_": "df53392e-b34f-46c7-b11c-68340917877e",
        "embedding": null,
        "metadata": {
          "source": "https://paulgraham.com/quo.html",
          "title": "Quotes",
          "language": null
        },
        "excluded_embed_metadata_keys": [],
        "excluded_llm_metadata_keys": [],
        "relationships": {
          "1": {
            "node_id": "e1dd58a1-1655-4846-bd2c-dbe87e3b1d8d",
            "node_type": "4",
            "metadata": {
              "source": "https://paulgraham.com/quo.html",
              "title": "Quotes",
              "language": null
            },
            "hash": "69edc8c0cea0517adc25e62d3ac05bc4c3165d29e568e3308f1bb5f9f55b817c",
            "class_name": "RelatedNodeInfo"
          },
          "2": {
            "node_id": "ad2b5cb1-e2af-4d68-891a-e297dd0b0dbb",
            "node_type": "1",
            "metadata": {
              "source": "https://paulgraham.com/quo.html",
              "title": "Quotes",
              "language": null
            },
            "hash": "e85b6573ca14b8a0bd1ecafc59ba5aeec3477cdccbec366013f7f332e8b9a89a",
            "class_name": "RelatedNodeInfo"
          },
          "3": {
            "node_id": "e3cf9e1b-3609-40ac-b4cf-a6bba834ac1a",
            "node_type": "1",
            "metadata": {},
            "hash": "c7bb70a6d690b5245f83fe21334a9b355556c74d7c25d188de9dcb753463c70c",
            "class_name": "RelatedNodeInfo"
          }
        },
        "text": "\"\u0096 Aimee Mann\"The late Richard Feynman, a superb physicist, said once as we talked about the\nlaser that the way to tell a great idea is that, when people hear it, they say,\n'Gee, I could have thought of that.'\"\u0096 Charles Townes, How the Laser Happened\"If we chose always to be wise we should rarely need to be virtuous. But inclinations which we could easily overcome irresistibly attract us. We give in to slight temptations and minimize the danger. We fall insensibly into dangerous situations, from which we could easily have safeguarded ourselves, but from which we cannot withdraw without heroic efforts which appal us. So finally, as we tumble into the abyss, we ask God why he has made us so feeble. But, in spite of ourselves, He replies through our consciences: 'I have made you too feeble to climb out of the pit, because I made you strong enough not to fall in.'\"\u0096 Rousseau, Confessions, Cohen trans.\"Constantly fortified with the new blood of immigrants who saw America as a place where anything was possible, the nation had adopted an ethos that elevated problem solving to the status of religion.\"\u0096 John Hoyt Williams, A Great and Shining Road\"That 95 per cent. fail of those who start in business upon their own\naccount seems incredible, and yet such are said to be the statistics\nupon the subject.\"\u0096 Andrew Carnegie, 1896\"You should never turn a man's generosity as a sword against him. Any virtue that a man has, even if he has many vices, should not be used as a tool against him.\"\u0096 Rabi to Feynman\"You can't say I didn't try really hard, 'cause I'm trying really hard to be good.\"\u0096 Tom Petty\"He begins working calculus problems in his head as soon as he awakens. He did calculus while driving in his car, while sitting in the living room, and while lying in bed at night.\"\u0096 divorce complaint of Richard Feynman's second wife\"The development of this aircraft was long and complex even by Soviet standards, partially explained by the fact that its entire design team was in jail.\"\u0096 Howard Moon on the TU-2\"It is said that there is a technical term\n     for people who believe that little boys and\n     little girls are born indistinguishable and\n     are molded into their natures by parental\n     socialization. The term is 'childless.'\"\u0096 Steven Pinker\"When you have eliminated the impossible, whatever remains, however\nimprobable, must be the truth.\"\u0096 Sherlock HolmesHis notions fitted things so well,\nThat which was which he could not tell; \nBut oftentimes mistook th' one\nFor th' other, as great clerks have done.\u0096 Samuel Butler, Hudibras\"A complex system that works is invariably found to have evolved from a simple system that worked. The inverse proposition also appears to be true: A complex system designed from scratch never works and cannot be made to work.\"\u0096 John Gall\"The Muslims of al-Andalus had nothing to learn from their Christian \nneighbours and were incurious about them. Geographers' accounts of\nChristian Spain tended to be cursory in the extreme: it was cold, the\ninhabitants were barbarians who ate pigs, you could get slaves there \u0097 that \nwas about the sum of it.\"\u0096 Richard Fletcher, Moorish Spain\"When the enemy is making a false movement we must take good care not to interrupt him.\"\u0096 Napoleon\"Leave me alone, I'm trying to build! Don't you know how people build? By concentrating!\"\u0096 my 5 year old son, building Lego\"An expert is a man who has made all the mistakes which can be made in a very narrow field.\"\u0096 Niels Bohr\"Don't fear moving slowly. Fear standing still.\"\u0096 Chinese proverb\"I think a life properly lived is just learn, learn, learn all the time.\"\u0096 Charlie Munger\"The handicap under which most beginning writers struggle is that they don't know how to write.\"\u0096 Wodehouse\"Then in 1888 came the publication of Denton's history\n  of England in the fifteenth century. This was a\n  masterpiece of egregious perversity, depicting the\n  later Middle Ages as a culminating period of ruinous\n  taxation, iniquitous labour laws, demoralizing\n  pestilences, and lavish dissipation of national\n  resources upon violent and embittered domestic feuds\n  and futile and indecisive foreign wars.",
        "start_char_idx": 13740,
        "end_char_idx": 17872,
        "text_template": "{metadata_str}\n\n{content}",
        "metadata_template": "{key}: {value}",
        "metadata_seperator": "\n",
        "class_name": "TextNode"
      },
      "__type__": "1"
    },
    "e3cf9e1b-3609-40ac-b4cf-a6bba834ac1a": {
      "__data__": {
        "id_": "e3cf9e1b-3609-40ac-b4cf-a6bba834ac1a",
        "embedding": null,
        "metadata": {
          "source": "https://paulgraham.com/quo.html",
          "title": "Quotes",
          "language": null
        },
        "excluded_embed_metadata_keys": [],
        "excluded_llm_metadata_keys": [],
        "relationships": {
          "1": {
            "node_id": "e1dd58a1-1655-4846-bd2c-dbe87e3b1d8d",
            "node_type": "4",
            "metadata": {
              "source": "https://paulgraham.com/quo.html",
              "title": "Quotes",
              "language": null
            },
            "hash": "69edc8c0cea0517adc25e62d3ac05bc4c3165d29e568e3308f1bb5f9f55b817c",
            "class_name": "RelatedNodeInfo"
          },
          "2": {
            "node_id": "df53392e-b34f-46c7-b11c-68340917877e",
            "node_type": "1",
            "metadata": {
              "source": "https://paulgraham.com/quo.html",
              "title": "Quotes",
              "language": null
            },
            "hash": "746bb844eed0f466f71e65be149c12576989ef04cf56f3a657ed316681ecd1c8",
            "class_name": "RelatedNodeInfo"
          },
          "3": {
            "node_id": "9ee175cc-707a-4d1f-8952-1dc4b22bf115",
            "node_type": "1",
            "metadata": {},
            "hash": "6cef2280b5bc512c9e132d916f96fe6066f02c22d3c1469cbb2e140d2f48bde5",
            "class_name": "RelatedNodeInfo"
          }
        },
        "text": "\"\u0096 Niels Bohr\"Don't fear moving slowly. Fear standing still.\"\u0096 Chinese proverb\"I think a life properly lived is just learn, learn, learn all the time.\"\u0096 Charlie Munger\"The handicap under which most beginning writers struggle is that they don't know how to write.\"\u0096 Wodehouse\"Then in 1888 came the publication of Denton's history\n  of England in the fifteenth century. This was a\n  masterpiece of egregious perversity, depicting the\n  later Middle Ages as a culminating period of ruinous\n  taxation, iniquitous labour laws, demoralizing\n  pestilences, and lavish dissipation of national\n  resources upon violent and embittered domestic feuds\n  and futile and indecisive foreign wars. The credulity\n  of even the most undiscriminating reader was taxed to a\n  degree by a portrayal in which horror succeeded upon\n  cataclysm, in a thickening atmosphere of crime and\n  terror, want, degradation, and wretchedness.\"\u0096 A. R. Bridbury\"We are all agreed that your theory is crazy. The question that divides us is whether it is crazy enough to have a chance of being correct.\"\u0096 Neils Bohr\"Pessimists sound smart. Optimists make money.\"\u0096 Nat Friedman\"Immature poets imitate; mature poets steal; bad poets deface what they take, and good poets make it into something better, or at least something different.\"\u0096 T. S. Eliot\"The most exciting phrase to hear in science, the one that heralds new discoveries, is not 'Eureka' but 'That's funny...'\u0096 Isaac Asimov\"We always want to make sure that our machines haven\u0092t by accident learned something that isn\u0092t what we intended.\"\u0096 Susan Wojcicki\"The population is made up of four types of people: A small number hunt witches. A large number go along with the hunt. A larger number are silent. A tiny number oppose it. The final group \u0097 as if by magic \u0097 become witches.\"\u0096 Bret Weinstein\"People who can't laugh at themselves will always be outwitted by people who can.\"\u0096 T. K. Coleman\"Political correctness is America's newest form of intolerance, and it is especially pernicious because it comes disguised as tolerance. It presents itself as fairness, yet attempts to restrict and control people's language with strict codes and rigid rules.\"\u0096 George Carlin\"I sometimes ask students what their position on slavery would have been had they been white and living in the South before abolition. Guess what? They all would have been abolitionists! They all would have bravely spoken out against slavery, and worked tirelessly against it.\"\u0096 Robert P. George\"Lies are often much more plausible, more appealing to reason, than reality, since the liar has the great advantage of knowing beforehand what the audience wishes or expects to hear.\"\u0096 Hannah Arendt\"If you want to have good ideas, you must have many ideas.\"\u0096 Linus Pauling\"A good notation has a subtlety and suggestiveness which at times make it almost seem like a live teacher.\"\u0096 Bertrand Russell\"I didn't make a decision to pursue astronomy. Rather, it just grabbed me, and I had no thought of escaping.\"\u0096 Carl Sagan\"How we spend our days is, of course, how we spend our lives.\"\u0096 Annie Dillard\"Tis not in mortals to command success; but we'll do more, Sempronius, we'll deserve it.\"\u0096 Addison\"Sometimes, magic is just someone spending more time on something than anyone else might reasonably expect.\"\u0096 Teller\"Few people are capable of expressing with equanimity opinions which differ from the prejudices of their social environment. Most people are even incapable of forming such opinions.\"\u0096 Einstein\"All buildings are predictions. All predictions are wrong.\"\u0096 Stewart Brand\"It's easier to win an argument with a genius than an idiot.\"\u0096 Gurwinder Bhogal\"Now, most people hate to admit they're wrong, but it didn't bother\nBill one bit. All he cared about was what was right, not\nwho was right. That's what makes Bill very, very dangerous.\"\u0096 Larry Ellison on Bill Gates\"Because most entrenched bureaucracies tend to develop a strong aversion to changing the status quo, state-run technological progress is not likely to be sustained over long periods.\"\u0096 Joel Mokyr\"The German historians of the nineteenth century were explicit and vastly\nsuccessful in the exercise of what they regarded as social responsibility.",
        "start_char_idx": 17190,
        "end_char_idx": 21381,
        "text_template": "{metadata_str}\n\n{content}",
        "metadata_template": "{key}: {value}",
        "metadata_seperator": "\n",
        "class_name": "TextNode"
      },
      "__type__": "1"
    },
    "9ee175cc-707a-4d1f-8952-1dc4b22bf115": {
      "__data__": {
        "id_": "9ee175cc-707a-4d1f-8952-1dc4b22bf115",
        "embedding": null,
        "metadata": {
          "source": "https://paulgraham.com/quo.html",
          "title": "Quotes",
          "language": null
        },
        "excluded_embed_metadata_keys": [],
        "excluded_llm_metadata_keys": [],
        "relationships": {
          "1": {
            "node_id": "e1dd58a1-1655-4846-bd2c-dbe87e3b1d8d",
            "node_type": "4",
            "metadata": {
              "source": "https://paulgraham.com/quo.html",
              "title": "Quotes",
              "language": null
            },
            "hash": "69edc8c0cea0517adc25e62d3ac05bc4c3165d29e568e3308f1bb5f9f55b817c",
            "class_name": "RelatedNodeInfo"
          },
          "2": {
            "node_id": "e3cf9e1b-3609-40ac-b4cf-a6bba834ac1a",
            "node_type": "1",
            "metadata": {
              "source": "https://paulgraham.com/quo.html",
              "title": "Quotes",
              "language": null
            },
            "hash": "ecd84897ef89349d69182a9a0a6c94e546a633eeb377437a4a6a5286d78659af",
            "class_name": "RelatedNodeInfo"
          },
          "3": {
            "node_id": "326912d7-afdb-4c5a-9c57-0f55ccabe400",
            "node_type": "1",
            "metadata": {},
            "hash": "9c0e83383aeae89770cdeb0b51559935f027c1f3023a475fc68ff312e11b9745",
            "class_name": "RelatedNodeInfo"
          }
        },
        "text": "Most people are even incapable of forming such opinions.\"\u0096 Einstein\"All buildings are predictions. All predictions are wrong.\"\u0096 Stewart Brand\"It's easier to win an argument with a genius than an idiot.\"\u0096 Gurwinder Bhogal\"Now, most people hate to admit they're wrong, but it didn't bother\nBill one bit. All he cared about was what was right, not\nwho was right. That's what makes Bill very, very dangerous.\"\u0096 Larry Ellison on Bill Gates\"Because most entrenched bureaucracies tend to develop a strong aversion to changing the status quo, state-run technological progress is not likely to be sustained over long periods.\"\u0096 Joel Mokyr\"The German historians of the nineteenth century were explicit and vastly\nsuccessful in the exercise of what they regarded as social responsibility.\nNor did they see any conflict between their ethics as historians and\ntheir obligations as citizens. But we can now perceive that they      \nwere building not only a united Germany but a Germany united in \nauthoritarian terms.\"\u0096 Lynn White\"We are the masters of the unsaid words, but slaves of those we let slip out.\"\u0096 Churchill\"Good ideology. Wrong species.\"\u0096 E. O. Wilson on Marxism\"I never took a day off in my twenties. Not one.\"\u0096 Bill Gates\"Stopped.\"\u0096 last words of the surgeon Joseph Henry Green, referring to his own pulse\"Nothing so dates an era as its conception of the future.\"\u0096 Brian Eno\"I never understand anything until I have written about it.\"\u0096 Horace Walpole\"The paper is in the midst of an evolution from the stodgy paper of record into a juicy collection of great narratives.\"\u0096 The New York Times on itself\"Everyone has the right to freedom of opinion and expression; this right includes freedom to hold opinions without interference and to seek, receive and impart information and ideas through any media and regardless of frontiers.\"\u0096 UN Declaration of Human Rights\"Remember that the thing that is most likely to be wrong is the thing that you heard most recently, because we\u0092ve not had the chance to verify it yet.\"\u0096 William Hanage on news during epidemics\"Avoid metaphors, which can introduce unneeded baggage.\"\u0096 UC Irvine Inclusive IT Language Guide\"In truth, Theodoric was something of a parvenu, as every other Goth must have been aware.\"\u0096 J. M. Wallace-Hadrill\"What every scientist knows, but few will admit, is that the requirement for great success is great ambition. Moreover, the ambition is for personal triumph over other men, not merely over nature.\"\u0096 Richard Lewontin\"If you want to combat error, critique your in-group. You speak their language and they trust you, so you might persuade someone.If you want to raise your status, critique your out-group. They won't listen, but your in-group will love it.\"\u0096 Bryan Caplan\"Crime does not pay as much as code.\"\u0096 Freddy Vega\"Cities are not loud. Cars are loud.\"\u0096 John Riecke\"A fundamental theory should have no free parameters.\"\u0096 Thomas Van Riet\"If you start a war, you don\u0092t get to choose how it ends.\"\u0096 Shashank Joshi\"It is very hard to remember that events now long in the past were once in the future.\"\u0096 Maitland\"Intellectuals are naturally attracted by the idea of a planned society, in the belief that they will be in charge of it.\"\u0096 Roger Scruton\"Some argue that we should evaluate ... research only on the basis of its scientific soundness and merit. I disagree.\"\u0096 Stavroula Kousta, chief editor of Nature Human Behaviour\"We recommend avoiding general and often dehumanizing 'the' labels such as the poor, the mentally ill, the French, the disabled, the college-educated. Instead, use wording such as people with mental illnesses.\"\u0096 AP Stylebook\"Ludwig Boltzmann, who spent much of his life studying statistical mechanics, died in 1906, by his own hand. Paul Ehrenfest, carrying on the work, died similarly in 1933. Now it is our turn to study statistical mechanics.\"\u0096 first paragraph of David Goodstein's States of Matter\"I am inclined to agree with Francis Galton in believing that education and environment produce only a small effect on the mind of any one, and that most of our qualities are innate.\"\u0096 Darwin\"The show was successful because I micromanaged it \u0097 every word, every line, every take, every edit, every casting. That\u0092s my way of life.",
        "start_char_idx": 20604,
        "end_char_idx": 24820,
        "text_template": "{metadata_str}\n\n{content}",
        "metadata_template": "{key}: {value}",
        "metadata_seperator": "\n",
        "class_name": "TextNode"
      },
      "__type__": "1"
    },
    "326912d7-afdb-4c5a-9c57-0f55ccabe400": {
      "__data__": {
        "id_": "326912d7-afdb-4c5a-9c57-0f55ccabe400",
        "embedding": null,
        "metadata": {
          "source": "https://paulgraham.com/quo.html",
          "title": "Quotes",
          "language": null
        },
        "excluded_embed_metadata_keys": [],
        "excluded_llm_metadata_keys": [],
        "relationships": {
          "1": {
            "node_id": "e1dd58a1-1655-4846-bd2c-dbe87e3b1d8d",
            "node_type": "4",
            "metadata": {
              "source": "https://paulgraham.com/quo.html",
              "title": "Quotes",
              "language": null
            },
            "hash": "69edc8c0cea0517adc25e62d3ac05bc4c3165d29e568e3308f1bb5f9f55b817c",
            "class_name": "RelatedNodeInfo"
          },
          "2": {
            "node_id": "9ee175cc-707a-4d1f-8952-1dc4b22bf115",
            "node_type": "1",
            "metadata": {
              "source": "https://paulgraham.com/quo.html",
              "title": "Quotes",
              "language": null
            },
            "hash": "14dad5729ef48205a9e15b65398a037705d519ab27e21569c3cb7838f82eccaf",
            "class_name": "RelatedNodeInfo"
          },
          "3": {
            "node_id": "c6298b77-55ba-4f1b-914e-1a9a62185ce1",
            "node_type": "1",
            "metadata": {},
            "hash": "4a69557ab20257a3640b016fc82027ac12f50651d79122214b85d4bdb21e2d9f",
            "class_name": "RelatedNodeInfo"
          }
        },
        "text": "Instead, use wording such as people with mental illnesses.\"\u0096 AP Stylebook\"Ludwig Boltzmann, who spent much of his life studying statistical mechanics, died in 1906, by his own hand. Paul Ehrenfest, carrying on the work, died similarly in 1933. Now it is our turn to study statistical mechanics.\"\u0096 first paragraph of David Goodstein's States of Matter\"I am inclined to agree with Francis Galton in believing that education and environment produce only a small effect on the mind of any one, and that most of our qualities are innate.\"\u0096 Darwin\"The show was successful because I micromanaged it \u0097 every word, every line, every take, every edit, every casting. That\u0092s my way of life.\"\u0096 Seinfeld\"Research is to see what everybody has seen and think what nobody has thought.\"\u0096 Albert Szent-Gy\u00f6rgyi paraphrasing Schopenhauer\"I never thought I\u0092d live to see the day when the right wing would become the cool ones giving the middle finger to the establishment, and the left wing becoming the sniveling self-righteous twatty ones going around shaming everyone.\"\u0096 Johnny Rotten, lead singer of the Sex Pistols\"At last in 565 he stepped himself into undeniable heterodoxy, and died that year branded by the vast majority of his subjects as an Aphthartocathartic heretic.\"\u0096 Steven Runciman on Justinian\"It was always the women, and above all the young ones, who were the most bigoted adherents of the Party, the swallowers of slogans, the amateur spies and nosers-out of unorthodoxy.\"\u0096 George Orwell, 1984\"If, therefore, I have failed to make Aristotle's theory of universals clear, that is (I maintain) because it is not clear.\"\u0096 Bertrand Russell, History of Western Philosophy\"If you\u0092re thinking without writing, you only think you\u0092re thinking.\"\u0096 Leslie Lamport",
        "start_char_idx": 24141,
        "end_char_idx": 25891,
        "text_template": "{metadata_str}\n\n{content}",
        "metadata_template": "{key}: {value}",
        "metadata_seperator": "\n",
        "class_name": "TextNode"
      },
      "__type__": "1"
    },
    "c6298b77-55ba-4f1b-914e-1a9a62185ce1": {
      "__data__": {
        "id_": "c6298b77-55ba-4f1b-914e-1a9a62185ce1",
        "embedding": null,
        "metadata": {
          "source": "https://paulgraham.com/bio.html",
          "title": "Bio",
          "language": null
        },
        "excluded_embed_metadata_keys": [],
        "excluded_llm_metadata_keys": [],
        "relationships": {
          "1": {
            "node_id": "0e5ec832-5e40-4111-90fb-2402796144c8",
            "node_type": "4",
            "metadata": {
              "source": "https://paulgraham.com/bio.html",
              "title": "Bio",
              "language": null
            },
            "hash": "3a892d9e13d5bba8694fd37b78acbcef4127d1d8dd12094668da6d3fe422d894",
            "class_name": "RelatedNodeInfo"
          },
          "2": {
            "node_id": "326912d7-afdb-4c5a-9c57-0f55ccabe400",
            "node_type": "1",
            "metadata": {
              "source": "https://paulgraham.com/quo.html",
              "title": "Quotes",
              "language": null
            },
            "hash": "325276241d8f9986ca19629335443cb01846ca19b219db7ad01213f7f7ac3e8d",
            "class_name": "RelatedNodeInfo"
          },
          "3": {
            "node_id": "2dfff652-e893-403f-83c3-8333f9013947",
            "node_type": "1",
            "metadata": {},
            "hash": "a8ec05dd37be3f912a3ec9cae481e778ef705844cd25fcc1263bd4fde6d1ae9f",
            "class_name": "RelatedNodeInfo"
          }
        },
        "text": "Bio\n\nPaul Graham is a programmer, writer, and investor.\nIn 1995, he and Robert Morris started Viaweb, the first software\nas a service company.  Viaweb was acquired by \nYahoo in 1998, \nwhere it became Yahoo Store.  In 2001 he started publishing\nessays on paulgraham.com,\nwhich now gets around 25 million page views per year.\nIn 2005 he and\nJessica Livingston, Robert Morris, and Trevor Blackwell\nstarted Y\u00a0Combinator, the first of a new type of startup\nincubator.  Since 2005 Y Combinator has funded over 3000 startups,\nincluding Airbnb, Dropbox, Stripe, and Reddit.  In 2019 he published a\nnew Lisp dialect written in itself called Bel.Paul\nis the author of \nOn Lisp (Prentice Hall,\n                   1993),\nANSI Common Lisp \n(Prentice Hall, 1995), and\nHackers &\nPainters (O'Reilly, 2004).\nHe has an AB from Cornell and a\n                   PhD in Computer Science from Harvard, and studied painting\nat RISD and the Accademia di Belle Arti in Florence.\nPhoto by Dave Thomas, released under the \nAttribution Creative Commons license.\nClick for full-size version.",
        "start_char_idx": 0,
        "end_char_idx": 1062,
        "text_template": "{metadata_str}\n\n{content}",
        "metadata_template": "{key}: {value}",
        "metadata_seperator": "\n",
        "class_name": "TextNode"
      },
      "__type__": "1"
    },
    "2dfff652-e893-403f-83c3-8333f9013947": {
      "__data__": {
        "id_": "2dfff652-e893-403f-83c3-8333f9013947",
        "embedding": null,
        "metadata": {
          "source": "https://paulgraham.com/info.html",
          "title": "Paul Graham Info",
          "language": null
        },
        "excluded_embed_metadata_keys": [],
        "excluded_llm_metadata_keys": [],
        "relationships": {
          "1": {
            "node_id": "aa629b38-5cac-4440-a2db-f69d9742fbf0",
            "node_type": "4",
            "metadata": {
              "source": "https://paulgraham.com/info.html",
              "title": "Paul Graham Info",
              "language": null
            },
            "hash": "2575696e920253c6ec2695d66b113092fef82c30e0260d854c6350d710340868",
            "class_name": "RelatedNodeInfo"
          },
          "2": {
            "node_id": "c6298b77-55ba-4f1b-914e-1a9a62185ce1",
            "node_type": "1",
            "metadata": {
              "source": "https://paulgraham.com/bio.html",
              "title": "Bio",
              "language": null
            },
            "hash": "f043c1d0cf2d49153a707ca81109b2101aac83213227669779a9bb320acd5556",
            "class_name": "RelatedNodeInfo"
          },
          "3": {
            "node_id": "ee631768-43a8-42df-a2bd-c333477b6333",
            "node_type": "1",
            "metadata": {},
            "hash": "7a0a26282badd5b81c5cd81e55aac629100561f48566473cb95f862d907f4cbb",
            "class_name": "RelatedNodeInfo"
          }
        },
        "text": "Paul Graham Info\n\n\nBefore emailing...\n\n Is yours a Frequently Asked Question? Unfortunately I now get so much mail that I can't promise\nto respond to every one.  I know this seems obnoxious, \nbut I notice I have mails in my inbox that are two years\nold.  I'm probably\nnever going to respond to them, and I may as well admit it. I respond faster to emails that \nare short.  Two-liners I often reply to immediately.  Long emails\nI leave in my inbox to deal with later, and never do.\n\nMy email address is my first and last initial at Y Combinator.",
        "start_char_idx": 2,
        "end_char_idx": 546,
        "text_template": "{metadata_str}\n\n{content}",
        "metadata_template": "{key}: {value}",
        "metadata_seperator": "\n",
        "class_name": "TextNode"
      },
      "__type__": "1"
    },
    "ee631768-43a8-42df-a2bd-c333477b6333": {
      "__data__": {
        "id_": "ee631768-43a8-42df-a2bd-c333477b6333",
        "embedding": null,
        "metadata": {
          "source": "https://paulgraham.com/superlinear.html",
          "title": "Superlinear Returns",
          "language": null
        },
        "excluded_embed_metadata_keys": [],
        "excluded_llm_metadata_keys": [],
        "relationships": {
          "1": {
            "node_id": "8a578ba5-7a1b-4646-8ff1-c4c25a415168",
            "node_type": "4",
            "metadata": {
              "source": "https://paulgraham.com/superlinear.html",
              "title": "Superlinear Returns",
              "language": null
            },
            "hash": "80e69484839f31f89df52636a316e0b2e4e70f885b570797dcf19eedfaca54e0",
            "class_name": "RelatedNodeInfo"
          },
          "2": {
            "node_id": "2dfff652-e893-403f-83c3-8333f9013947",
            "node_type": "1",
            "metadata": {
              "source": "https://paulgraham.com/info.html",
              "title": "Paul Graham Info",
              "language": null
            },
            "hash": "39b432264adfaab159f7c3e3b6d6650429b903225ce9debda9507b16f530ec4b",
            "class_name": "RelatedNodeInfo"
          },
          "3": {
            "node_id": "5400d990-b59d-44f9-9384-a6b7d97ca8a1",
            "node_type": "1",
            "metadata": {},
            "hash": "c9d83001f87449abcfb03a68a1509a83c72aa3b67441b0b7aa928dac60f3aeb3",
            "class_name": "RelatedNodeInfo"
          }
        },
        "text": "Superlinear Returns\n\nOctober 2023One of the most important things I didn't understand about the world\nwhen I was a child is the degree to which the returns for performance\nare superlinear.Teachers and coaches implicitly told us the returns were linear.\n\"You get out,\" I heard a thousand times, \"what you put in.\" They\nmeant well, but this is rarely true. If your product is only half\nas good as your competitor's, you don't get half as many customers.\nYou get no customers, and you go out of business.It's obviously true that the returns for performance are superlinear\nin business. Some think this is a flaw of capitalism, and that if\nwe changed the rules it would stop being true. But superlinear\nreturns for performance are a feature of the world, not an artifact\nof rules we've invented. We see the same pattern in fame, power,\nmilitary victories, knowledge, and even benefit to humanity. In all\nof these, the rich get richer.\n[1]You can't understand the world without understanding the concept\nof superlinear returns. And if you're ambitious you definitely\nshould, because this will be the wave you surf on.It may seem as if there are a lot of different situations with\nsuperlinear returns, but as far as I can tell they reduce to two\nfundamental causes: exponential growth and thresholds.The most obvious case of superlinear returns is when you're working\non something that grows exponentially. For example, growing bacterial\ncultures. When they grow at all, they grow exponentially. But they're\ntricky to grow. Which means the difference in outcome between someone\nwho's adept at it and someone who's not is very great.Startups can also grow exponentially, and we see the same pattern\nthere. Some manage to achieve high growth rates. Most don't. And\nas a result you get qualitatively different outcomes: the companies\nwith high growth rates tend to become immensely valuable, while the\nones with lower growth rates may not even survive.Y Combinator encourages founders to focus on growth rate rather\nthan absolute numbers. It prevents them from being discouraged early\non, when the absolute numbers are still low. It also helps them\ndecide what to focus on: you can use growth rate as a compass to\ntell you how to evolve the company. But the main advantage is that\nby focusing on growth rate you tend to get something that grows\nexponentially.YC doesn't explicitly tell founders that with growth rate \"you get\nout what you put in,\" but it's not far from the truth. And if growth\nrate were proportional to performance, then the reward for performance\np over time t would be proportional to pt.Even after decades of thinking about this, I find that sentence\nstartling.Whenever how well you do depends on how well you've done, you'll\nget exponential growth. But neither our DNA nor our customs prepare\nus for it. No one finds exponential growth natural; every child is\nsurprised, the first time they hear it, by the story of the man who\nasks the king for a single grain of rice the first day and double\nthe amount each successive day.What we don't understand naturally we develop customs to deal with,\nbut we don't have many customs about exponential growth either,\nbecause there have been so few instances of it in human history.\nIn principle herding should have been one: the more animals you\nhad, the more offspring they'd have. But in practice grazing land\nwas the limiting factor, and there was no plan for growing that\nexponentially.Or more precisely, no generally applicable plan. There was a way\nto grow one's territory exponentially: by conquest. The more territory\nyou control, the more powerful your army becomes, and the easier\nit is to conquer new territory. This is why history is full of\nempires. But so few people created or ran empires that their\nexperiences didn't affect customs very much. The emperor was a\nremote and terrifying figure, not a source of lessons one could use\nin one's own life.The most common case of exponential growth in preindustrial times\nwas probably scholarship. The more you know, the easier it is to\nlearn new things. The result, then as now, was that some people\nwere startlingly more knowledgeable than the rest about certain\ntopics. But this didn't affect customs much either. Although empires\nof ideas can overlap and there can thus be far more emperors, in\npreindustrial times this type of empire had little practical effect.\n[2]That has changed in the last few centuries.",
        "start_char_idx": 0,
        "end_char_idx": 4425,
        "text_template": "{metadata_str}\n\n{content}",
        "metadata_template": "{key}: {value}",
        "metadata_seperator": "\n",
        "class_name": "TextNode"
      },
      "__type__": "1"
    },
    "5400d990-b59d-44f9-9384-a6b7d97ca8a1": {
      "__data__": {
        "id_": "5400d990-b59d-44f9-9384-a6b7d97ca8a1",
        "embedding": null,
        "metadata": {
          "source": "https://paulgraham.com/superlinear.html",
          "title": "Superlinear Returns",
          "language": null
        },
        "excluded_embed_metadata_keys": [],
        "excluded_llm_metadata_keys": [],
        "relationships": {
          "1": {
            "node_id": "8a578ba5-7a1b-4646-8ff1-c4c25a415168",
            "node_type": "4",
            "metadata": {
              "source": "https://paulgraham.com/superlinear.html",
              "title": "Superlinear Returns",
              "language": null
            },
            "hash": "80e69484839f31f89df52636a316e0b2e4e70f885b570797dcf19eedfaca54e0",
            "class_name": "RelatedNodeInfo"
          },
          "2": {
            "node_id": "ee631768-43a8-42df-a2bd-c333477b6333",
            "node_type": "1",
            "metadata": {
              "source": "https://paulgraham.com/superlinear.html",
              "title": "Superlinear Returns",
              "language": null
            },
            "hash": "49a3b4a0ee581a277f34f01e38a8b5e2a67fa83b5ab6163f644a3c486c13695f",
            "class_name": "RelatedNodeInfo"
          },
          "3": {
            "node_id": "70b69885-dbbd-40e6-adc1-fe149953f6d6",
            "node_type": "1",
            "metadata": {},
            "hash": "c810a5b6992ca3449196d7d7d6ece3a8206a327d9e7e2f50302153adbd517846",
            "class_name": "RelatedNodeInfo"
          }
        },
        "text": "This is why history is full of\nempires. But so few people created or ran empires that their\nexperiences didn't affect customs very much. The emperor was a\nremote and terrifying figure, not a source of lessons one could use\nin one's own life.The most common case of exponential growth in preindustrial times\nwas probably scholarship. The more you know, the easier it is to\nlearn new things. The result, then as now, was that some people\nwere startlingly more knowledgeable than the rest about certain\ntopics. But this didn't affect customs much either. Although empires\nof ideas can overlap and there can thus be far more emperors, in\npreindustrial times this type of empire had little practical effect.\n[2]That has changed in the last few centuries. Now the emperors of\nideas can design bombs that defeat the emperors of territory. But\nthis phenomenon is still so new that we haven't fully assimilated\nit. Few even of the participants realize they're benefitting from\nexponential growth or ask what they can learn from other instances\nof it.The other source of superlinear returns is embodied in the expression\n\"winner take all.\" In a sports match the relationship between\nperformance and return is a step function: the winning team gets\none win whether they do much better or just slightly better.\n[3]The source of the step function is not competition per se, however.\nIt's that there are thresholds in the outcome. You don't need\ncompetition to get those. There can be thresholds in situations\nwhere you're the only participant, like proving a theorem or hitting\na target.It's remarkable how often a situation with one source of superlinear\nreturns also has the other. Crossing thresholds leads to exponential\ngrowth: the winning side in a battle usually suffers less damage,\nwhich makes them more likely to win in the future. And exponential\ngrowth helps you cross thresholds: in a market with network effects,\na company that grows fast enough can shut out potential competitors.Fame is an interesting example of a phenomenon that combines both\nsources of superlinear returns. Fame grows exponentially because\nexisting fans bring you new ones. But the fundamental reason it's\nso concentrated is thresholds: there's only so much room on the\nA-list in the average person's head.The most important case combining both sources of superlinear returns\nmay be learning. Knowledge grows exponentially, but there are also\nthresholds in it. Learning to ride a bicycle, for example. Some of\nthese thresholds are akin to machine tools: once you learn to read,\nyou're able to learn anything else much faster. But the most important\nthresholds of all are those representing new discoveries. Knowledge\nseems to be fractal in the sense that if you push hard at the\nboundary of one area of knowledge, you sometimes discover a whole\nnew field. And if you do, you get first crack at all the new\ndiscoveries to be made in it. Newton did this, and so did Durer and\nDarwin.\nAre there general rules for finding situations with superlinear\nreturns? The most obvious one is to seek work that compounds.There are two ways work can compound. It can compound directly, in\nthe sense that doing well in one cycle causes you to do better in\nthe next. That happens for example when you're building infrastructure,\nor growing an audience or brand. Or work can compound by teaching\nyou, since learning compounds. This second case is an interesting\none because you may feel you're doing badly as it's happening. You\nmay be failing to achieve your immediate goal. But if you're learning\na lot, then you're getting exponential growth nonetheless.This is one reason Silicon Valley is so tolerant of failure. People\nin Silicon Valley aren't blindly tolerant of failure. They'll only\ncontinue to bet on you if you're learning from your failures. But\nif you are, you are in fact a good bet: maybe your company didn't\ngrow the way you wanted, but you yourself have, and that should\nyield results eventually.Indeed, the forms of exponential growth that don't consist of\nlearning are so often intermixed with it that we should probably\ntreat this as the rule rather than the exception. Which yields\nanother heuristic: always be learning. If you're not learning,\nyou're probably not on a path that leads to superlinear returns.But don't overoptimize what you're learning. Don't limit yourself\nto learning things that are already known to be valuable.",
        "start_char_idx": 3676,
        "end_char_idx": 8084,
        "text_template": "{metadata_str}\n\n{content}",
        "metadata_template": "{key}: {value}",
        "metadata_seperator": "\n",
        "class_name": "TextNode"
      },
      "__type__": "1"
    },
    "70b69885-dbbd-40e6-adc1-fe149953f6d6": {
      "__data__": {
        "id_": "70b69885-dbbd-40e6-adc1-fe149953f6d6",
        "embedding": null,
        "metadata": {
          "source": "https://paulgraham.com/superlinear.html",
          "title": "Superlinear Returns",
          "language": null
        },
        "excluded_embed_metadata_keys": [],
        "excluded_llm_metadata_keys": [],
        "relationships": {
          "1": {
            "node_id": "8a578ba5-7a1b-4646-8ff1-c4c25a415168",
            "node_type": "4",
            "metadata": {
              "source": "https://paulgraham.com/superlinear.html",
              "title": "Superlinear Returns",
              "language": null
            },
            "hash": "80e69484839f31f89df52636a316e0b2e4e70f885b570797dcf19eedfaca54e0",
            "class_name": "RelatedNodeInfo"
          },
          "2": {
            "node_id": "5400d990-b59d-44f9-9384-a6b7d97ca8a1",
            "node_type": "1",
            "metadata": {
              "source": "https://paulgraham.com/superlinear.html",
              "title": "Superlinear Returns",
              "language": null
            },
            "hash": "1595f3a50762e16c771a22b427aa3cbedee06b5a1f85618a0f529b24a33c919e",
            "class_name": "RelatedNodeInfo"
          },
          "3": {
            "node_id": "ec0c7d54-5759-4549-8478-0a44e33f5672",
            "node_type": "1",
            "metadata": {},
            "hash": "c3262f976daea08ff2715fd316fcf7b0b2bfbf66611035d74caa2364ea87c62d",
            "class_name": "RelatedNodeInfo"
          }
        },
        "text": "But if you're learning\na lot, then you're getting exponential growth nonetheless.This is one reason Silicon Valley is so tolerant of failure. People\nin Silicon Valley aren't blindly tolerant of failure. They'll only\ncontinue to bet on you if you're learning from your failures. But\nif you are, you are in fact a good bet: maybe your company didn't\ngrow the way you wanted, but you yourself have, and that should\nyield results eventually.Indeed, the forms of exponential growth that don't consist of\nlearning are so often intermixed with it that we should probably\ntreat this as the rule rather than the exception. Which yields\nanother heuristic: always be learning. If you're not learning,\nyou're probably not on a path that leads to superlinear returns.But don't overoptimize what you're learning. Don't limit yourself\nto learning things that are already known to be valuable. You're\nlearning; you don't know for sure yet what's going to be valuable,\nand if you're too strict you'll lop off the outliers.What about step functions? Are there also useful heuristics of the\nform \"seek thresholds\" or \"seek competition?\" Here the situation\nis trickier. The existence of a threshold doesn't guarantee the\ngame will be worth playing. If you play a round of Russian roulette,\nyou'll be in a situation with a threshold, certainly, but in the\nbest case you're no better off. \"Seek competition\" is similarly\nuseless; what if the prize isn't worth competing for? Sufficiently\nfast exponential growth guarantees both the shape and magnitude of\nthe return curve \u2014 because something that grows fast enough will\ngrow big even if it's trivially small at first \u2014 but thresholds\nonly guarantee the shape.\n[4]A principle for taking advantage of thresholds has to include a\ntest to ensure the game is worth playing. Here's one that does: if\nyou come across something that's mediocre yet still popular, it\ncould be a good idea to replace it. For example, if a company makes\na product that people dislike yet still buy, then presumably they'd\nbuy a better alternative if you made one.\n[5]It would be great if there were a way to find promising intellectual\nthresholds. Is there a way to tell which questions have whole new\nfields beyond them? I doubt we could ever predict this with certainty,\nbut the prize is so valuable that it would be useful to have\npredictors that were even a little better than random, and there's\nhope of finding those. We can to some degree predict when a research\nproblem isn't likely to lead to new discoveries: when it seems\nlegit but boring. Whereas the kind that do lead to new discoveries\ntend to seem very mystifying, but perhaps unimportant. (If they\nwere mystifying and obviously important, they'd be famous open\nquestions with lots of people already working on them.) So one\nheuristic here is to be driven by curiosity rather than careerism\n\u2014 to give free rein to your curiosity instead of working on what\nyou're supposed to.\nThe prospect of superlinear returns for performance is an exciting\none for the ambitious. And there's good news in this department:\nthis territory is expanding in both directions. There are more types\nof work in which you can get superlinear returns, and the returns\nthemselves are growing.There are two reasons for this, though they're so closely intertwined\nthat they're more like one and a half: progress in technology, and\nthe decreasing importance of organizations.Fifty years ago it used to be much more necessary to be part of an\norganization to work on ambitious projects. It was the only way to\nget the resources you needed, the only way to have colleagues, and\nthe only way to get distribution. So in 1970 your prestige was in\nmost cases the prestige of the organization you belonged to. And\nprestige was an accurate predictor, because if you weren't part of\nan organization, you weren't likely to achieve much. There were a\nhandful of exceptions, most notably artists and writers, who worked\nalone using inexpensive tools and had their own brands. But even\nthey were at the mercy of organizations for reaching audiences.\n[6]A world dominated by organizations damped variation in the returns\nfor performance. But this world has eroded significantly just in\nmy lifetime. Now a lot more people can have the freedom that artists\nand writers had in the 20th century.",
        "start_char_idx": 7207,
        "end_char_idx": 11520,
        "text_template": "{metadata_str}\n\n{content}",
        "metadata_template": "{key}: {value}",
        "metadata_seperator": "\n",
        "class_name": "TextNode"
      },
      "__type__": "1"
    },
    "ec0c7d54-5759-4549-8478-0a44e33f5672": {
      "__data__": {
        "id_": "ec0c7d54-5759-4549-8478-0a44e33f5672",
        "embedding": null,
        "metadata": {
          "source": "https://paulgraham.com/superlinear.html",
          "title": "Superlinear Returns",
          "language": null
        },
        "excluded_embed_metadata_keys": [],
        "excluded_llm_metadata_keys": [],
        "relationships": {
          "1": {
            "node_id": "8a578ba5-7a1b-4646-8ff1-c4c25a415168",
            "node_type": "4",
            "metadata": {
              "source": "https://paulgraham.com/superlinear.html",
              "title": "Superlinear Returns",
              "language": null
            },
            "hash": "80e69484839f31f89df52636a316e0b2e4e70f885b570797dcf19eedfaca54e0",
            "class_name": "RelatedNodeInfo"
          },
          "2": {
            "node_id": "70b69885-dbbd-40e6-adc1-fe149953f6d6",
            "node_type": "1",
            "metadata": {
              "source": "https://paulgraham.com/superlinear.html",
              "title": "Superlinear Returns",
              "language": null
            },
            "hash": "c1ee743350601d2f85c0db7d116d044973eb53cb52f3337145da3462401d49cf",
            "class_name": "RelatedNodeInfo"
          },
          "3": {
            "node_id": "1f34dba1-dd49-4236-9a20-52b3f5aebc58",
            "node_type": "1",
            "metadata": {},
            "hash": "6fad73035d5423584cf395777d6e4662e89af84f106c76e14516959db60b00d9",
            "class_name": "RelatedNodeInfo"
          }
        },
        "text": "It was the only way to\nget the resources you needed, the only way to have colleagues, and\nthe only way to get distribution. So in 1970 your prestige was in\nmost cases the prestige of the organization you belonged to. And\nprestige was an accurate predictor, because if you weren't part of\nan organization, you weren't likely to achieve much. There were a\nhandful of exceptions, most notably artists and writers, who worked\nalone using inexpensive tools and had their own brands. But even\nthey were at the mercy of organizations for reaching audiences.\n[6]A world dominated by organizations damped variation in the returns\nfor performance. But this world has eroded significantly just in\nmy lifetime. Now a lot more people can have the freedom that artists\nand writers had in the 20th century. There are lots of ambitious\nprojects that don't require much initial funding, and lots of new\nways to learn, make money, find colleagues, and reach audiences.There's still plenty of the old world left, but the rate of change\nhas been dramatic by historical standards. Especially considering\nwhat's at stake. It's hard to imagine a more fundamental change\nthan one in the returns for performance.Without the damping effect of institutions, there will be more\nvariation in outcomes. Which doesn't imply everyone will be better\noff: people who do well will do even better, but those who do badly\nwill do worse. That's an important point to bear in mind. Exposing\noneself to superlinear returns is not for everyone. Most people\nwill be better off as part of the pool. So who should shoot for\nsuperlinear returns? Ambitious people of two types: those who know\nthey're so good that they'll be net ahead in a world with higher\nvariation, and those, particularly the young, who can afford to\nrisk trying it to find out.\n[7]The switch away from institutions won't simply be an exodus of their\ncurrent inhabitants. Many of the new winners will be people they'd\nnever have let in. So the resulting democratization of opportunity\nwill be both greater and more authentic than any tame intramural\nversion the institutions themselves might have cooked up.\nNot everyone is happy about this great unlocking of ambition. It\nthreatens some vested interests and contradicts some ideologies.\u00a0[8]\nBut if you're an ambitious individual it's good news for you.\nHow should you take advantage of it?The most obvious way to take advantage of superlinear returns for\nperformance is by doing exceptionally good work. At the far end of\nthe curve, incremental effort is a bargain. All the more so because\nthere's less competition at the far end \u2014 and not just for the\nobvious reason that it's hard to do something exceptionally well,\nbut also because people find the prospect so intimidating that few\neven try. Which means it's not just a bargain to do exceptional\nwork, but a bargain even to try to.There are many variables that affect how good your work is, and if\nyou want to be an outlier you need to get nearly all of them right.\nFor example, to do something exceptionally well, you have to be\ninterested in it. Mere diligence is not enough. So in a world with\nsuperlinear returns, it's even more valuable to know what you're\ninterested in, and to find ways to work on it.\n[9]\nIt will also be\nimportant to choose work that suits your circumstances. For example,\nif there's a kind of work that inherently requires a huge expenditure\nof time and energy, it will be increasingly valuable to do it when\nyou're young and don't yet have children.There's a surprising amount of technique to doing great work.\nIt's not just a matter of trying hard. I'm going to take a shot\ngiving a recipe in one paragraph.Choose work you have a natural aptitude for and a deep interest in.\nDevelop a habit of working on your own projects; it doesn't matter\nwhat they are so long as you find them excitingly ambitious. Work\nas hard as you can without burning out, and this will eventually\nbring you to one of the frontiers of knowledge. These look smooth\nfrom a distance, but up close they're full of gaps. Notice and\nexplore such gaps, and if you're lucky one will expand into a whole\nnew field. Take as much risk as you can afford; if you're not failing\noccasionally you're probably being too conservative. Seek out the\nbest colleagues. Develop good taste and learn from the best examples.\nBe honest, especially with yourself.",
        "start_char_idx": 10729,
        "end_char_idx": 15099,
        "text_template": "{metadata_str}\n\n{content}",
        "metadata_template": "{key}: {value}",
        "metadata_seperator": "\n",
        "class_name": "TextNode"
      },
      "__type__": "1"
    },
    "1f34dba1-dd49-4236-9a20-52b3f5aebc58": {
      "__data__": {
        "id_": "1f34dba1-dd49-4236-9a20-52b3f5aebc58",
        "embedding": null,
        "metadata": {
          "source": "https://paulgraham.com/superlinear.html",
          "title": "Superlinear Returns",
          "language": null
        },
        "excluded_embed_metadata_keys": [],
        "excluded_llm_metadata_keys": [],
        "relationships": {
          "1": {
            "node_id": "8a578ba5-7a1b-4646-8ff1-c4c25a415168",
            "node_type": "4",
            "metadata": {
              "source": "https://paulgraham.com/superlinear.html",
              "title": "Superlinear Returns",
              "language": null
            },
            "hash": "80e69484839f31f89df52636a316e0b2e4e70f885b570797dcf19eedfaca54e0",
            "class_name": "RelatedNodeInfo"
          },
          "2": {
            "node_id": "ec0c7d54-5759-4549-8478-0a44e33f5672",
            "node_type": "1",
            "metadata": {
              "source": "https://paulgraham.com/superlinear.html",
              "title": "Superlinear Returns",
              "language": null
            },
            "hash": "49a95884dff7dd18d6d27e6a8ae969b5d87342e9f9e44d2a65a78e672a0ba8d8",
            "class_name": "RelatedNodeInfo"
          },
          "3": {
            "node_id": "a312476c-d788-45dc-a718-4fd3c06c9bcb",
            "node_type": "1",
            "metadata": {},
            "hash": "a1f3a9de2c60cc44fc417d29bc6ae0be6baf363f1850e099a359f5c29bfdb6b4",
            "class_name": "RelatedNodeInfo"
          }
        },
        "text": "It's not just a matter of trying hard. I'm going to take a shot\ngiving a recipe in one paragraph.Choose work you have a natural aptitude for and a deep interest in.\nDevelop a habit of working on your own projects; it doesn't matter\nwhat they are so long as you find them excitingly ambitious. Work\nas hard as you can without burning out, and this will eventually\nbring you to one of the frontiers of knowledge. These look smooth\nfrom a distance, but up close they're full of gaps. Notice and\nexplore such gaps, and if you're lucky one will expand into a whole\nnew field. Take as much risk as you can afford; if you're not failing\noccasionally you're probably being too conservative. Seek out the\nbest colleagues. Develop good taste and learn from the best examples.\nBe honest, especially with yourself. Exercise and eat and sleep\nwell and avoid the more dangerous drugs. When in doubt, follow your\ncuriosity. It never lies, and it knows more than you do about what's\nworth paying attention to.\n[10]And there is of course one other thing you need: to be lucky. Luck\nis always a factor, but it's even more of a factor when you're\nworking on your own rather than as part of an organization. And\nthough there are some valid aphorisms about luck being where\npreparedness meets opportunity and so on, there's also a component\nof true chance that you can't do anything about. The solution is\nto take multiple shots. Which is another reason to start taking\nrisks early.\nThe best example of a field with superlinear returns is probably\nscience. It has exponential growth, in the form of learning, combined\nwith thresholds at the extreme edge of performance \u2014 literally at\nthe limits of knowledge.The result has been a level of inequality in scientific discovery\nthat makes the wealth inequality of even the most stratified societies\nseem mild by comparison. Newton's discoveries were arguably greater\nthan all his contemporaries' combined.\n[11]This point may seem obvious, but it might be just as well to spell\nit out. Superlinear returns imply inequality. The steeper the return\ncurve, the greater the variation in outcomes.In fact, the correlation between superlinear returns and inequality\nis so strong that it yields another heuristic for finding work of\nthis type: look for fields where a few big winners outperform\neveryone else. A kind of work where everyone does about the same\nis unlikely to be one with superlinear returns.What are fields where a few big winners outperform everyone else?\nHere are some obvious ones: sports, politics, art, music, acting,\ndirecting, writing, math, science, starting companies, and investing.\nIn sports the phenomenon is due to externally imposed thresholds;\nyou only need to be a few percent faster to win every race. In\npolitics, power grows much as it did in the days of emperors. And\nin some of the other fields (including politics) success is driven\nlargely by fame, which has its own source of superlinear growth.\nBut when we exclude sports and politics and the effects of fame, a\nremarkable pattern emerges: the remaining list is exactly the same\nas the list of fields where you have to be independent-minded to\nsucceed \u2014 where your ideas have to be not just correct, but novel\nas well.\n[12]This is obviously the case in science. You can't publish papers\nsaying things that other people have already said. But it's just\nas true in investing, for example. It's only useful to believe that\na company will do well if most other investors don't; if everyone\nelse thinks the company will do well, then its stock price will\nalready reflect that, and there's no room to make money.What else can we learn from these fields? In all of them you have\nto put in the initial effort. Superlinear returns seem small at\nfirst. At this rate, you find yourself thinking, I'll never get\nanywhere. But because the reward curve rises so steeply at the far\nend, it's worth taking extraordinary measures to get there.In the startup world, the name for this principle is \"do things\nthat don't scale.\" If you pay a ridiculous amount of attention to\nyour tiny initial set of customers, ideally you'll kick off exponential\ngrowth by word of mouth. But this same principle applies to anything\nthat grows exponentially. Learning, for example. When you first\nstart learning something, you feel lost.",
        "start_char_idx": 14297,
        "end_char_idx": 18606,
        "text_template": "{metadata_str}\n\n{content}",
        "metadata_template": "{key}: {value}",
        "metadata_seperator": "\n",
        "class_name": "TextNode"
      },
      "__type__": "1"
    },
    "a312476c-d788-45dc-a718-4fd3c06c9bcb": {
      "__data__": {
        "id_": "a312476c-d788-45dc-a718-4fd3c06c9bcb",
        "embedding": null,
        "metadata": {
          "source": "https://paulgraham.com/superlinear.html",
          "title": "Superlinear Returns",
          "language": null
        },
        "excluded_embed_metadata_keys": [],
        "excluded_llm_metadata_keys": [],
        "relationships": {
          "1": {
            "node_id": "8a578ba5-7a1b-4646-8ff1-c4c25a415168",
            "node_type": "4",
            "metadata": {
              "source": "https://paulgraham.com/superlinear.html",
              "title": "Superlinear Returns",
              "language": null
            },
            "hash": "80e69484839f31f89df52636a316e0b2e4e70f885b570797dcf19eedfaca54e0",
            "class_name": "RelatedNodeInfo"
          },
          "2": {
            "node_id": "1f34dba1-dd49-4236-9a20-52b3f5aebc58",
            "node_type": "1",
            "metadata": {
              "source": "https://paulgraham.com/superlinear.html",
              "title": "Superlinear Returns",
              "language": null
            },
            "hash": "b3de6ac09982e0290ab28b06bc2759caa707b85bee5ac6f6f232d20495a7ba58",
            "class_name": "RelatedNodeInfo"
          },
          "3": {
            "node_id": "b63c30d5-23dc-4a14-accb-b352fb5e882a",
            "node_type": "1",
            "metadata": {},
            "hash": "6e576eab381b390c1065f2d44e4d5a4ef580c918d33fad1927712fce4497671d",
            "class_name": "RelatedNodeInfo"
          }
        },
        "text": "In all of them you have\nto put in the initial effort. Superlinear returns seem small at\nfirst. At this rate, you find yourself thinking, I'll never get\nanywhere. But because the reward curve rises so steeply at the far\nend, it's worth taking extraordinary measures to get there.In the startup world, the name for this principle is \"do things\nthat don't scale.\" If you pay a ridiculous amount of attention to\nyour tiny initial set of customers, ideally you'll kick off exponential\ngrowth by word of mouth. But this same principle applies to anything\nthat grows exponentially. Learning, for example. When you first\nstart learning something, you feel lost. But it's worth making the\ninitial effort to get a toehold, because the more you learn, the\neasier it will get.There's another more subtle lesson in the list of fields with\nsuperlinear returns: not to equate work with a job. For most of the\n20th century the two were identical for nearly everyone, and as a\nresult we've inherited a custom that equates productivity with\nhaving a job. Even now to most people the phrase \"your work\" means\ntheir job. But to a writer or artist or scientist it means whatever\nthey're currently studying or creating. For someone like that, their\nwork is something they carry with them from job to job, if they\nhave jobs at all. It may be done for an employer, but it's part of\ntheir portfolio.\nIt's an intimidating prospect to enter a field where a few big\nwinners outperform everyone else. Some people do this deliberately,\nbut you don't need to. If you have sufficient natural ability and\nyou follow your curiosity sufficiently far, you'll end up in one.\nYour curiosity won't let you be interested in boring questions, and\ninteresting questions tend to create fields with superlinear returns\nif they're not already part of one.The territory of superlinear returns is by no means static. Indeed,\nthe most extreme returns come from expanding it. So while both\nambition and curiosity can get you into this territory, curiosity\nmay be the more powerful of the two. Ambition tends to make you\nclimb existing peaks, but if you stick close enough to an interesting\nenough question, it may grow into a mountain beneath you.NotesThere's a limit to how sharply you can distinguish between effort,\nperformance, and return, because they're not sharply distinguished\nin fact. What counts as return to one person might be performance\nto another. But though the borders of these concepts are blurry,\nthey're not meaningless. I've tried to write about them as precisely\nas I could without crossing into error.[1]\nEvolution itself is probably the most pervasive example of\nsuperlinear returns for performance. But this is hard for us to\nempathize with because we're not the recipients; we're the returns.[2]\nKnowledge did of course have a practical effect before the\nIndustrial Revolution. The development of agriculture changed human\nlife completely. But this kind of change was the result of broad,\ngradual improvements in technique, not the discoveries of a few\nexceptionally learned people.[3]\nIt's not mathematically correct to describe a step function as\nsuperlinear, but a step function starting from zero works like a\nsuperlinear function when it describes the reward curve for effort\nby a rational actor. If it starts at zero then the part before the\nstep is below any linearly increasing return, and the part after\nthe step must be above the necessary return at that point or no one\nwould bother.[4]\nSeeking competition could be a good heuristic in the sense that\nsome people find it motivating. It's also somewhat of a guide to\npromising problems, because it's a sign that other people find them\npromising. But it's a very imperfect sign: often there's a clamoring\ncrowd chasing some problem, and they all end up being trumped by\nsomeone quietly working on another one.[5]\nNot always, though. You have to be careful with this rule. When\nsomething is popular despite being mediocre, there's often a hidden\nreason why. Perhaps monopoly or regulation make it hard to compete.\nPerhaps customers have bad taste or have broken procedures for\ndeciding what to buy. There are huge swathes of mediocre things\nthat exist for such reasons.[6]\nIn my twenties I wanted to be an artist \nand even went to art\nschool to study painting.",
        "start_char_idx": 17953,
        "end_char_idx": 22249,
        "text_template": "{metadata_str}\n\n{content}",
        "metadata_template": "{key}: {value}",
        "metadata_seperator": "\n",
        "class_name": "TextNode"
      },
      "__type__": "1"
    },
    "b63c30d5-23dc-4a14-accb-b352fb5e882a": {
      "__data__": {
        "id_": "b63c30d5-23dc-4a14-accb-b352fb5e882a",
        "embedding": null,
        "metadata": {
          "source": "https://paulgraham.com/superlinear.html",
          "title": "Superlinear Returns",
          "language": null
        },
        "excluded_embed_metadata_keys": [],
        "excluded_llm_metadata_keys": [],
        "relationships": {
          "1": {
            "node_id": "8a578ba5-7a1b-4646-8ff1-c4c25a415168",
            "node_type": "4",
            "metadata": {
              "source": "https://paulgraham.com/superlinear.html",
              "title": "Superlinear Returns",
              "language": null
            },
            "hash": "80e69484839f31f89df52636a316e0b2e4e70f885b570797dcf19eedfaca54e0",
            "class_name": "RelatedNodeInfo"
          },
          "2": {
            "node_id": "a312476c-d788-45dc-a718-4fd3c06c9bcb",
            "node_type": "1",
            "metadata": {
              "source": "https://paulgraham.com/superlinear.html",
              "title": "Superlinear Returns",
              "language": null
            },
            "hash": "cdacb0ccea8452c67e8f665fc3d6fb9b66788fb67b671d7d74d66dadfc5fe170",
            "class_name": "RelatedNodeInfo"
          },
          "3": {
            "node_id": "576d317a-7e3b-4d0b-96ca-b5b4b3f374ad",
            "node_type": "1",
            "metadata": {},
            "hash": "50ead95e57de23a3793eb3022aeb363b980e3fea844f30cb428877d3e7295c5c",
            "class_name": "RelatedNodeInfo"
          }
        },
        "text": "[4]\nSeeking competition could be a good heuristic in the sense that\nsome people find it motivating. It's also somewhat of a guide to\npromising problems, because it's a sign that other people find them\npromising. But it's a very imperfect sign: often there's a clamoring\ncrowd chasing some problem, and they all end up being trumped by\nsomeone quietly working on another one.[5]\nNot always, though. You have to be careful with this rule. When\nsomething is popular despite being mediocre, there's often a hidden\nreason why. Perhaps monopoly or regulation make it hard to compete.\nPerhaps customers have bad taste or have broken procedures for\ndeciding what to buy. There are huge swathes of mediocre things\nthat exist for such reasons.[6]\nIn my twenties I wanted to be an artist \nand even went to art\nschool to study painting. Mostly because I liked art, but a nontrivial\npart of my motivation came from the fact that artists seemed least\nat the mercy of organizations.[7]\nIn principle everyone is getting superlinear returns. Learning\ncompounds, and everyone learns in the course of their life. But in\npractice few push this kind of everyday learning to the point where\nthe return curve gets really steep.[8]\nIt's unclear exactly what advocates of \"equity\" mean by it.\nThey seem to disagree among themselves. But whatever they mean is\nprobably at odds with a world in which institutions have less power\nto control outcomes, and a handful of outliers do much better than\neveryone else.It may seem like bad luck for this concept that it arose at just\nthe moment when the world was shifting in the opposite direction,\nbut I don't think this was a coincidence. I think one reason it\narose now is because its adherents feel threatened by rapidly\nincreasing variation in performance.[9]\nCorollary: Parents who pressure their kids to work on something\nprestigious, like medicine, even though they have no interest in\nit, will be hosing them even more than they have in the past.[10]\nThe original version of this paragraph was the first draft of\n\"How to Do Great Work.\" \nAs soon as I wrote it I realized it was a more important topic than superlinear\nreturns, so I paused the present essay to expand this paragraph into its\nown. Practically nothing remains of the original version, because\nafter I finished \"How to Do Great Work\" I rewrote it based on that.[11]\nBefore the Industrial Revolution, people who got rich usually\ndid it like emperors: capturing some resource made them more powerful\nand enabled them to capture more. Now it can be done like a scientist,\nby discovering or building something uniquely valuable. Most people\nwho get rich use a mix of the old and the new ways, but in the most\nadvanced economies the ratio has shifted dramatically toward discovery\njust in the last half century.[12]\nIt's not surprising that conventional-minded people would\ndislike inequality if independent-mindedness is one of the biggest\ndrivers of it. But it's not simply that they don't want anyone to\nhave what they can't. The conventional-minded literally can't imagine\nwhat it's like to have novel ideas. So the whole phenomenon of great\nvariation in performance seems unnatural to them, and when they\nencounter it they assume it must be due to cheating or to some\nmalign external influence.Thanks \nto Trevor Blackwell, Patrick Collison, Tyler Cowen,\nJessica Livingston, Harj Taggar, and Garry Tan for reading drafts\nof this.",
        "start_char_idx": 21425,
        "end_char_idx": 24840,
        "text_template": "{metadata_str}\n\n{content}",
        "metadata_template": "{key}: {value}",
        "metadata_seperator": "\n",
        "class_name": "TextNode"
      },
      "__type__": "1"
    },
    "576d317a-7e3b-4d0b-96ca-b5b4b3f374ad": {
      "__data__": {
        "id_": "576d317a-7e3b-4d0b-96ca-b5b4b3f374ad",
        "embedding": null,
        "metadata": {
          "source": "https://paulgraham.com/worked.html",
          "title": "What I Worked On",
          "language": null
        },
        "excluded_embed_metadata_keys": [],
        "excluded_llm_metadata_keys": [],
        "relationships": {
          "1": {
            "node_id": "775a1596-77f5-4642-80af-2f9ead7f2134",
            "node_type": "4",
            "metadata": {
              "source": "https://paulgraham.com/worked.html",
              "title": "What I Worked On",
              "language": null
            },
            "hash": "e6f0c014baa56ff32c4861f00fbfca70286719ce1bee1272e3af5f423a7217ff",
            "class_name": "RelatedNodeInfo"
          },
          "2": {
            "node_id": "b63c30d5-23dc-4a14-accb-b352fb5e882a",
            "node_type": "1",
            "metadata": {
              "source": "https://paulgraham.com/superlinear.html",
              "title": "Superlinear Returns",
              "language": null
            },
            "hash": "f43c5fe04052751a739787313266b30d123ecc592ae37b8a5b1d173784177a9b",
            "class_name": "RelatedNodeInfo"
          },
          "3": {
            "node_id": "5440e1cc-02d6-4016-970d-31bdd2b57d07",
            "node_type": "1",
            "metadata": {},
            "hash": "468b1703896183eb92368cfd2ebc260beb3524c20c57ee7257caea3e91a60045",
            "class_name": "RelatedNodeInfo"
          }
        },
        "text": "What I Worked On\n\nFebruary 2021Before college the two main things I worked on, outside of school,\nwere writing and programming. I didn't write essays. I wrote what\nbeginning writers were supposed to write then, and probably still\nare: short stories. My stories were awful. They had hardly any plot,\njust characters with strong feelings, which I imagined made them\ndeep.The first programs I tried writing were on the IBM 1401 that our\nschool district used for what was then called \"data processing.\"\nThis was in 9th grade, so I was 13 or 14. The school district's\n1401 happened to be in the basement of our junior high school, and\nmy friend Rich Draves and I got permission to use it. It was like\na mini Bond villain's lair down there, with all these alien-looking\nmachines \u0097 CPU, disk drives, printer, card reader \u0097 sitting up\non a raised floor under bright fluorescent lights.The language we used was an early version of Fortran. You had to\ntype programs on punch cards, then stack them in the card reader\nand press a button to load the program into memory and run it. The\nresult would ordinarily be to print something on the spectacularly\nloud printer.I was puzzled by the 1401. I couldn't figure out what to do with\nit. And in retrospect there's not much I could have done with it.\nThe only form of input to programs was data stored on punched cards,\nand I didn't have any data stored on punched cards. The only other\noption was to do things that didn't rely on any input, like calculate\napproximations of pi, but I didn't know enough math to do anything\ninteresting of that type. So I'm not surprised I can't remember any\nprograms I wrote, because they can't have done much. My clearest\nmemory is of the moment I learned it was possible for programs not\nto terminate, when one of mine didn't. On a machine without\ntime-sharing, this was a social as well as a technical error, as\nthe data center manager's expression made clear.With microcomputers, everything changed. Now you could have a\ncomputer sitting right in front of you, on a desk, that could respond\nto your keystrokes as it was running instead of just churning through\na stack of punch cards and then stopping. \n[1]The first of my friends to get a microcomputer built it himself.\nIt was sold as a kit by Heathkit. I remember vividly how impressed\nand envious I felt watching him sitting in front of it, typing\nprograms right into the computer.Computers were expensive in those days and it took me years of\nnagging before I convinced my father to buy one, a TRS-80, in about\n1980. The gold standard then was the Apple II, but a TRS-80 was\ngood enough. This was when I really started programming. I wrote\nsimple games, a program to predict how high my model rockets would\nfly, and a word processor that my father used to write at least one\nbook. There was only room in memory for about 2 pages of text, so\nhe'd write 2 pages at a time and then print them out, but it was a\nlot better than a typewriter.Though I liked programming, I didn't plan to study it in college.\nIn college I was going to study philosophy, which sounded much more\npowerful. It seemed, to my naive high school self, to be the study\nof the ultimate truths, compared to which the things studied in\nother fields would be mere domain knowledge. What I discovered when\nI got to college was that the other fields took up so much of the\nspace of ideas that there wasn't much left for these supposed\nultimate truths. All that seemed left for philosophy were edge cases\nthat people in other fields felt could safely be ignored.I couldn't have put this into words when I was 18. All I knew at\nthe time was that I kept taking philosophy courses and they kept\nbeing boring. So I decided to switch to AI.AI was in the air in the mid 1980s, but there were two things\nespecially that made me want to work on it: a novel by Heinlein\ncalled The Moon is a Harsh Mistress, which featured an intelligent\ncomputer called Mike, and a PBS documentary that showed Terry\nWinograd using SHRDLU.",
        "start_char_idx": 0,
        "end_char_idx": 4001,
        "text_template": "{metadata_str}\n\n{content}",
        "metadata_template": "{key}: {value}",
        "metadata_seperator": "\n",
        "class_name": "TextNode"
      },
      "__type__": "1"
    },
    "5440e1cc-02d6-4016-970d-31bdd2b57d07": {
      "__data__": {
        "id_": "5440e1cc-02d6-4016-970d-31bdd2b57d07",
        "embedding": null,
        "metadata": {
          "source": "https://paulgraham.com/worked.html",
          "title": "What I Worked On",
          "language": null
        },
        "excluded_embed_metadata_keys": [],
        "excluded_llm_metadata_keys": [],
        "relationships": {
          "1": {
            "node_id": "775a1596-77f5-4642-80af-2f9ead7f2134",
            "node_type": "4",
            "metadata": {
              "source": "https://paulgraham.com/worked.html",
              "title": "What I Worked On",
              "language": null
            },
            "hash": "e6f0c014baa56ff32c4861f00fbfca70286719ce1bee1272e3af5f423a7217ff",
            "class_name": "RelatedNodeInfo"
          },
          "2": {
            "node_id": "576d317a-7e3b-4d0b-96ca-b5b4b3f374ad",
            "node_type": "1",
            "metadata": {
              "source": "https://paulgraham.com/worked.html",
              "title": "What I Worked On",
              "language": null
            },
            "hash": "db92dfb3c8f5b7acedaaa4c5916bbb0bddca58b95ecb544a3fe190552ca8fb83",
            "class_name": "RelatedNodeInfo"
          },
          "3": {
            "node_id": "3ecb3c78-b5e8-4528-a177-8bdfa9e6ccd3",
            "node_type": "1",
            "metadata": {},
            "hash": "3207d285a4666b686a51c3f408521a4bca864746efd37dc042c1dea8e2964c36",
            "class_name": "RelatedNodeInfo"
          }
        },
        "text": "What I discovered when\nI got to college was that the other fields took up so much of the\nspace of ideas that there wasn't much left for these supposed\nultimate truths. All that seemed left for philosophy were edge cases\nthat people in other fields felt could safely be ignored.I couldn't have put this into words when I was 18. All I knew at\nthe time was that I kept taking philosophy courses and they kept\nbeing boring. So I decided to switch to AI.AI was in the air in the mid 1980s, but there were two things\nespecially that made me want to work on it: a novel by Heinlein\ncalled The Moon is a Harsh Mistress, which featured an intelligent\ncomputer called Mike, and a PBS documentary that showed Terry\nWinograd using SHRDLU. I haven't tried rereading The Moon is a Harsh\nMistress, so I don't know how well it has aged, but when I read it\nI was drawn entirely into its world. It seemed only a matter of\ntime before we'd have Mike, and when I saw Winograd using SHRDLU,\nit seemed like that time would be a few years at most. All you had\nto do was teach SHRDLU more words.There weren't any classes in AI at Cornell then, not even graduate\nclasses, so I started trying to teach myself. Which meant learning\nLisp, since in those days Lisp was regarded as the language of AI.\nThe commonly used programming languages then were pretty primitive,\nand programmers' ideas correspondingly so. The default language at\nCornell was a Pascal-like language called PL/I, and the situation\nwas similar elsewhere. Learning Lisp expanded my concept of a program\nso fast that it was years before I started to have a sense of where\nthe new limits were. This was more like it; this was what I had\nexpected college to do. It wasn't happening in a class, like it was\nsupposed to, but that was ok. For the next couple years I was on a\nroll. I knew what I was going to do.For my undergraduate thesis, I reverse-engineered SHRDLU. My God\ndid I love working on that program. It was a pleasing bit of code,\nbut what made it even more exciting was my belief \u0097 hard to imagine\nnow, but not unique in 1985 \u0097 that it was already climbing the\nlower slopes of intelligence.I had gotten into a program at Cornell that didn't make you choose\na major. You could take whatever classes you liked, and choose\nwhatever you liked to put on your degree. I of course chose \"Artificial\nIntelligence.\" When I got the actual physical diploma, I was dismayed\nto find that the quotes had been included, which made them read as\nscare-quotes. At the time this bothered me, but now it seems amusingly\naccurate, for reasons I was about to discover.I applied to 3 grad schools: MIT and Yale, which were renowned for\nAI at the time, and Harvard, which I'd visited because Rich Draves\nwent there, and was also home to Bill Woods, who'd invented the\ntype of parser I used in my SHRDLU clone. Only Harvard accepted me,\nso that was where I went.I don't remember the moment it happened, or if there even was a\nspecific moment, but during the first year of grad school I realized\nthat AI, as practiced at the time, was a hoax. By which I mean the\nsort of AI in which a program that's told \"the dog is sitting on\nthe chair\" translates this into some formal representation and adds\nit to the list of things it knows.What these programs really showed was that there's a subset of\nnatural language that's a formal language. But a very proper subset.\nIt was clear that there was an unbridgeable gap between what they\ncould do and actually understanding natural language. It was not,\nin fact, simply a matter of teaching SHRDLU more words. That whole\nway of doing AI, with explicit data structures representing concepts,\nwas not going to work. Its brokenness did, as so often happens,\ngenerate a lot of opportunities to write papers about various\nband-aids that could be applied to it, but it was never going to\nget us Mike.So I looked around to see what I could salvage from the wreckage\nof my plans, and there was Lisp. I knew from experience that Lisp\nwas interesting for its own sake and not just for its association\nwith AI, even though that was the main reason people cared about\nit at the time. So I decided to focus on Lisp.",
        "start_char_idx": 3274,
        "end_char_idx": 7439,
        "text_template": "{metadata_str}\n\n{content}",
        "metadata_template": "{key}: {value}",
        "metadata_seperator": "\n",
        "class_name": "TextNode"
      },
      "__type__": "1"
    },
    "3ecb3c78-b5e8-4528-a177-8bdfa9e6ccd3": {
      "__data__": {
        "id_": "3ecb3c78-b5e8-4528-a177-8bdfa9e6ccd3",
        "embedding": null,
        "metadata": {
          "source": "https://paulgraham.com/worked.html",
          "title": "What I Worked On",
          "language": null
        },
        "excluded_embed_metadata_keys": [],
        "excluded_llm_metadata_keys": [],
        "relationships": {
          "1": {
            "node_id": "775a1596-77f5-4642-80af-2f9ead7f2134",
            "node_type": "4",
            "metadata": {
              "source": "https://paulgraham.com/worked.html",
              "title": "What I Worked On",
              "language": null
            },
            "hash": "e6f0c014baa56ff32c4861f00fbfca70286719ce1bee1272e3af5f423a7217ff",
            "class_name": "RelatedNodeInfo"
          },
          "2": {
            "node_id": "5440e1cc-02d6-4016-970d-31bdd2b57d07",
            "node_type": "1",
            "metadata": {
              "source": "https://paulgraham.com/worked.html",
              "title": "What I Worked On",
              "language": null
            },
            "hash": "af5ef248d674438176274f51fd28cd7c6530a0081ab026b63a7102ead8d56d1c",
            "class_name": "RelatedNodeInfo"
          },
          "3": {
            "node_id": "dba834ca-dab2-4831-b2d0-8471a3d060e4",
            "node_type": "1",
            "metadata": {},
            "hash": "2628ddd270e11ff7a3ba4284c3dbbd102ce9da0acdf0a4ffb88b785ebbfe9766",
            "class_name": "RelatedNodeInfo"
          }
        },
        "text": "But a very proper subset.\nIt was clear that there was an unbridgeable gap between what they\ncould do and actually understanding natural language. It was not,\nin fact, simply a matter of teaching SHRDLU more words. That whole\nway of doing AI, with explicit data structures representing concepts,\nwas not going to work. Its brokenness did, as so often happens,\ngenerate a lot of opportunities to write papers about various\nband-aids that could be applied to it, but it was never going to\nget us Mike.So I looked around to see what I could salvage from the wreckage\nof my plans, and there was Lisp. I knew from experience that Lisp\nwas interesting for its own sake and not just for its association\nwith AI, even though that was the main reason people cared about\nit at the time. So I decided to focus on Lisp. In fact, I decided\nto write a book about Lisp hacking. It's scary to think how little\nI knew about Lisp hacking when I started writing that book. But\nthere's nothing like writing a book about something to help you\nlearn it. The book, On Lisp, wasn't published till 1993, but I wrote\nmuch of it in grad school.Computer Science is an uneasy alliance between two halves, theory\nand systems. The theory people prove things, and the systems people\nbuild things. I wanted to build things. I had plenty of respect for\ntheory \u0097 indeed, a sneaking suspicion that it was the more admirable\nof the two halves \u0097 but building things seemed so much more exciting.The problem with systems work, though, was that it didn't last.\nAny program you wrote today, no matter how good, would be obsolete\nin a couple decades at best. People might mention your software in\nfootnotes, but no one would actually use it. And indeed, it would\nseem very feeble work. Only people with a sense of the history of\nthe field would even realize that, in its time, it had been good.There were some surplus Xerox Dandelions floating around the computer\nlab at one point. Anyone who wanted one to play around with could\nhave one. I was briefly tempted, but they were so slow by present\nstandards; what was the point? No one else wanted one either, so\noff they went. That was what happened to systems work.I wanted not just to build things, but to build things that would\nlast.In this dissatisfied state I went in 1988 to visit Rich Draves at\nCMU, where he was in grad school. One day I went to visit the\nCarnegie Institute, where I'd spent a lot of time as a kid. While\nlooking at a painting there I realized something that might seem\nobvious, but was a big surprise to me. There, right on the wall,\nwas something you could make that would last. Paintings didn't\nbecome obsolete. Some of the best ones were hundreds of years old.And moreover this was something you could make a living doing. Not\nas easily as you could by writing software, of course, but I thought\nif you were really industrious and lived really cheaply, it had to\nbe possible to make enough to survive. And as an artist you could\nbe truly independent. You wouldn't have a boss, or even need to get\nresearch funding.I had always liked looking at paintings. Could I make them? I had\nno idea. I'd never imagined it was even possible. I knew intellectually\nthat people made art \u0097 that it didn't just appear spontaneously\n\u0097 but it was as if the people who made it were a different species.\nThey either lived long ago or were mysterious geniuses doing strange\nthings in profiles in Life magazine. The idea of actually being\nable to make art, to put that verb before that noun, seemed almost\nmiraculous.That fall I started taking art classes at Harvard. Grad students\ncould take classes in any department, and my advisor, Tom Cheatham,\nwas very easy going. If he even knew about the strange classes I\nwas taking, he never said anything.So now I was in a PhD program in computer science, yet planning to\nbe an artist, yet also genuinely in love with Lisp hacking and\nworking away at On Lisp. In other words, like many a grad student,\nI was working energetically on multiple projects that were not my\nthesis.I didn't see a way out of this situation. I didn't want to drop out\nof grad school, but how else was I going to get out?",
        "start_char_idx": 6633,
        "end_char_idx": 10787,
        "text_template": "{metadata_str}\n\n{content}",
        "metadata_template": "{key}: {value}",
        "metadata_seperator": "\n",
        "class_name": "TextNode"
      },
      "__type__": "1"
    },
    "dba834ca-dab2-4831-b2d0-8471a3d060e4": {
      "__data__": {
        "id_": "dba834ca-dab2-4831-b2d0-8471a3d060e4",
        "embedding": null,
        "metadata": {
          "source": "https://paulgraham.com/worked.html",
          "title": "What I Worked On",
          "language": null
        },
        "excluded_embed_metadata_keys": [],
        "excluded_llm_metadata_keys": [],
        "relationships": {
          "1": {
            "node_id": "775a1596-77f5-4642-80af-2f9ead7f2134",
            "node_type": "4",
            "metadata": {
              "source": "https://paulgraham.com/worked.html",
              "title": "What I Worked On",
              "language": null
            },
            "hash": "e6f0c014baa56ff32c4861f00fbfca70286719ce1bee1272e3af5f423a7217ff",
            "class_name": "RelatedNodeInfo"
          },
          "2": {
            "node_id": "3ecb3c78-b5e8-4528-a177-8bdfa9e6ccd3",
            "node_type": "1",
            "metadata": {
              "source": "https://paulgraham.com/worked.html",
              "title": "What I Worked On",
              "language": null
            },
            "hash": "decc2c82b4640aaa33e2c4823f365c0ef94d07555128911b666091fb21d4e2f2",
            "class_name": "RelatedNodeInfo"
          },
          "3": {
            "node_id": "9da843f8-6e9f-4a2e-8095-a1df76e3b247",
            "node_type": "1",
            "metadata": {},
            "hash": "8e9beda25ad8dfa00c81471a01d15f566c84775ebaa2b37235b7f66ef6f0a55e",
            "class_name": "RelatedNodeInfo"
          }
        },
        "text": "They either lived long ago or were mysterious geniuses doing strange\nthings in profiles in Life magazine. The idea of actually being\nable to make art, to put that verb before that noun, seemed almost\nmiraculous.That fall I started taking art classes at Harvard. Grad students\ncould take classes in any department, and my advisor, Tom Cheatham,\nwas very easy going. If he even knew about the strange classes I\nwas taking, he never said anything.So now I was in a PhD program in computer science, yet planning to\nbe an artist, yet also genuinely in love with Lisp hacking and\nworking away at On Lisp. In other words, like many a grad student,\nI was working energetically on multiple projects that were not my\nthesis.I didn't see a way out of this situation. I didn't want to drop out\nof grad school, but how else was I going to get out? I remember\nwhen my friend Robert Morris got kicked out of Cornell for writing\nthe internet worm of 1988, I was envious that he'd found such a\nspectacular way to get out of grad school.Then one day in April 1990 a crack appeared in the wall. I ran into\nprofessor Cheatham and he asked if I was far enough along to graduate\nthat June. I didn't have a word of my dissertation written, but in\nwhat must have been the quickest bit of thinking in my life, I\ndecided to take a shot at writing one in the 5 weeks or so that\nremained before the deadline, reusing parts of On Lisp where I\ncould, and I was able to respond, with no perceptible delay \"Yes,\nI think so. I'll give you something to read in a few days.\"I picked applications of continuations as the topic. In retrospect\nI should have written about macros and embedded languages. There's\na whole world there that's barely been explored. But all I wanted\nwas to get out of grad school, and my rapidly written dissertation\nsufficed, just barely.Meanwhile I was applying to art schools. I applied to two: RISD in\nthe US, and the Accademia di Belli Arti in Florence, which, because\nit was the oldest art school, I imagined would be good. RISD accepted\nme, and I never heard back from the Accademia, so off to Providence\nI went.I'd applied for the BFA program at RISD, which meant in effect that\nI had to go to college again. This was not as strange as it sounds,\nbecause I was only 25, and art schools are full of people of different\nages. RISD counted me as a transfer sophomore and said I had to do\nthe foundation that summer. The foundation means the classes that\neveryone has to take in fundamental subjects like drawing, color,\nand design.Toward the end of the summer I got a big surprise: a letter from\nthe Accademia, which had been delayed because they'd sent it to\nCambridge England instead of Cambridge Massachusetts, inviting me\nto take the entrance exam in Florence that fall. This was now only\nweeks away. My nice landlady let me leave my stuff in her attic. I\nhad some money saved from consulting work I'd done in grad school;\nthere was probably enough to last a year if I lived cheaply. Now\nall I had to do was learn Italian.Only stranieri (foreigners) had to take this entrance exam. In\nretrospect it may well have been a way of excluding them, because\nthere were so many stranieri attracted by the idea of studying\nart in Florence that the Italian students would otherwise have been\noutnumbered. I was in decent shape at painting and drawing from the\nRISD foundation that summer, but I still don't know how I managed\nto pass the written exam. I remember that I answered the essay\nquestion by writing about Cezanne, and that I cranked up the\nintellectual level as high as I could to make the most of my limited\nvocabulary. \n[2]I'm only up to age 25 and already there are such conspicuous patterns.\nHere I was, yet again about to attend some august institution in\nthe hopes of learning about some prestigious subject, and yet again\nabout to be disappointed. The students and faculty in the painting\ndepartment at the Accademia were the nicest people you could imagine,\nbut they had long since arrived at an arrangement whereby the\nstudents wouldn't require the faculty to teach anything, and in\nreturn the faculty wouldn't require the students to learn anything.",
        "start_char_idx": 9953,
        "end_char_idx": 14110,
        "text_template": "{metadata_str}\n\n{content}",
        "metadata_template": "{key}: {value}",
        "metadata_seperator": "\n",
        "class_name": "TextNode"
      },
      "__type__": "1"
    },
    "9da843f8-6e9f-4a2e-8095-a1df76e3b247": {
      "__data__": {
        "id_": "9da843f8-6e9f-4a2e-8095-a1df76e3b247",
        "embedding": null,
        "metadata": {
          "source": "https://paulgraham.com/worked.html",
          "title": "What I Worked On",
          "language": null
        },
        "excluded_embed_metadata_keys": [],
        "excluded_llm_metadata_keys": [],
        "relationships": {
          "1": {
            "node_id": "775a1596-77f5-4642-80af-2f9ead7f2134",
            "node_type": "4",
            "metadata": {
              "source": "https://paulgraham.com/worked.html",
              "title": "What I Worked On",
              "language": null
            },
            "hash": "e6f0c014baa56ff32c4861f00fbfca70286719ce1bee1272e3af5f423a7217ff",
            "class_name": "RelatedNodeInfo"
          },
          "2": {
            "node_id": "dba834ca-dab2-4831-b2d0-8471a3d060e4",
            "node_type": "1",
            "metadata": {
              "source": "https://paulgraham.com/worked.html",
              "title": "What I Worked On",
              "language": null
            },
            "hash": "8eb314c925eb3059ad1f0497aa654a264f5b4ed630a4c88f35fce951feadbbf5",
            "class_name": "RelatedNodeInfo"
          },
          "3": {
            "node_id": "d1ada899-0d70-4c31-9538-31cde12809ef",
            "node_type": "1",
            "metadata": {},
            "hash": "083d87061f63d0d5393b921fe59c1659679f6351b72f765f415b9e021f43f0a9",
            "class_name": "RelatedNodeInfo"
          }
        },
        "text": "I was in decent shape at painting and drawing from the\nRISD foundation that summer, but I still don't know how I managed\nto pass the written exam. I remember that I answered the essay\nquestion by writing about Cezanne, and that I cranked up the\nintellectual level as high as I could to make the most of my limited\nvocabulary. \n[2]I'm only up to age 25 and already there are such conspicuous patterns.\nHere I was, yet again about to attend some august institution in\nthe hopes of learning about some prestigious subject, and yet again\nabout to be disappointed. The students and faculty in the painting\ndepartment at the Accademia were the nicest people you could imagine,\nbut they had long since arrived at an arrangement whereby the\nstudents wouldn't require the faculty to teach anything, and in\nreturn the faculty wouldn't require the students to learn anything.\nAnd at the same time all involved would adhere outwardly to the\nconventions of a 19th century atelier. We actually had one of those\nlittle stoves, fed with kindling, that you see in 19th century\nstudio paintings, and a nude model sitting as close to it as possible\nwithout getting burned. Except hardly anyone else painted her besides\nme. The rest of the students spent their time chatting or occasionally\ntrying to imitate things they'd seen in American art magazines.Our model turned out to live just down the street from me. She made\na living from a combination of modelling and making fakes for a\nlocal antique dealer. She'd copy an obscure old painting out of a\nbook, and then he'd take the copy and maltreat it to make it look\nold. \n[3]While I was a student at the Accademia I started painting still\nlives in my bedroom at night. These paintings were tiny, because\nthe room was, and because I painted them on leftover scraps of\ncanvas, which was all I could afford at the time. Painting still\nlives is different from painting people, because the subject, as\nits name suggests, can't move. People can't sit for more than about\n15 minutes at a time, and when they do they don't sit very still.\nSo the traditional m.o. for painting people is to know how to paint\na generic person, which you then modify to match the specific person\nyou're painting. Whereas a still life you can, if you want, copy\npixel by pixel from what you're seeing. You don't want to stop\nthere, of course, or you get merely photographic accuracy, and what\nmakes a still life interesting is that it's been through a head.\nYou want to emphasize the visual cues that tell you, for example,\nthat the reason the color changes suddenly at a certain point is\nthat it's the edge of an object. By subtly emphasizing such things\nyou can make paintings that are more realistic than photographs not\njust in some metaphorical sense, but in the strict information-theoretic\nsense. \n[4]I liked painting still lives because I was curious about what I was\nseeing. In everyday life, we aren't consciously aware of much we're\nseeing. Most visual perception is handled by low-level processes\nthat merely tell your brain \"that's a water droplet\" without telling\nyou details like where the lightest and darkest points are, or\n\"that's a bush\" without telling you the shape and position of every\nleaf. This is a feature of brains, not a bug. In everyday life it\nwould be distracting to notice every leaf on every bush. But when\nyou have to paint something, you have to look more closely, and\nwhen you do there's a lot to see. You can still be noticing new\nthings after days of trying to paint something people usually take\nfor granted, just as you can  after\ndays of trying to write an essay about something people usually\ntake for granted.This is not the only way to paint. I'm not 100% sure it's even a\ngood way to paint. But it seemed a good enough bet to be worth\ntrying.Our teacher, professor Ulivi, was a nice guy. He could see I worked\nhard, and gave me a good grade, which he wrote down in a sort of\npassport each student had.",
        "start_char_idx": 13246,
        "end_char_idx": 17196,
        "text_template": "{metadata_str}\n\n{content}",
        "metadata_template": "{key}: {value}",
        "metadata_seperator": "\n",
        "class_name": "TextNode"
      },
      "__type__": "1"
    },
    "d1ada899-0d70-4c31-9538-31cde12809ef": {
      "__data__": {
        "id_": "d1ada899-0d70-4c31-9538-31cde12809ef",
        "embedding": null,
        "metadata": {
          "source": "https://paulgraham.com/worked.html",
          "title": "What I Worked On",
          "language": null
        },
        "excluded_embed_metadata_keys": [],
        "excluded_llm_metadata_keys": [],
        "relationships": {
          "1": {
            "node_id": "775a1596-77f5-4642-80af-2f9ead7f2134",
            "node_type": "4",
            "metadata": {
              "source": "https://paulgraham.com/worked.html",
              "title": "What I Worked On",
              "language": null
            },
            "hash": "e6f0c014baa56ff32c4861f00fbfca70286719ce1bee1272e3af5f423a7217ff",
            "class_name": "RelatedNodeInfo"
          },
          "2": {
            "node_id": "9da843f8-6e9f-4a2e-8095-a1df76e3b247",
            "node_type": "1",
            "metadata": {
              "source": "https://paulgraham.com/worked.html",
              "title": "What I Worked On",
              "language": null
            },
            "hash": "63d0c24a249533ad09ce575ab8ac7279843262617488d361fc5d8f75767f9a70",
            "class_name": "RelatedNodeInfo"
          },
          "3": {
            "node_id": "1703b6b8-8bb6-4a63-a246-c0dd35b45564",
            "node_type": "1",
            "metadata": {},
            "hash": "802c73d4cf7f5aa030230dbe7b42fed2bd6ffe2e048d14fb34e869b31e04cfaf",
            "class_name": "RelatedNodeInfo"
          }
        },
        "text": "This is a feature of brains, not a bug. In everyday life it\nwould be distracting to notice every leaf on every bush. But when\nyou have to paint something, you have to look more closely, and\nwhen you do there's a lot to see. You can still be noticing new\nthings after days of trying to paint something people usually take\nfor granted, just as you can  after\ndays of trying to write an essay about something people usually\ntake for granted.This is not the only way to paint. I'm not 100% sure it's even a\ngood way to paint. But it seemed a good enough bet to be worth\ntrying.Our teacher, professor Ulivi, was a nice guy. He could see I worked\nhard, and gave me a good grade, which he wrote down in a sort of\npassport each student had. But the Accademia wasn't teaching me\nanything except Italian, and my money was running out, so at the\nend of the first year I went back to the US.I wanted to go back to RISD, but I was now broke and RISD was very\nexpensive, so I decided to get a job for a year and then return to\nRISD the next fall. I got one at a company called Interleaf, which\nmade software for creating documents. You mean like Microsoft Word?\nExactly. That was how I learned that low end software tends to eat\nhigh end software. But Interleaf still had a few years to live yet.\n[5]Interleaf had done something pretty bold. Inspired by Emacs, they'd\nadded a scripting language, and even made the scripting language a\ndialect of Lisp. Now they wanted a Lisp hacker to write things in\nit. This was the closest thing I've had to a normal job, and I\nhereby apologize to my boss and coworkers, because I was a bad\nemployee. Their Lisp was the thinnest icing on a giant C cake, and\nsince I didn't know C and didn't want to learn it, I never understood\nmost of the software. Plus I was terribly irresponsible. This was\nback when a programming job meant showing up every day during certain\nworking hours. That seemed unnatural to me, and on this point the\nrest of the world is coming around to my way of thinking, but at\nthe time it caused a lot of friction. Toward the end of the year I\nspent much of my time surreptitiously working on On Lisp, which I\nhad by this time gotten a contract to publish.The good part was that I got paid huge amounts of money, especially\nby art student standards. In Florence, after paying my part of the\nrent, my budget for everything else had been $7 a day. Now I was\ngetting paid more than 4 times that every hour, even when I was\njust sitting in a meeting. By living cheaply I not only managed to\nsave enough to go back to RISD, but also paid off my college loans.I learned some useful things at Interleaf, though they were mostly\nabout what not to do. I learned that it's better for technology\ncompanies to be run by product people than sales people (though\nsales is a real skill and people who are good at it are really good\nat it), that it leads to bugs when code is edited by too many people,\nthat cheap office space is no bargain if it's depressing, that\nplanned meetings are inferior to corridor conversations, that big,\nbureaucratic customers are a dangerous source of money, and that\nthere's not much overlap between conventional office hours and the\noptimal time for hacking, or conventional offices and the optimal\nplace for it.But the most important thing I learned, and which I used in both\nViaweb and Y Combinator, is that the low end eats the high end:\nthat it's good to be the \"entry level\" option, even though that\nwill be less prestigious, because if you're not, someone else will\nbe, and will squash you against the ceiling. Which in turn means\nthat prestige is a danger sign.When I left to go back to RISD the next fall, I arranged to do\nfreelance work for the group that did projects for customers, and\nthis was how I survived for the next several years. When I came\nback to visit for a project later on, someone told me about a new\nthing called HTML, which was, as he described it, a derivative of\nSGML.",
        "start_char_idx": 16464,
        "end_char_idx": 20418,
        "text_template": "{metadata_str}\n\n{content}",
        "metadata_template": "{key}: {value}",
        "metadata_seperator": "\n",
        "class_name": "TextNode"
      },
      "__type__": "1"
    },
    "1703b6b8-8bb6-4a63-a246-c0dd35b45564": {
      "__data__": {
        "id_": "1703b6b8-8bb6-4a63-a246-c0dd35b45564",
        "embedding": null,
        "metadata": {
          "source": "https://paulgraham.com/worked.html",
          "title": "What I Worked On",
          "language": null
        },
        "excluded_embed_metadata_keys": [],
        "excluded_llm_metadata_keys": [],
        "relationships": {
          "1": {
            "node_id": "775a1596-77f5-4642-80af-2f9ead7f2134",
            "node_type": "4",
            "metadata": {
              "source": "https://paulgraham.com/worked.html",
              "title": "What I Worked On",
              "language": null
            },
            "hash": "e6f0c014baa56ff32c4861f00fbfca70286719ce1bee1272e3af5f423a7217ff",
            "class_name": "RelatedNodeInfo"
          },
          "2": {
            "node_id": "d1ada899-0d70-4c31-9538-31cde12809ef",
            "node_type": "1",
            "metadata": {
              "source": "https://paulgraham.com/worked.html",
              "title": "What I Worked On",
              "language": null
            },
            "hash": "e5f22226a9ae03391eaa15300d2690d776c93e337183b851456b223d0a21f116",
            "class_name": "RelatedNodeInfo"
          },
          "3": {
            "node_id": "46056be1-b47c-45cb-8c06-ea2e70c1ad06",
            "node_type": "1",
            "metadata": {},
            "hash": "05595780a37e8285054343b9a1e8f5edd1545f9c71803391a21d430f5c4a2e5a",
            "class_name": "RelatedNodeInfo"
          }
        },
        "text": "Which in turn means\nthat prestige is a danger sign.When I left to go back to RISD the next fall, I arranged to do\nfreelance work for the group that did projects for customers, and\nthis was how I survived for the next several years. When I came\nback to visit for a project later on, someone told me about a new\nthing called HTML, which was, as he described it, a derivative of\nSGML. Markup language enthusiasts were an occupational hazard at\nInterleaf and I ignored him, but this HTML thing later became a big\npart of my life.In the fall of 1992 I moved back to Providence to continue at RISD.\nThe foundation had merely been intro stuff, and the Accademia had\nbeen a (very civilized) joke. Now I was going to see what real art\nschool was like. But alas it was more like the Accademia than not.\nBetter organized, certainly, and a lot more expensive, but it was\nnow becoming clear that art school did not bear the same relationship\nto art that medical school bore to medicine. At least not the\npainting department. The textile department, which my next door\nneighbor belonged to, seemed to be pretty rigorous. No doubt\nillustration and architecture were too. But painting was post-rigorous.\nPainting students were supposed to express themselves, which to the\nmore worldly ones meant to try to cook up some sort of distinctive\nsignature style.A signature style is the visual equivalent of what in show business\nis known as a \"schtick\": something that immediately identifies the\nwork as yours and no one else's. For example, when you see a painting\nthat looks like a certain kind of cartoon, you know it's by Roy\nLichtenstein. So if you see a big painting of this type hanging in\nthe apartment of a hedge fund manager, you know he paid millions\nof dollars for it. That's not always why artists have a signature\nstyle, but it's usually why buyers pay a lot for such work.\n[6]There were plenty of earnest students too: kids who \"could draw\"\nin high school, and now had come to what was supposed to be the\nbest art school in the country, to learn to draw even better. They\ntended to be confused and demoralized by what they found at RISD,\nbut they kept going, because painting was what they did. I was not\none of the kids who could draw in high school, but at RISD I was\ndefinitely closer to their tribe than the tribe of signature style\nseekers.I learned a lot in the color class I took at RISD, but otherwise I\nwas basically teaching myself to paint, and I could do that for\nfree. So in 1993 I dropped out. I hung around Providence for a bit,\nand then my college friend Nancy Parmet did me a big favor. A\nrent-controlled apartment in a building her mother owned in New\nYork was becoming vacant. Did I want it? It wasn't much more than\nmy current place, and New York was supposed to be where the artists\nwere. So yes, I wanted it!\n[7]Asterix comics begin by zooming in on a tiny corner of Roman Gaul\nthat turns out not to be controlled by the Romans. You can do\nsomething similar on a map of New York City: if you zoom in on the\nUpper East Side, there's a tiny corner that's not rich, or at least\nwasn't in 1993. It's called Yorkville, and that was my new home.\nNow I was a New York artist \u0097 in the strictly technical sense of\nmaking paintings and living in New York.I was nervous about money, because I could sense that Interleaf was\non the way down. Freelance Lisp hacking work was very rare, and I\ndidn't want to have to program in another language, which in those\ndays would have meant C++ if I was lucky. So with my unerring nose\nfor financial opportunity, I decided to write another book on Lisp.\nThis would be a popular book, the sort of book that could be used\nas a textbook. I imagined myself living frugally off the royalties\nand spending all my time painting. (The painting on the cover of\nthis book, ANSI Common Lisp, is one that I painted around this\ntime.)The best thing about New York for me was the presence of Idelle and\nJulian Weber. Idelle Weber was a painter, one of the early\nphotorealists, and I'd taken her painting class at Harvard.",
        "start_char_idx": 20037,
        "end_char_idx": 24086,
        "text_template": "{metadata_str}\n\n{content}",
        "metadata_template": "{key}: {value}",
        "metadata_seperator": "\n",
        "class_name": "TextNode"
      },
      "__type__": "1"
    },
    "46056be1-b47c-45cb-8c06-ea2e70c1ad06": {
      "__data__": {
        "id_": "46056be1-b47c-45cb-8c06-ea2e70c1ad06",
        "embedding": null,
        "metadata": {
          "source": "https://paulgraham.com/worked.html",
          "title": "What I Worked On",
          "language": null
        },
        "excluded_embed_metadata_keys": [],
        "excluded_llm_metadata_keys": [],
        "relationships": {
          "1": {
            "node_id": "775a1596-77f5-4642-80af-2f9ead7f2134",
            "node_type": "4",
            "metadata": {
              "source": "https://paulgraham.com/worked.html",
              "title": "What I Worked On",
              "language": null
            },
            "hash": "e6f0c014baa56ff32c4861f00fbfca70286719ce1bee1272e3af5f423a7217ff",
            "class_name": "RelatedNodeInfo"
          },
          "2": {
            "node_id": "1703b6b8-8bb6-4a63-a246-c0dd35b45564",
            "node_type": "1",
            "metadata": {
              "source": "https://paulgraham.com/worked.html",
              "title": "What I Worked On",
              "language": null
            },
            "hash": "ebcdff8621c968528a3d7a7a7594753803a180e15ffa2ff4734563c14c3d3c4c",
            "class_name": "RelatedNodeInfo"
          },
          "3": {
            "node_id": "ce326ed6-39ba-4961-a1a9-8d9cfab591b2",
            "node_type": "1",
            "metadata": {},
            "hash": "6fe6c0d43b5a3a0988423ec56db464e89d566f43f97b3480111c8afd1f19396e",
            "class_name": "RelatedNodeInfo"
          }
        },
        "text": "Freelance Lisp hacking work was very rare, and I\ndidn't want to have to program in another language, which in those\ndays would have meant C++ if I was lucky. So with my unerring nose\nfor financial opportunity, I decided to write another book on Lisp.\nThis would be a popular book, the sort of book that could be used\nas a textbook. I imagined myself living frugally off the royalties\nand spending all my time painting. (The painting on the cover of\nthis book, ANSI Common Lisp, is one that I painted around this\ntime.)The best thing about New York for me was the presence of Idelle and\nJulian Weber. Idelle Weber was a painter, one of the early\nphotorealists, and I'd taken her painting class at Harvard. I've\nnever known a teacher more beloved by her students. Large numbers\nof former students kept in touch with her, including me. After I\nmoved to New York I became her de facto studio assistant.She liked to paint on big, square canvases, 4 to 5 feet on a side.\nOne day in late 1994 as I was stretching one of these monsters there\nwas something on the radio about a famous fund manager. He wasn't\nthat much older than me, and was super rich. The thought suddenly\noccurred to me: why don't I become rich? Then I'll be able to work\non whatever I want.Meanwhile I'd been hearing more and more about this new thing called\nthe World Wide Web. Robert Morris showed it to me when I visited\nhim in Cambridge, where he was now in grad school at Harvard. It\nseemed to me that the web would be a big deal. I'd seen what graphical\nuser interfaces had done for the popularity of microcomputers. It\nseemed like the web would do the same for the internet.If I wanted to get rich, here was the next train leaving the station.\nI was right about that part. What I got wrong was the idea. I decided\nwe should start a company to put art galleries online. I can't\nhonestly say, after reading so many Y Combinator applications, that\nthis was the worst startup idea ever, but it was up there. Art\ngalleries didn't want to be online, and still don't, not the fancy\nones. That's not how they sell. I wrote some software to generate\nweb sites for galleries, and Robert wrote some to resize images and\nset up an http server to serve the pages. Then we tried to sign up\ngalleries. To call this a difficult sale would be an understatement.\nIt was difficult to give away. A few galleries let us make sites\nfor them for free, but none paid us.Then some online stores started to appear, and I realized that\nexcept for the order buttons they were identical to the sites we'd\nbeen generating for galleries. This impressive-sounding thing called\nan \"internet storefront\" was something we already knew how to build.So in the summer of 1995, after I submitted the camera-ready copy\nof ANSI Common Lisp to the publishers, we started trying to write\nsoftware to build online stores. At first this was going to be\nnormal desktop software, which in those days meant Windows software.\nThat was an alarming prospect, because neither of us knew how to\nwrite Windows software or wanted to learn. We lived in the Unix\nworld. But we decided we'd at least try writing a prototype store\nbuilder on Unix. Robert wrote a shopping cart, and I wrote a new\nsite generator for stores \u0097 in Lisp, of course.We were working out of Robert's apartment in Cambridge. His roommate\nwas away for big chunks of time, during which I got to sleep in his\nroom. For some reason there was no bed frame or sheets, just a\nmattress on the floor. One morning as I was lying on this mattress\nI had an idea that made me sit up like a capital L. What if we ran\nthe software on the server, and let users control it by clicking\non links? Then we'd never have to write anything to run on users'\ncomputers. We could generate the sites on the same server we'd serve\nthem from. Users wouldn't need anything more than a browser.This kind of software, known as a web app, is common now, but at\nthe time it wasn't clear that it was even possible. To find out,\nwe decided to try making a version of our store builder that you\ncould control through the browser.",
        "start_char_idx": 23382,
        "end_char_idx": 27458,
        "text_template": "{metadata_str}\n\n{content}",
        "metadata_template": "{key}: {value}",
        "metadata_seperator": "\n",
        "class_name": "TextNode"
      },
      "__type__": "1"
    },
    "ce326ed6-39ba-4961-a1a9-8d9cfab591b2": {
      "__data__": {
        "id_": "ce326ed6-39ba-4961-a1a9-8d9cfab591b2",
        "embedding": null,
        "metadata": {
          "source": "https://paulgraham.com/worked.html",
          "title": "What I Worked On",
          "language": null
        },
        "excluded_embed_metadata_keys": [],
        "excluded_llm_metadata_keys": [],
        "relationships": {
          "1": {
            "node_id": "775a1596-77f5-4642-80af-2f9ead7f2134",
            "node_type": "4",
            "metadata": {
              "source": "https://paulgraham.com/worked.html",
              "title": "What I Worked On",
              "language": null
            },
            "hash": "e6f0c014baa56ff32c4861f00fbfca70286719ce1bee1272e3af5f423a7217ff",
            "class_name": "RelatedNodeInfo"
          },
          "2": {
            "node_id": "46056be1-b47c-45cb-8c06-ea2e70c1ad06",
            "node_type": "1",
            "metadata": {
              "source": "https://paulgraham.com/worked.html",
              "title": "What I Worked On",
              "language": null
            },
            "hash": "bdd14b7feb18b0fb26852544cc4de7e6a42f4734017797e7a8b1876bd4b337d6",
            "class_name": "RelatedNodeInfo"
          },
          "3": {
            "node_id": "d9703c2d-1591-46fa-bccb-84dd94f48531",
            "node_type": "1",
            "metadata": {},
            "hash": "5717a5828f724b75cdccbbfef9db2230eff767ead6fec9167f6804cf62a599bb",
            "class_name": "RelatedNodeInfo"
          }
        },
        "text": "His roommate\nwas away for big chunks of time, during which I got to sleep in his\nroom. For some reason there was no bed frame or sheets, just a\nmattress on the floor. One morning as I was lying on this mattress\nI had an idea that made me sit up like a capital L. What if we ran\nthe software on the server, and let users control it by clicking\non links? Then we'd never have to write anything to run on users'\ncomputers. We could generate the sites on the same server we'd serve\nthem from. Users wouldn't need anything more than a browser.This kind of software, known as a web app, is common now, but at\nthe time it wasn't clear that it was even possible. To find out,\nwe decided to try making a version of our store builder that you\ncould control through the browser. A couple days later, on August\n12, we had one that worked. The UI was horrible, but it proved you\ncould build a whole store through the browser, without any client\nsoftware or typing anything into the command line on the server.Now we felt like we were really onto something. I had visions of a\nwhole new generation of software working this way. You wouldn't\nneed versions, or ports, or any of that crap. At Interleaf there\nhad been a whole group called Release Engineering that seemed to\nbe at least as big as the group that actually wrote the software.\nNow you could just update the software right on the server.We started a new company we called Viaweb, after the fact that our\nsoftware worked via the web, and we got $10,000 in seed funding\nfrom Idelle's husband Julian. In return for that and doing the\ninitial legal work and giving us business advice, we gave him 10%\nof the company. Ten years later this deal became the model for Y\nCombinator's. We knew founders needed something like this, because\nwe'd needed it ourselves.At this stage I had a negative net worth, because the thousand\ndollars or so I had in the bank was more than counterbalanced by\nwhat I owed the government in taxes. (Had I diligently set aside\nthe proper proportion of the money I'd made consulting for Interleaf?\nNo, I had not.) So although Robert had his graduate student stipend,\nI needed that seed funding to live on.We originally hoped to launch in September, but we got more ambitious\nabout the software as we worked on it. Eventually we managed to\nbuild a WYSIWYG site builder, in the sense that as you were creating\npages, they looked exactly like the static ones that would be\ngenerated later, except that instead of leading to static pages,\nthe links all referred to closures stored in a hash table on the\nserver.It helped to have studied art, because the main goal of an online\nstore builder is to make users look legit, and the key to looking\nlegit is high production values. If you get page layouts and fonts\nand colors right, you can make a guy running a store out of his\nbedroom look more legit than a big company.(If you're curious why my site looks so old-fashioned, it's because\nit's still made with this software. It may look clunky today, but\nin 1996 it was the last word in slick.)In September, Robert rebelled. \"We've been working on this for a\nmonth,\" he said, \"and it's still not done.\" This is funny in\nretrospect, because he would still be working on it almost 3 years\nlater. But I decided it might be prudent to recruit more programmers,\nand I asked Robert who else in grad school with him was really good.\nHe recommended Trevor Blackwell, which surprised me at first, because\nat that point I knew Trevor mainly for his plan to reduce everything\nin his life to a stack of notecards, which he carried around with\nhim. But Rtm was right, as usual. Trevor turned out to be a\nfrighteningly effective hacker.It was a lot of fun working with Robert and Trevor. They're the two\nmost independent-minded people \nI know, and in completely different\nways. If you could see inside Rtm's brain it would look like a\ncolonial New England church, and if you could see inside Trevor's\nit would look like the worst excesses of Austrian Rococo.We opened for business, with 6 stores, in January 1996.",
        "start_char_idx": 26691,
        "end_char_idx": 30746,
        "text_template": "{metadata_str}\n\n{content}",
        "metadata_template": "{key}: {value}",
        "metadata_seperator": "\n",
        "class_name": "TextNode"
      },
      "__type__": "1"
    },
    "d9703c2d-1591-46fa-bccb-84dd94f48531": {
      "__data__": {
        "id_": "d9703c2d-1591-46fa-bccb-84dd94f48531",
        "embedding": null,
        "metadata": {
          "source": "https://paulgraham.com/worked.html",
          "title": "What I Worked On",
          "language": null
        },
        "excluded_embed_metadata_keys": [],
        "excluded_llm_metadata_keys": [],
        "relationships": {
          "1": {
            "node_id": "775a1596-77f5-4642-80af-2f9ead7f2134",
            "node_type": "4",
            "metadata": {
              "source": "https://paulgraham.com/worked.html",
              "title": "What I Worked On",
              "language": null
            },
            "hash": "e6f0c014baa56ff32c4861f00fbfca70286719ce1bee1272e3af5f423a7217ff",
            "class_name": "RelatedNodeInfo"
          },
          "2": {
            "node_id": "ce326ed6-39ba-4961-a1a9-8d9cfab591b2",
            "node_type": "1",
            "metadata": {
              "source": "https://paulgraham.com/worked.html",
              "title": "What I Worked On",
              "language": null
            },
            "hash": "3422e6fc25ab1d2dc753c678d570fef8315cc89092e366bc195f237b8f449b38",
            "class_name": "RelatedNodeInfo"
          },
          "3": {
            "node_id": "808b2407-f5ee-43b4-a076-7c05457b91c4",
            "node_type": "1",
            "metadata": {},
            "hash": "86d0ef05adbbcc64ee7a81d6525813af856c43e71ca6ed800b20802bea6e97dd",
            "class_name": "RelatedNodeInfo"
          }
        },
        "text": "But I decided it might be prudent to recruit more programmers,\nand I asked Robert who else in grad school with him was really good.\nHe recommended Trevor Blackwell, which surprised me at first, because\nat that point I knew Trevor mainly for his plan to reduce everything\nin his life to a stack of notecards, which he carried around with\nhim. But Rtm was right, as usual. Trevor turned out to be a\nfrighteningly effective hacker.It was a lot of fun working with Robert and Trevor. They're the two\nmost independent-minded people \nI know, and in completely different\nways. If you could see inside Rtm's brain it would look like a\ncolonial New England church, and if you could see inside Trevor's\nit would look like the worst excesses of Austrian Rococo.We opened for business, with 6 stores, in January 1996. It was just\nas well we waited a few months, because although we worried we were\nlate, we were actually almost fatally early. There was a lot of\ntalk in the press then about ecommerce, but not many people actually\nwanted online stores.\n[8]There were three main parts to the software: the editor, which\npeople used to build sites and which I wrote, the shopping cart,\nwhich Robert wrote, and the manager, which kept track of orders and\nstatistics, and which Trevor wrote. In its time, the editor was one\nof the best general-purpose site builders. I kept the code tight\nand didn't have to integrate with any other software except Robert's\nand Trevor's, so it was quite fun to work on. If all I'd had to do\nwas work on this software, the next 3 years would have been the\neasiest of my life. Unfortunately I had to do a lot more, all of\nit stuff I was worse at than programming, and the next 3 years were\ninstead the most stressful.There were a lot of startups making ecommerce software in the second\nhalf of the 90s. We were determined to be the Microsoft Word, not\nthe Interleaf. Which meant being easy to use and inexpensive. It\nwas lucky for us that we were poor, because that caused us to make\nViaweb even more inexpensive than we realized. We charged $100 a\nmonth for a small store and $300 a month for a big one. This low\nprice was a big attraction, and a constant thorn in the sides of\ncompetitors, but it wasn't because of some clever insight that we\nset the price low. We had no idea what businesses paid for things.\n$300 a month seemed like a lot of money to us.We did a lot of things right by accident like that. For example,\nwe did what's now called \"doing things that \ndon't scale,\" although\nat the time we would have described it as \"being so lame that we're\ndriven to the most desperate measures to get users.\" The most common\nof which was building stores for them. This seemed particularly\nhumiliating, since the whole raison d'etre of our software was that\npeople could use it to make their own stores. But anything to get\nusers.We learned a lot more about retail than we wanted to know. For\nexample, that if you could only have a small image of a man's shirt\n(and all images were small then by present standards), it was better\nto have a closeup of the collar than a picture of the whole shirt.\nThe reason I remember learning this was that it meant I had to\nrescan about 30 images of men's shirts. My first set of scans were\nso beautiful too.Though this felt wrong, it was exactly the right thing to be doing.\nBuilding stores for users taught us about retail, and about how it\nfelt to use our software. I was initially both mystified and repelled\nby \"business\" and thought we needed a \"business person\" to be in\ncharge of it, but once we started to get users, I was converted,\nin much the same way I was converted to \nfatherhood once I had kids.\nWhatever users wanted, I was all theirs. Maybe one day we'd have\nso many users that I couldn't scan their images for them, but in\nthe meantime there was nothing more important to do.Another thing I didn't get at the time is that \ngrowth rate is the\nultimate test of a startup. Our growth rate was fine. We had about\n70 stores at the end of 1996 and about 500 at the end of 1997.",
        "start_char_idx": 29941,
        "end_char_idx": 33985,
        "text_template": "{metadata_str}\n\n{content}",
        "metadata_template": "{key}: {value}",
        "metadata_seperator": "\n",
        "class_name": "TextNode"
      },
      "__type__": "1"
    },
    "808b2407-f5ee-43b4-a076-7c05457b91c4": {
      "__data__": {
        "id_": "808b2407-f5ee-43b4-a076-7c05457b91c4",
        "embedding": null,
        "metadata": {
          "source": "https://paulgraham.com/worked.html",
          "title": "What I Worked On",
          "language": null
        },
        "excluded_embed_metadata_keys": [],
        "excluded_llm_metadata_keys": [],
        "relationships": {
          "1": {
            "node_id": "775a1596-77f5-4642-80af-2f9ead7f2134",
            "node_type": "4",
            "metadata": {
              "source": "https://paulgraham.com/worked.html",
              "title": "What I Worked On",
              "language": null
            },
            "hash": "e6f0c014baa56ff32c4861f00fbfca70286719ce1bee1272e3af5f423a7217ff",
            "class_name": "RelatedNodeInfo"
          },
          "2": {
            "node_id": "d9703c2d-1591-46fa-bccb-84dd94f48531",
            "node_type": "1",
            "metadata": {
              "source": "https://paulgraham.com/worked.html",
              "title": "What I Worked On",
              "language": null
            },
            "hash": "6679bf39a14eed74c2aacab6a05691779e4cee1a68d8e9fb3082bdfe2556a180",
            "class_name": "RelatedNodeInfo"
          },
          "3": {
            "node_id": "50f3e5ec-9f29-4ced-80e4-92e37482b829",
            "node_type": "1",
            "metadata": {},
            "hash": "3efa2b10a361ca14c8668f91d0836b2b0a9c56382e2139f0a8ad874b36d873e1",
            "class_name": "RelatedNodeInfo"
          }
        },
        "text": "Building stores for users taught us about retail, and about how it\nfelt to use our software. I was initially both mystified and repelled\nby \"business\" and thought we needed a \"business person\" to be in\ncharge of it, but once we started to get users, I was converted,\nin much the same way I was converted to \nfatherhood once I had kids.\nWhatever users wanted, I was all theirs. Maybe one day we'd have\nso many users that I couldn't scan their images for them, but in\nthe meantime there was nothing more important to do.Another thing I didn't get at the time is that \ngrowth rate is the\nultimate test of a startup. Our growth rate was fine. We had about\n70 stores at the end of 1996 and about 500 at the end of 1997. I\nmistakenly thought the thing that mattered was the absolute number\nof users. And that is the thing that matters in the sense that\nthat's how much money you're making, and if you're not making enough,\nyou might go out of business. But in the long term the growth rate\ntakes care of the absolute number. If we'd been a startup I was\nadvising at Y Combinator, I would have said: Stop being so stressed\nout, because you're doing fine. You're growing 7x a year. Just don't\nhire too many more people and you'll soon be profitable, and then\nyou'll control your own destiny.Alas I hired lots more people, partly because our investors wanted\nme to, and partly because that's what startups did during the\nInternet Bubble. A company with just a handful of employees would\nhave seemed amateurish. So we didn't reach breakeven until about\nwhen Yahoo bought us in the summer of 1998. Which in turn meant we\nwere at the mercy of investors for the entire life of the company.\nAnd since both we and our investors were noobs at startups, the\nresult was a mess even by startup standards.It was a huge relief when Yahoo bought us. In principle our Viaweb\nstock was valuable. It was a share in a business that was profitable\nand growing rapidly. But it didn't feel very valuable to me; I had\nno idea how to value a business, but I was all too keenly aware of\nthe near-death experiences we seemed to have every few months. Nor\nhad I changed my grad student lifestyle significantly since we\nstarted. So when Yahoo bought us it felt like going from rags to\nriches. Since we were going to California, I bought a car, a yellow\n1998 VW GTI. I remember thinking that its leather seats alone were\nby far the most luxurious thing I owned.The next year, from the summer of 1998 to the summer of 1999, must\nhave been the least productive of my life. I didn't realize it at\nthe time, but I was worn out from the effort and stress of running\nViaweb. For a while after I got to California I tried to continue\nmy usual m.o. of programming till 3 in the morning, but fatigue\ncombined with Yahoo's prematurely aged\nculture and grim cube farm\nin Santa Clara gradually dragged me down. After a few months it\nfelt disconcertingly like working at Interleaf.Yahoo had given us a lot of options when they bought us. At the\ntime I thought Yahoo was so overvalued that they'd never be worth\nanything, but to my astonishment the stock went up 5x in the next\nyear. I hung on till the first chunk of options vested, then in the\nsummer of 1999 I left. It had been so long since I'd painted anything\nthat I'd half forgotten why I was doing this. My brain had been\nentirely full of software and men's shirts for 4 years. But I had\ndone this to get rich so I could paint, I reminded myself, and now\nI was rich, so I should go paint.When I said I was leaving, my boss at Yahoo had a long conversation\nwith me about my plans. I told him all about the kinds of pictures\nI wanted to paint. At the time I was touched that he took such an\ninterest in me. Now I realize it was because he thought I was lying.\nMy options at that point were worth about $2 million a month.",
        "start_char_idx": 33271,
        "end_char_idx": 37098,
        "text_template": "{metadata_str}\n\n{content}",
        "metadata_template": "{key}: {value}",
        "metadata_seperator": "\n",
        "class_name": "TextNode"
      },
      "__type__": "1"
    },
    "50f3e5ec-9f29-4ced-80e4-92e37482b829": {
      "__data__": {
        "id_": "50f3e5ec-9f29-4ced-80e4-92e37482b829",
        "embedding": null,
        "metadata": {
          "source": "https://paulgraham.com/worked.html",
          "title": "What I Worked On",
          "language": null
        },
        "excluded_embed_metadata_keys": [],
        "excluded_llm_metadata_keys": [],
        "relationships": {
          "1": {
            "node_id": "775a1596-77f5-4642-80af-2f9ead7f2134",
            "node_type": "4",
            "metadata": {
              "source": "https://paulgraham.com/worked.html",
              "title": "What I Worked On",
              "language": null
            },
            "hash": "e6f0c014baa56ff32c4861f00fbfca70286719ce1bee1272e3af5f423a7217ff",
            "class_name": "RelatedNodeInfo"
          },
          "2": {
            "node_id": "808b2407-f5ee-43b4-a076-7c05457b91c4",
            "node_type": "1",
            "metadata": {
              "source": "https://paulgraham.com/worked.html",
              "title": "What I Worked On",
              "language": null
            },
            "hash": "779295b5f96c2c117e257cfb3a7de2384a9850c7082ce7179f4d8b9ea4703fbf",
            "class_name": "RelatedNodeInfo"
          },
          "3": {
            "node_id": "2405cfc3-9869-412f-a9c6-6efcf03d072c",
            "node_type": "1",
            "metadata": {},
            "hash": "7da77832e3f1ffc85c4d9ea157719b3b64d37701c55d8aeffec6079584bd7641",
            "class_name": "RelatedNodeInfo"
          }
        },
        "text": "I hung on till the first chunk of options vested, then in the\nsummer of 1999 I left. It had been so long since I'd painted anything\nthat I'd half forgotten why I was doing this. My brain had been\nentirely full of software and men's shirts for 4 years. But I had\ndone this to get rich so I could paint, I reminded myself, and now\nI was rich, so I should go paint.When I said I was leaving, my boss at Yahoo had a long conversation\nwith me about my plans. I told him all about the kinds of pictures\nI wanted to paint. At the time I was touched that he took such an\ninterest in me. Now I realize it was because he thought I was lying.\nMy options at that point were worth about $2 million a month. If I\nwas leaving that kind of money on the table, it could only be to\ngo and start some new startup, and if I did, I might take people\nwith me. This was the height of the Internet Bubble, and Yahoo was\nground zero of it. My boss was at that moment a billionaire. Leaving\nthen to start a new startup must have seemed to him an insanely,\nand yet also plausibly, ambitious plan.But I really was quitting to paint, and I started immediately.\nThere was no time to lose. I'd already burned 4 years getting rich.\nNow when I talk to founders who are leaving after selling their\ncompanies, my advice is always the same: take a vacation. That's\nwhat I should have done, just gone off somewhere and done nothing\nfor a month or two, but the idea never occurred to me.So I tried to paint, but I just didn't seem to have any energy or\nambition. Part of the problem was that I didn't know many people\nin California. I'd compounded this problem by buying a house up in\nthe Santa Cruz Mountains, with a beautiful view but miles from\nanywhere. I stuck it out for a few more months, then in desperation\nI went back to New York, where unless you understand about rent\ncontrol you'll be surprised to hear I still had my apartment, sealed\nup like a tomb of my old life. Idelle was in New York at least, and\nthere were other people trying to paint there, even though I didn't\nknow any of them.When I got back to New York I resumed my old life, except now I was\nrich. It was as weird as it sounds. I resumed all my old patterns,\nexcept now there were doors where there hadn't been. Now when I was\ntired of walking, all I had to do was raise my hand, and (unless\nit was raining) a taxi would stop to pick me up. Now when I walked\npast charming little restaurants I could go in and order lunch. It\nwas exciting for a while. Painting started to go better. I experimented\nwith a new kind of still life where I'd paint one painting in the\nold way, then photograph it and print it, blown up, on canvas, and\nthen use that as the underpainting for a second still life, painted\nfrom the same objects (which hopefully hadn't rotted yet).Meanwhile I looked for an apartment to buy. Now I could actually\nchoose what neighborhood to live in. Where, I asked myself and\nvarious real estate agents, is the Cambridge of New York? Aided by\noccasional visits to actual Cambridge, I gradually realized there\nwasn't one. Huh.Around this time, in the spring of 2000, I had an idea. It was clear\nfrom our experience with Viaweb that web apps were the future. Why\nnot build a web app for making web apps? Why not let people edit\ncode on our server through the browser, and then host the resulting\napplications for them?\n[9]\nYou could run all sorts of services\non the servers that these applications could use just by making an\nAPI call: making and receiving phone calls, manipulating images,\ntaking credit card payments, etc.I got so excited about this idea that I couldn't think about anything\nelse. It seemed obvious that this was the future. I didn't particularly\nwant to start another company, but it was clear that this idea would\nhave to be embodied as one, so I decided to move to Cambridge and\nstart it. I hoped to lure Robert into working on it with me, but\nthere I ran into a hitch.",
        "start_char_idx": 36405,
        "end_char_idx": 40343,
        "text_template": "{metadata_str}\n\n{content}",
        "metadata_template": "{key}: {value}",
        "metadata_seperator": "\n",
        "class_name": "TextNode"
      },
      "__type__": "1"
    },
    "2405cfc3-9869-412f-a9c6-6efcf03d072c": {
      "__data__": {
        "id_": "2405cfc3-9869-412f-a9c6-6efcf03d072c",
        "embedding": null,
        "metadata": {
          "source": "https://paulgraham.com/worked.html",
          "title": "What I Worked On",
          "language": null
        },
        "excluded_embed_metadata_keys": [],
        "excluded_llm_metadata_keys": [],
        "relationships": {
          "1": {
            "node_id": "775a1596-77f5-4642-80af-2f9ead7f2134",
            "node_type": "4",
            "metadata": {
              "source": "https://paulgraham.com/worked.html",
              "title": "What I Worked On",
              "language": null
            },
            "hash": "e6f0c014baa56ff32c4861f00fbfca70286719ce1bee1272e3af5f423a7217ff",
            "class_name": "RelatedNodeInfo"
          },
          "2": {
            "node_id": "50f3e5ec-9f29-4ced-80e4-92e37482b829",
            "node_type": "1",
            "metadata": {
              "source": "https://paulgraham.com/worked.html",
              "title": "What I Worked On",
              "language": null
            },
            "hash": "f875feb43328b1fc95b91e526f6061e48faf58487c5d8225468da4a266258405",
            "class_name": "RelatedNodeInfo"
          },
          "3": {
            "node_id": "ed7a9d6d-33ce-477c-8dad-a1bc7ca4f03c",
            "node_type": "1",
            "metadata": {},
            "hash": "86211a63238fae3f2da4cc71049d1b6aa50cd6a7eefad14f655ed44cf4db7a89",
            "class_name": "RelatedNodeInfo"
          }
        },
        "text": "It was clear\nfrom our experience with Viaweb that web apps were the future. Why\nnot build a web app for making web apps? Why not let people edit\ncode on our server through the browser, and then host the resulting\napplications for them?\n[9]\nYou could run all sorts of services\non the servers that these applications could use just by making an\nAPI call: making and receiving phone calls, manipulating images,\ntaking credit card payments, etc.I got so excited about this idea that I couldn't think about anything\nelse. It seemed obvious that this was the future. I didn't particularly\nwant to start another company, but it was clear that this idea would\nhave to be embodied as one, so I decided to move to Cambridge and\nstart it. I hoped to lure Robert into working on it with me, but\nthere I ran into a hitch. Robert was now a postdoc at MIT, and\nthough he'd made a lot of money the last time I'd lured him into\nworking on one of my schemes, it had also been a huge time sink.\nSo while he agreed that it sounded like a plausible idea, he firmly\nrefused to work on it.Hmph. Well, I'd do it myself then. I recruited Dan Giffin, who had\nworked for Viaweb, and two undergrads who wanted summer jobs, and\nwe got to work trying to build what it's now clear is about twenty\ncompanies and several open source projects worth of software. The\nlanguage for defining applications would of course be a dialect of\nLisp. But I wasn't so naive as to assume I could spring an overt\nLisp on a general audience; we'd hide the parentheses, like Dylan\ndid.By then there was a name for the kind of company Viaweb was, an\n\"application service provider,\" or ASP. This name didn't last long\nbefore it was replaced by \"software as a service,\" but it was current\nfor long enough that I named this new company after it: it was going\nto be called Aspra.I started working on the application builder, Dan worked on network\ninfrastructure, and the two undergrads worked on the first two\nservices (images and phone calls). But about halfway through the\nsummer I realized I really didn't want to run a company \u0097 especially\nnot a big one, which it was looking like this would have to be. I'd\nonly started Viaweb because I needed the money. Now that I didn't\nneed money anymore, why was I doing this? If this vision had to be\nrealized as a company, then screw the vision. I'd build a subset\nthat could be done as an open source project.Much to my surprise, the time I spent working on this stuff was not\nwasted after all. After we started Y Combinator, I would often\nencounter startups working on parts of this new architecture, and\nit was very useful to have spent so much time thinking about it and\neven trying to write some of it.The subset I would build as an open source project was the new Lisp,\nwhose parentheses I now wouldn't even have to hide. A lot of Lisp\nhackers dream of building a new Lisp, partly because one of the\ndistinctive features of the language is that it has dialects, and\npartly, I think, because we have in our minds a Platonic form of\nLisp that all existing dialects fall short of. I certainly did. So\nat the end of the summer Dan and I switched to working on this new\ndialect of Lisp, which I called Arc, in a house I bought in Cambridge.The following spring, lightning struck. I was invited to give a\ntalk at a Lisp conference, so I gave one about how we'd used Lisp\nat Viaweb. Afterward I put a postscript file of this talk online,\non paulgraham.com, which I'd created years before using Viaweb but\nhad never used for anything. In one day it got 30,000 page views.\nWhat on earth had happened? The referring urls showed that someone\nhad posted it on Slashdot.\n[10]Wow, I thought, there's an audience. If I write something and put\nit on the web, anyone can read it. That may seem obvious now, but\nit was surprising then. In the print era there was a narrow channel\nto readers, guarded by fierce monsters known as editors. The only\nway to get an audience for anything you wrote was to get it published\nas a book, or in a newspaper or magazine.",
        "start_char_idx": 39535,
        "end_char_idx": 43569,
        "text_template": "{metadata_str}\n\n{content}",
        "metadata_template": "{key}: {value}",
        "metadata_seperator": "\n",
        "class_name": "TextNode"
      },
      "__type__": "1"
    },
    "ed7a9d6d-33ce-477c-8dad-a1bc7ca4f03c": {
      "__data__": {
        "id_": "ed7a9d6d-33ce-477c-8dad-a1bc7ca4f03c",
        "embedding": null,
        "metadata": {
          "source": "https://paulgraham.com/worked.html",
          "title": "What I Worked On",
          "language": null
        },
        "excluded_embed_metadata_keys": [],
        "excluded_llm_metadata_keys": [],
        "relationships": {
          "1": {
            "node_id": "775a1596-77f5-4642-80af-2f9ead7f2134",
            "node_type": "4",
            "metadata": {
              "source": "https://paulgraham.com/worked.html",
              "title": "What I Worked On",
              "language": null
            },
            "hash": "e6f0c014baa56ff32c4861f00fbfca70286719ce1bee1272e3af5f423a7217ff",
            "class_name": "RelatedNodeInfo"
          },
          "2": {
            "node_id": "2405cfc3-9869-412f-a9c6-6efcf03d072c",
            "node_type": "1",
            "metadata": {
              "source": "https://paulgraham.com/worked.html",
              "title": "What I Worked On",
              "language": null
            },
            "hash": "43dd07aa3bb7df720396c2dfefae7ed9d3984ee4dade64f2247bb7aed1441f8f",
            "class_name": "RelatedNodeInfo"
          },
          "3": {
            "node_id": "a739c4ae-732c-4b76-8d8c-d506708cdc1f",
            "node_type": "1",
            "metadata": {},
            "hash": "0c0b9328413ef07a687ce7a7e71e75dd43ad04485c598fa54e1c69cff4e7109d",
            "class_name": "RelatedNodeInfo"
          }
        },
        "text": "I was invited to give a\ntalk at a Lisp conference, so I gave one about how we'd used Lisp\nat Viaweb. Afterward I put a postscript file of this talk online,\non paulgraham.com, which I'd created years before using Viaweb but\nhad never used for anything. In one day it got 30,000 page views.\nWhat on earth had happened? The referring urls showed that someone\nhad posted it on Slashdot.\n[10]Wow, I thought, there's an audience. If I write something and put\nit on the web, anyone can read it. That may seem obvious now, but\nit was surprising then. In the print era there was a narrow channel\nto readers, guarded by fierce monsters known as editors. The only\nway to get an audience for anything you wrote was to get it published\nas a book, or in a newspaper or magazine. Now anyone could publish\nanything.This had been possible in principle since 1993, but not many people\nhad realized it yet. I had been intimately involved with building\nthe infrastructure of the web for most of that time, and a writer\nas well, and it had taken me 8 years to realize it. Even then it\ntook me several years to understand the implications. It meant there\nwould be a whole new generation of \nessays.\n[11]In the print era, the channel for publishing essays had been\nvanishingly small. Except for a few officially anointed thinkers\nwho went to the right parties in New York, the only people allowed\nto publish essays were specialists writing about their specialties.\nThere were so many essays that had never been written, because there\nhad been no way to publish them. Now they could be, and I was going\nto write them.\n[12]I've worked on several different things, but to the extent there\nwas a turning point where I figured out what to work on, it was\nwhen I started publishing essays online. From then on I knew that\nwhatever else I did, I'd always write essays too.I knew that online essays would be a \nmarginal medium at first.\nSocially they'd seem more like rants posted by nutjobs on their\nGeoCities sites than the genteel and beautifully typeset compositions\npublished in The New Yorker. But by this point I knew enough to\nfind that encouraging instead of discouraging.One of the most conspicuous patterns I've noticed in my life is how\nwell it has worked, for me at least, to work on things that weren't\nprestigious. Still life has always been the least prestigious form\nof painting. Viaweb and Y Combinator both seemed lame when we started\nthem. I still get the glassy eye from strangers when they ask what\nI'm writing, and I explain that it's an essay I'm going to publish\non my web site. Even Lisp, though prestigious intellectually in\nsomething like the way Latin is, also seems about as hip.It's not that unprestigious types of work are good per se. But when\nyou find yourself drawn to some kind of work despite its current\nlack of prestige, it's a sign both that there's something real to\nbe discovered there, and that you have the right kind of motives.\nImpure motives are a big danger for the ambitious. If anything is\ngoing to lead you astray, it will be the desire to impress people.\nSo while working on things that aren't prestigious doesn't guarantee\nyou're on the right track, it at least guarantees you're not on the\nmost common type of wrong one.Over the next several years I wrote lots of essays about all kinds\nof different topics. O'Reilly reprinted a collection of them as a\nbook, called Hackers & Painters after one of the essays in it. I\nalso worked on spam filters, and did some more painting. I used to\nhave dinners for a group of friends every thursday night, which\ntaught me how to cook for groups. And I bought another building in\nCambridge, a former candy factory (and later, twas said, porn\nstudio), to use as an office.One night in October 2003 there was a big party at my house. It was\na clever idea of my friend Maria Daniels, who was one of the thursday\ndiners. Three separate hosts would all invite their friends to one\nparty. So for every guest, two thirds of the other guests would be\npeople they didn't know but would probably like.",
        "start_char_idx": 42805,
        "end_char_idx": 46855,
        "text_template": "{metadata_str}\n\n{content}",
        "metadata_template": "{key}: {value}",
        "metadata_seperator": "\n",
        "class_name": "TextNode"
      },
      "__type__": "1"
    },
    "a739c4ae-732c-4b76-8d8c-d506708cdc1f": {
      "__data__": {
        "id_": "a739c4ae-732c-4b76-8d8c-d506708cdc1f",
        "embedding": null,
        "metadata": {
          "source": "https://paulgraham.com/worked.html",
          "title": "What I Worked On",
          "language": null
        },
        "excluded_embed_metadata_keys": [],
        "excluded_llm_metadata_keys": [],
        "relationships": {
          "1": {
            "node_id": "775a1596-77f5-4642-80af-2f9ead7f2134",
            "node_type": "4",
            "metadata": {
              "source": "https://paulgraham.com/worked.html",
              "title": "What I Worked On",
              "language": null
            },
            "hash": "e6f0c014baa56ff32c4861f00fbfca70286719ce1bee1272e3af5f423a7217ff",
            "class_name": "RelatedNodeInfo"
          },
          "2": {
            "node_id": "ed7a9d6d-33ce-477c-8dad-a1bc7ca4f03c",
            "node_type": "1",
            "metadata": {
              "source": "https://paulgraham.com/worked.html",
              "title": "What I Worked On",
              "language": null
            },
            "hash": "faa68d76affe9570f73c5d7290ae2446e26f30e0cd70424ba5ef1052795ccfa7",
            "class_name": "RelatedNodeInfo"
          },
          "3": {
            "node_id": "bb7e6b92-7180-4a14-a1e6-9391212f5264",
            "node_type": "1",
            "metadata": {},
            "hash": "1d5efbf4331dcf5b72f3c249e1ab5e57b7c256ab0057d77f29d50c7161437197",
            "class_name": "RelatedNodeInfo"
          }
        },
        "text": "O'Reilly reprinted a collection of them as a\nbook, called Hackers & Painters after one of the essays in it. I\nalso worked on spam filters, and did some more painting. I used to\nhave dinners for a group of friends every thursday night, which\ntaught me how to cook for groups. And I bought another building in\nCambridge, a former candy factory (and later, twas said, porn\nstudio), to use as an office.One night in October 2003 there was a big party at my house. It was\na clever idea of my friend Maria Daniels, who was one of the thursday\ndiners. Three separate hosts would all invite their friends to one\nparty. So for every guest, two thirds of the other guests would be\npeople they didn't know but would probably like. One of the guests\nwas someone I didn't know but would turn out to like a lot: a woman\ncalled Jessica Livingston. A couple days later I asked her out.Jessica was in charge of marketing at a Boston investment bank.\nThis bank thought it understood startups, but over the next year,\nas she met friends of mine from the startup world, she was surprised\nhow different reality was. And how colorful their stories were. So\nshe decided to compile a book of \ninterviews with startup founders.When the bank had financial problems and she had to fire half her\nstaff, she started looking for a new job. In early 2005 she interviewed\nfor a marketing job at a Boston VC firm. It took them weeks to make\nup their minds, and during this time I started telling her about\nall the things that needed to be fixed about venture capital. They\nshould make a larger number of smaller investments instead of a\nhandful of giant ones, they should be funding younger, more technical\nfounders instead of MBAs, they should let the founders remain as\nCEO, and so on.One of my tricks for writing essays had always been to give talks.\nThe prospect of having to stand up in front of a group of people\nand tell them something that won't waste their time is a great\nspur to the imagination. When the Harvard Computer Society, the\nundergrad computer club, asked me to give a talk, I decided I would\ntell them how to start a startup. Maybe they'd be able to avoid the\nworst of the mistakes we'd made.So I gave this talk, in the course of which I told them that the\nbest sources of seed funding were successful startup founders,\nbecause then they'd be sources of advice too. Whereupon it seemed\nthey were all looking expectantly at me. Horrified at the prospect\nof having my inbox flooded by business plans (if I'd only known),\nI blurted out \"But not me!\" and went on with the talk. But afterward\nit occurred to me that I should really stop procrastinating about\nangel investing. I'd been meaning to since Yahoo bought us, and now\nit was 7 years later and I still hadn't done one angel investment.Meanwhile I had been scheming with Robert and Trevor about projects\nwe could work on together. I missed working with them, and it seemed\nlike there had to be something we could collaborate on.As Jessica and I were walking home from dinner on March 11, at the\ncorner of Garden and Walker streets, these three threads converged.\nScrew the VCs who were taking so long to make up their minds. We'd\nstart our own investment firm and actually implement the ideas we'd\nbeen talking about. I'd fund it, and Jessica could quit her job and\nwork for it, and we'd get Robert and Trevor as partners too.\n[13]Once again, ignorance worked in our favor. We had no idea how to\nbe angel investors, and in Boston in 2005 there were no Ron Conways\nto learn from. So we just made what seemed like the obvious choices,\nand some of the things we did turned out to be novel.There are multiple components to Y Combinator, and we didn't figure\nthem all out at once. The part we got first was to be an angel firm.\nIn those days, those two words didn't go together. There were VC\nfirms, which were organized companies with people whose job it was\nto make investments, but they only did big, million dollar investments.\nAnd there were angels, who did smaller investments, but these were\nindividuals who were usually focused on other things and made\ninvestments on the side. And neither of them helped founders enough\nin the beginning.",
        "start_char_idx": 46136,
        "end_char_idx": 50318,
        "text_template": "{metadata_str}\n\n{content}",
        "metadata_template": "{key}: {value}",
        "metadata_seperator": "\n",
        "class_name": "TextNode"
      },
      "__type__": "1"
    },
    "bb7e6b92-7180-4a14-a1e6-9391212f5264": {
      "__data__": {
        "id_": "bb7e6b92-7180-4a14-a1e6-9391212f5264",
        "embedding": null,
        "metadata": {
          "source": "https://paulgraham.com/worked.html",
          "title": "What I Worked On",
          "language": null
        },
        "excluded_embed_metadata_keys": [],
        "excluded_llm_metadata_keys": [],
        "relationships": {
          "1": {
            "node_id": "775a1596-77f5-4642-80af-2f9ead7f2134",
            "node_type": "4",
            "metadata": {
              "source": "https://paulgraham.com/worked.html",
              "title": "What I Worked On",
              "language": null
            },
            "hash": "e6f0c014baa56ff32c4861f00fbfca70286719ce1bee1272e3af5f423a7217ff",
            "class_name": "RelatedNodeInfo"
          },
          "2": {
            "node_id": "a739c4ae-732c-4b76-8d8c-d506708cdc1f",
            "node_type": "1",
            "metadata": {
              "source": "https://paulgraham.com/worked.html",
              "title": "What I Worked On",
              "language": null
            },
            "hash": "30c0f1d4543af1a0009172f150a2d296c26da2f0c0f79a37cad14854c9c08cb2",
            "class_name": "RelatedNodeInfo"
          },
          "3": {
            "node_id": "5303bae3-97b9-4655-8f5c-ef33dd873d81",
            "node_type": "1",
            "metadata": {},
            "hash": "d5d729ac867f63dcc195c6315c97d572eabbdc3548d680b1c476b17d277095f6",
            "class_name": "RelatedNodeInfo"
          }
        },
        "text": "[13]Once again, ignorance worked in our favor. We had no idea how to\nbe angel investors, and in Boston in 2005 there were no Ron Conways\nto learn from. So we just made what seemed like the obvious choices,\nand some of the things we did turned out to be novel.There are multiple components to Y Combinator, and we didn't figure\nthem all out at once. The part we got first was to be an angel firm.\nIn those days, those two words didn't go together. There were VC\nfirms, which were organized companies with people whose job it was\nto make investments, but they only did big, million dollar investments.\nAnd there were angels, who did smaller investments, but these were\nindividuals who were usually focused on other things and made\ninvestments on the side. And neither of them helped founders enough\nin the beginning. We knew how helpless founders were in some respects,\nbecause we remembered how helpless we'd been. For example, one thing\nJulian had done for us that seemed to us like magic was to get us\nset up as a company. We were fine writing fairly difficult software,\nbut actually getting incorporated, with bylaws and stock and all\nthat stuff, how on earth did you do that? Our plan was not only to\nmake seed investments, but to do for startups everything Julian had\ndone for us.YC was not organized as a fund. It was cheap enough to run that we\nfunded it with our own money. That went right by 99% of readers,\nbut professional investors are thinking \"Wow, that means they got\nall the returns.\" But once again, this was not due to any particular\ninsight on our part. We didn't know how VC firms were organized.\nIt never occurred to us to try to raise a fund, and if it had, we\nwouldn't have known where to start.\n[14]The most distinctive thing about YC is the batch model: to fund a\nbunch of startups all at once, twice a year, and then to spend three\nmonths focusing intensively on trying to help them. That part we\ndiscovered by accident, not merely implicitly but explicitly due\nto our ignorance about investing. We needed to get experience as\ninvestors. What better way, we thought, than to fund a whole bunch\nof startups at once? We knew undergrads got temporary jobs at tech\ncompanies during the summer. Why not organize a summer program where\nthey'd start startups instead? We wouldn't feel guilty for being\nin a sense fake investors, because they would in a similar sense\nbe fake founders. So while we probably wouldn't make much money out\nof it, we'd at least get to practice being investors on them, and\nthey for their part would probably have a more interesting summer\nthan they would working at Microsoft.We'd use the building I owned in Cambridge as our headquarters.\nWe'd all have dinner there once a week \u0097 on tuesdays, since I was\nalready cooking for the thursday diners on thursdays \u0097 and after\ndinner we'd bring in experts on startups to give talks.We knew undergrads were deciding then about summer jobs, so in a\nmatter of days we cooked up something we called the Summer Founders\nProgram, and I posted an \nannouncement \non my site, inviting undergrads\nto apply. I had never imagined that writing essays would be a way\nto get \"deal flow,\" as investors call it, but it turned out to be\nthe perfect source.\n[15]\nWe got 225 applications for the Summer\nFounders Program, and we were surprised to find that a lot of them\nwere from people who'd already graduated, or were about to that\nspring. Already this SFP thing was starting to feel more serious\nthan we'd intended.We invited about 20 of the 225 groups to interview in person, and\nfrom those we picked 8 to fund. They were an impressive group. That\nfirst batch included reddit, Justin Kan and Emmett Shear, who went\non to found Twitch, Aaron Swartz, who had already helped write the\nRSS spec and would a few years later become a martyr for open access,\nand Sam Altman, who would later become the second president of YC.\nI don't think it was entirely luck that the first batch was so good.",
        "start_char_idx": 49504,
        "end_char_idx": 53465,
        "text_template": "{metadata_str}\n\n{content}",
        "metadata_template": "{key}: {value}",
        "metadata_seperator": "\n",
        "class_name": "TextNode"
      },
      "__type__": "1"
    },
    "5303bae3-97b9-4655-8f5c-ef33dd873d81": {
      "__data__": {
        "id_": "5303bae3-97b9-4655-8f5c-ef33dd873d81",
        "embedding": null,
        "metadata": {
          "source": "https://paulgraham.com/worked.html",
          "title": "What I Worked On",
          "language": null
        },
        "excluded_embed_metadata_keys": [],
        "excluded_llm_metadata_keys": [],
        "relationships": {
          "1": {
            "node_id": "775a1596-77f5-4642-80af-2f9ead7f2134",
            "node_type": "4",
            "metadata": {
              "source": "https://paulgraham.com/worked.html",
              "title": "What I Worked On",
              "language": null
            },
            "hash": "e6f0c014baa56ff32c4861f00fbfca70286719ce1bee1272e3af5f423a7217ff",
            "class_name": "RelatedNodeInfo"
          },
          "2": {
            "node_id": "bb7e6b92-7180-4a14-a1e6-9391212f5264",
            "node_type": "1",
            "metadata": {
              "source": "https://paulgraham.com/worked.html",
              "title": "What I Worked On",
              "language": null
            },
            "hash": "0c82e1581cfdf1cebb0e9638cc3173b03d2ed380902ae3860bbf27848db0c74e",
            "class_name": "RelatedNodeInfo"
          },
          "3": {
            "node_id": "257909c7-7113-4b00-a3e0-45c7adfce6bd",
            "node_type": "1",
            "metadata": {},
            "hash": "76b58e602d3a56ed262ea23bf82490df6d6b748ca1ff574586f15459affcfb83",
            "class_name": "RelatedNodeInfo"
          }
        },
        "text": "[15]\nWe got 225 applications for the Summer\nFounders Program, and we were surprised to find that a lot of them\nwere from people who'd already graduated, or were about to that\nspring. Already this SFP thing was starting to feel more serious\nthan we'd intended.We invited about 20 of the 225 groups to interview in person, and\nfrom those we picked 8 to fund. They were an impressive group. That\nfirst batch included reddit, Justin Kan and Emmett Shear, who went\non to found Twitch, Aaron Swartz, who had already helped write the\nRSS spec and would a few years later become a martyr for open access,\nand Sam Altman, who would later become the second president of YC.\nI don't think it was entirely luck that the first batch was so good.\nYou had to be pretty bold to sign up for a weird thing like the\nSummer Founders Program instead of a summer job at a legit place\nlike Microsoft or Goldman Sachs.The deal for startups was based on a combination of the deal we did\nwith Julian ($10k for 10%) and what Robert said MIT grad students\ngot for the summer ($6k). We invested $6k per founder, which in the\ntypical two-founder case was $12k, in return for 6%. That had to\nbe fair, because it was twice as good as the deal we ourselves had\ntaken. Plus that first summer, which was really hot, Jessica brought\nthe founders free air conditioners.\n[16]Fairly quickly I realized that we had stumbled upon the way to scale\nstartup funding. Funding startups in batches was more convenient\nfor us, because it meant we could do things for a lot of startups\nat once, but being part of a batch was better for the startups too.\nIt solved one of the biggest problems faced by founders: the\nisolation. Now you not only had colleagues, but colleagues who\nunderstood the problems you were facing and could tell you how they\nwere solving them.As YC grew, we started to notice other advantages of scale. The\nalumni became a tight community, dedicated to helping one another,\nand especially the current batch, whose shoes they remembered being\nin. We also noticed that the startups were becoming one another's\ncustomers. We used to refer jokingly to the \"YC GDP,\" but as YC\ngrows this becomes less and less of a joke. Now lots of startups\nget their initial set of customers almost entirely from among their\nbatchmates.I had not originally intended YC to be a full-time job. I was going\nto do three things: hack, write essays, and work on YC. As YC grew,\nand I grew more excited about it, it started to take up a lot more\nthan a third of my attention. But for the first few years I was\nstill able to work on other things.In the summer of 2006, Robert and I started working on a new version\nof Arc. This one was reasonably fast, because it was compiled into\nScheme. To test this new Arc, I wrote Hacker News in it. It was\noriginally meant to be a news aggregator for startup founders and\nwas called Startup News, but after a few months I got tired of\nreading about nothing but startups. Plus it wasn't startup founders\nwe wanted to reach. It was future startup founders. So I changed\nthe name to Hacker News and the topic to whatever engaged one's\nintellectual curiosity.HN was no doubt good for YC, but it was also by far the biggest\nsource of stress for me. If all I'd had to do was select and help\nfounders, life would have been so easy. And that implies that HN\nwas a mistake. Surely the biggest source of stress in one's work\nshould at least be something close to the core of the work. Whereas\nI was like someone who was in pain while running a marathon not\nfrom the exertion of running, but because I had a blister from an\nill-fitting shoe. When I was dealing with some urgent problem during\nYC, there was about a 60% chance it had to do with HN, and a 40%\nchance it had do with everything else combined.\n[17]As well as HN, I wrote all of YC's internal software in Arc.",
        "start_char_idx": 52733,
        "end_char_idx": 56576,
        "text_template": "{metadata_str}\n\n{content}",
        "metadata_template": "{key}: {value}",
        "metadata_seperator": "\n",
        "class_name": "TextNode"
      },
      "__type__": "1"
    },
    "257909c7-7113-4b00-a3e0-45c7adfce6bd": {
      "__data__": {
        "id_": "257909c7-7113-4b00-a3e0-45c7adfce6bd",
        "embedding": null,
        "metadata": {
          "source": "https://paulgraham.com/worked.html",
          "title": "What I Worked On",
          "language": null
        },
        "excluded_embed_metadata_keys": [],
        "excluded_llm_metadata_keys": [],
        "relationships": {
          "1": {
            "node_id": "775a1596-77f5-4642-80af-2f9ead7f2134",
            "node_type": "4",
            "metadata": {
              "source": "https://paulgraham.com/worked.html",
              "title": "What I Worked On",
              "language": null
            },
            "hash": "e6f0c014baa56ff32c4861f00fbfca70286719ce1bee1272e3af5f423a7217ff",
            "class_name": "RelatedNodeInfo"
          },
          "2": {
            "node_id": "5303bae3-97b9-4655-8f5c-ef33dd873d81",
            "node_type": "1",
            "metadata": {
              "source": "https://paulgraham.com/worked.html",
              "title": "What I Worked On",
              "language": null
            },
            "hash": "b77e335d5af68ae5cfc0e841d4a2fdeb086872877e60c5b473046456babe6deb",
            "class_name": "RelatedNodeInfo"
          },
          "3": {
            "node_id": "cdf109bf-b3be-4aac-af0a-2874e77a44b9",
            "node_type": "1",
            "metadata": {},
            "hash": "7cb1b376acbc41aa5d57ea3deaface6171cbe12b77770881fcbc448a68829066",
            "class_name": "RelatedNodeInfo"
          }
        },
        "text": "If all I'd had to do was select and help\nfounders, life would have been so easy. And that implies that HN\nwas a mistake. Surely the biggest source of stress in one's work\nshould at least be something close to the core of the work. Whereas\nI was like someone who was in pain while running a marathon not\nfrom the exertion of running, but because I had a blister from an\nill-fitting shoe. When I was dealing with some urgent problem during\nYC, there was about a 60% chance it had to do with HN, and a 40%\nchance it had do with everything else combined.\n[17]As well as HN, I wrote all of YC's internal software in Arc. But\nwhile I continued to work a good deal in Arc, I gradually stopped\nworking on Arc, partly because I didn't have time to, and partly\nbecause it was a lot less attractive to mess around with the language\nnow that we had all this infrastructure depending on it. So now my\nthree projects were reduced to two: writing essays and working on\nYC.YC was different from other kinds of work I've done. Instead of\ndeciding for myself what to work on, the problems came to me. Every\n6 months there was a new batch of startups, and their problems,\nwhatever they were, became our problems. It was very engaging work,\nbecause their problems were quite varied, and the good founders\nwere very effective. If you were trying to learn the most you could\nabout startups in the shortest possible time, you couldn't have\npicked a better way to do it.There were parts of the job I didn't like. Disputes between cofounders,\nfiguring out when people were lying to us, fighting with people who\nmaltreated the startups, and so on. But I worked hard even at the\nparts I didn't like. I was haunted by something Kevin Hale once\nsaid about companies: \"No one works harder than the boss.\" He meant\nit both descriptively and prescriptively, and it was the second\npart that scared me. I wanted YC to be good, so if how hard I worked\nset the upper bound on how hard everyone else worked, I'd better\nwork very hard.One day in 2010, when he was visiting California for interviews,\nRobert Morris did something astonishing: he offered me unsolicited\nadvice. I can only remember him doing that once before. One day at\nViaweb, when I was bent over double from a kidney stone, he suggested\nthat it would be a good idea for him to take me to the hospital.\nThat was what it took for Rtm to offer unsolicited advice. So I\nremember his exact words very clearly. \"You know,\" he said, \"you\nshould make sure Y Combinator isn't the last cool thing you do.\"At the time I didn't understand what he meant, but gradually it\ndawned on me that he was saying I should quit. This seemed strange\nadvice, because YC was doing great. But if there was one thing rarer\nthan Rtm offering advice, it was Rtm being wrong. So this set me\nthinking. It was true that on my current trajectory, YC would be\nthe last thing I did, because it was only taking up more of my\nattention. It had already eaten Arc, and was in the process of\neating essays too. Either YC was my life's work or I'd have to leave\neventually. And it wasn't, so I would.In the summer of 2012 my mother had a stroke, and the cause turned\nout to be a blood clot caused by colon cancer. The stroke destroyed\nher balance, and she was put in a nursing home, but she really\nwanted to get out of it and back to her house, and my sister and I\nwere determined to help her do it. I used to fly up to Oregon to\nvisit her regularly, and I had a lot of time to think on those\nflights. On one of them I realized I was ready to hand YC over to\nsomeone else.I asked Jessica if she wanted to be president, but she didn't, so\nwe decided we'd try to recruit Sam Altman. We talked to Robert and\nTrevor and we agreed to make it a complete changing of the guard.\nUp till that point YC had been controlled by the original LLC we\nfour had started.",
        "start_char_idx": 55961,
        "end_char_idx": 59801,
        "text_template": "{metadata_str}\n\n{content}",
        "metadata_template": "{key}: {value}",
        "metadata_seperator": "\n",
        "class_name": "TextNode"
      },
      "__type__": "1"
    },
    "cdf109bf-b3be-4aac-af0a-2874e77a44b9": {
      "__data__": {
        "id_": "cdf109bf-b3be-4aac-af0a-2874e77a44b9",
        "embedding": null,
        "metadata": {
          "source": "https://paulgraham.com/worked.html",
          "title": "What I Worked On",
          "language": null
        },
        "excluded_embed_metadata_keys": [],
        "excluded_llm_metadata_keys": [],
        "relationships": {
          "1": {
            "node_id": "775a1596-77f5-4642-80af-2f9ead7f2134",
            "node_type": "4",
            "metadata": {
              "source": "https://paulgraham.com/worked.html",
              "title": "What I Worked On",
              "language": null
            },
            "hash": "e6f0c014baa56ff32c4861f00fbfca70286719ce1bee1272e3af5f423a7217ff",
            "class_name": "RelatedNodeInfo"
          },
          "2": {
            "node_id": "257909c7-7113-4b00-a3e0-45c7adfce6bd",
            "node_type": "1",
            "metadata": {
              "source": "https://paulgraham.com/worked.html",
              "title": "What I Worked On",
              "language": null
            },
            "hash": "62bd2b4391bc149e973719c52706970cfbafe18d24fc47d7b075c4a6c079af5f",
            "class_name": "RelatedNodeInfo"
          },
          "3": {
            "node_id": "88f12b13-f280-41ad-9aad-c6d1ad434192",
            "node_type": "1",
            "metadata": {},
            "hash": "a72c9bb6af87d60ac7d003d45b657bece4b1f94f582299ba24436af5c2164258",
            "class_name": "RelatedNodeInfo"
          }
        },
        "text": "The stroke destroyed\nher balance, and she was put in a nursing home, but she really\nwanted to get out of it and back to her house, and my sister and I\nwere determined to help her do it. I used to fly up to Oregon to\nvisit her regularly, and I had a lot of time to think on those\nflights. On one of them I realized I was ready to hand YC over to\nsomeone else.I asked Jessica if she wanted to be president, but she didn't, so\nwe decided we'd try to recruit Sam Altman. We talked to Robert and\nTrevor and we agreed to make it a complete changing of the guard.\nUp till that point YC had been controlled by the original LLC we\nfour had started. But we wanted YC to last for a long time, and to\ndo that it couldn't be controlled by the founders. So if Sam said\nyes, we'd let him reorganize YC. Robert and I would retire, and\nJessica and Trevor would become ordinary partners.When we asked Sam if he wanted to be president of YC, initially he\nsaid no. He wanted to start a startup to make nuclear reactors.\nBut I kept at it, and in October 2013 he finally agreed. We decided\nhe'd take over starting with the winter 2014 batch. For the rest\nof 2013 I left running YC more and more to Sam, partly so he could\nlearn the job, and partly because I was focused on my mother, whose\ncancer had returned.She died on January 15, 2014. We knew this was coming, but it was\nstill hard when it did.I kept working on YC till March, to help get that batch of startups\nthrough Demo Day, then I checked out pretty completely. (I still\ntalk to alumni and to new startups working on things I'm interested\nin, but that only takes a few hours a week.)What should I do next? Rtm's advice hadn't included anything about\nthat. I wanted to do something completely different, so I decided\nI'd paint. I wanted to see how good I could get if I really focused\non it. So the day after I stopped working on YC, I started painting.\nI was rusty and it took a while to get back into shape, but it was\nat least completely engaging.\n[18]I spent most of the rest of 2014 painting. I'd never been able to\nwork so uninterruptedly before, and I got to be better than I had\nbeen. Not good enough, but better. Then in November, right in the\nmiddle of a painting, I ran out of steam. Up till that point I'd\nalways been curious to see how the painting I was working on would\nturn out, but suddenly finishing this one seemed like a chore. So\nI stopped working on it and cleaned my brushes and haven't painted\nsince. So far anyway.I realize that sounds rather wimpy. But attention is a zero sum\ngame. If you can choose what to work on, and you choose a project\nthat's not the best one (or at least a good one) for you, then it's\ngetting in the way of another project that is. And at 50 there was\nsome opportunity cost to screwing around.I started writing essays again, and wrote a bunch of new ones over\nthe next few months. I even wrote a couple that \nweren't about\nstartups. Then in March 2015 I started working on Lisp again.The distinctive thing about Lisp is that its core is a language\ndefined by writing an interpreter in itself. It wasn't originally\nintended as a programming language in the ordinary sense. It was\nmeant to be a formal model of computation, an alternative to the\nTuring machine. If you want to write an interpreter for a language\nin itself, what's the minimum set of predefined operators you need?\nThe Lisp that John McCarthy invented, or more accurately discovered,\nis an answer to that question.\n[19]McCarthy didn't realize this Lisp could even be used to program\ncomputers till his grad student Steve Russell suggested it. Russell\ntranslated McCarthy's interpreter into IBM 704 machine language,\nand from that point Lisp started also to be a programming language\nin the ordinary sense. But its origins as a model of computation\ngave it a power and elegance that other languages couldn't match.\nIt was this that attracted me in college, though I didn't understand\nwhy at the time.McCarthy's 1960 Lisp did nothing more than interpret Lisp expressions.",
        "start_char_idx": 59162,
        "end_char_idx": 63185,
        "text_template": "{metadata_str}\n\n{content}",
        "metadata_template": "{key}: {value}",
        "metadata_seperator": "\n",
        "class_name": "TextNode"
      },
      "__type__": "1"
    },
    "88f12b13-f280-41ad-9aad-c6d1ad434192": {
      "__data__": {
        "id_": "88f12b13-f280-41ad-9aad-c6d1ad434192",
        "embedding": null,
        "metadata": {
          "source": "https://paulgraham.com/worked.html",
          "title": "What I Worked On",
          "language": null
        },
        "excluded_embed_metadata_keys": [],
        "excluded_llm_metadata_keys": [],
        "relationships": {
          "1": {
            "node_id": "775a1596-77f5-4642-80af-2f9ead7f2134",
            "node_type": "4",
            "metadata": {
              "source": "https://paulgraham.com/worked.html",
              "title": "What I Worked On",
              "language": null
            },
            "hash": "e6f0c014baa56ff32c4861f00fbfca70286719ce1bee1272e3af5f423a7217ff",
            "class_name": "RelatedNodeInfo"
          },
          "2": {
            "node_id": "cdf109bf-b3be-4aac-af0a-2874e77a44b9",
            "node_type": "1",
            "metadata": {
              "source": "https://paulgraham.com/worked.html",
              "title": "What I Worked On",
              "language": null
            },
            "hash": "cf51a9c7d7affc2e6af375a2e2568ecf92949f7334154905b193cc49cad6e507",
            "class_name": "RelatedNodeInfo"
          },
          "3": {
            "node_id": "3b55de4d-1776-40c8-8239-ee62f2aaa5f5",
            "node_type": "1",
            "metadata": {},
            "hash": "411a72febf8a00f159fd5cf558f9b72f033c169e20c47b80e0b1f56b53597bd2",
            "class_name": "RelatedNodeInfo"
          }
        },
        "text": "It was\nmeant to be a formal model of computation, an alternative to the\nTuring machine. If you want to write an interpreter for a language\nin itself, what's the minimum set of predefined operators you need?\nThe Lisp that John McCarthy invented, or more accurately discovered,\nis an answer to that question.\n[19]McCarthy didn't realize this Lisp could even be used to program\ncomputers till his grad student Steve Russell suggested it. Russell\ntranslated McCarthy's interpreter into IBM 704 machine language,\nand from that point Lisp started also to be a programming language\nin the ordinary sense. But its origins as a model of computation\ngave it a power and elegance that other languages couldn't match.\nIt was this that attracted me in college, though I didn't understand\nwhy at the time.McCarthy's 1960 Lisp did nothing more than interpret Lisp expressions.\nIt was missing a lot of things you'd want in a programming language.\nSo these had to be added, and when they were, they weren't defined\nusing McCarthy's original axiomatic approach. That wouldn't have\nbeen feasible at the time. McCarthy tested his interpreter by\nhand-simulating the execution of programs. But it was already getting\nclose to the limit of interpreters you could test that way \u0097 indeed,\nthere was a bug in it that McCarthy had overlooked. To test a more\ncomplicated interpreter, you'd have had to run it, and computers\nthen weren't powerful enough.Now they are, though. Now you could continue using McCarthy's\naxiomatic approach till you'd defined a complete programming language.\nAnd as long as every change you made to McCarthy's Lisp was a\ndiscoveredness-preserving transformation, you could, in principle,\nend up with a complete language that had this quality. Harder to\ndo than to talk about, of course, but if it was possible in principle,\nwhy not try? So I decided to take a shot at it. It took 4 years,\nfrom March 26, 2015 to October 12, 2019. It was fortunate that I\nhad a precisely defined goal, or it would have been hard to keep\nat it for so long.I wrote this new Lisp, called Bel, \nin itself in Arc. That may sound\nlike a contradiction, but it's an indication of the sort of trickery\nI had to engage in to make this work. By means of an egregious\ncollection of hacks I managed to make something close enough to an\ninterpreter written in itself that could actually run. Not fast,\nbut fast enough to test.I had to ban myself from writing essays during most of this time,\nor I'd never have finished. In late 2015 I spent 3 months writing\nessays, and when I went back to working on Bel I could barely\nunderstand the code. Not so much because it was badly written as\nbecause the problem is so convoluted. When you're working on an\ninterpreter written in itself, it's hard to keep track of what's\nhappening at what level, and errors can be practically encrypted\nby the time you get them.So I said no more essays till Bel was done. But I told few people\nabout Bel while I was working on it. So for years it must have\nseemed that I was doing nothing, when in fact I was working harder\nthan I'd ever worked on anything. Occasionally after wrestling for\nhours with some gruesome bug I'd check Twitter or HN and see someone\nasking \"Does Paul Graham still code?\"Working on Bel was hard but satisfying. I worked on it so intensively\nthat at any given time I had a decent chunk of the code in my head\nand could write more there. I remember taking the boys to the\ncoast on a sunny day in 2015 and figuring out how to deal with some\nproblem involving continuations while I watched them play in the\ntide pools. It felt like I was doing life right. I remember that\nbecause I was slightly dismayed at how novel it felt. The good news\nis that I had more moments like this over the next few years.In the summer of 2016 we moved to England. We wanted our kids to\nsee what it was like living in another country, and since I was a\nBritish citizen by birth, that seemed the obvious choice. We only\nmeant to stay for a year, but we liked it so much that we still\nlive there. So most of Bel was written in England.In the fall of 2019, Bel was finally finished.",
        "start_char_idx": 62324,
        "end_char_idx": 66447,
        "text_template": "{metadata_str}\n\n{content}",
        "metadata_template": "{key}: {value}",
        "metadata_seperator": "\n",
        "class_name": "TextNode"
      },
      "__type__": "1"
    },
    "3b55de4d-1776-40c8-8239-ee62f2aaa5f5": {
      "__data__": {
        "id_": "3b55de4d-1776-40c8-8239-ee62f2aaa5f5",
        "embedding": null,
        "metadata": {
          "source": "https://paulgraham.com/worked.html",
          "title": "What I Worked On",
          "language": null
        },
        "excluded_embed_metadata_keys": [],
        "excluded_llm_metadata_keys": [],
        "relationships": {
          "1": {
            "node_id": "775a1596-77f5-4642-80af-2f9ead7f2134",
            "node_type": "4",
            "metadata": {
              "source": "https://paulgraham.com/worked.html",
              "title": "What I Worked On",
              "language": null
            },
            "hash": "e6f0c014baa56ff32c4861f00fbfca70286719ce1bee1272e3af5f423a7217ff",
            "class_name": "RelatedNodeInfo"
          },
          "2": {
            "node_id": "88f12b13-f280-41ad-9aad-c6d1ad434192",
            "node_type": "1",
            "metadata": {
              "source": "https://paulgraham.com/worked.html",
              "title": "What I Worked On",
              "language": null
            },
            "hash": "eb72d8691b66f86c19b116b55f0f5ec0c41c80c98bfe01b076379d0e776ae20b",
            "class_name": "RelatedNodeInfo"
          },
          "3": {
            "node_id": "bc8b8b93-eaf4-469a-b8bb-4493d1ea82da",
            "node_type": "1",
            "metadata": {},
            "hash": "42c0125991032f23f54ce317de4cc315ace61c82f9e50ea057894ad92939e94c",
            "class_name": "RelatedNodeInfo"
          }
        },
        "text": "I remember taking the boys to the\ncoast on a sunny day in 2015 and figuring out how to deal with some\nproblem involving continuations while I watched them play in the\ntide pools. It felt like I was doing life right. I remember that\nbecause I was slightly dismayed at how novel it felt. The good news\nis that I had more moments like this over the next few years.In the summer of 2016 we moved to England. We wanted our kids to\nsee what it was like living in another country, and since I was a\nBritish citizen by birth, that seemed the obvious choice. We only\nmeant to stay for a year, but we liked it so much that we still\nlive there. So most of Bel was written in England.In the fall of 2019, Bel was finally finished. Like McCarthy's\noriginal Lisp, it's a spec rather than an implementation, although\nlike McCarthy's Lisp it's a spec expressed as code.Now that I could write essays again, I wrote a bunch about topics\nI'd had stacked up. I kept writing essays through 2020, but I also\nstarted to think about other things I could work on. How should I\nchoose what to do? Well, how had I chosen what to work on in the\npast? I wrote an essay for myself to answer that question, and I\nwas surprised how long and messy the answer turned out to be. If\nthis surprised me, who'd lived it, then I thought perhaps it would\nbe interesting to other people, and encouraging to those with\nsimilarly messy lives. So I wrote a more detailed version for others\nto read, and this is the last sentence of it.\nNotes[1]\nMy experience skipped a step in the evolution of computers:\ntime-sharing machines with interactive OSes. I went straight from\nbatch processing to microcomputers, which made microcomputers seem\nall the more exciting.[2]\nItalian words for abstract concepts can nearly always be\npredicted from their English cognates (except for occasional traps\nlike polluzione). It's the everyday words that differ. So if you\nstring together a lot of abstract concepts with a few simple verbs,\nyou can make a little Italian go a long way.[3]\nI lived at Piazza San Felice 4, so my walk to the Accademia\nwent straight down the spine of old Florence: past the Pitti, across\nthe bridge, past Orsanmichele, between the Duomo and the Baptistery,\nand then up Via Ricasoli to Piazza San Marco. I saw Florence at\nstreet level in every possible condition, from empty dark winter\nevenings to sweltering summer days when the streets were packed with\ntourists.[4]\nYou can of course paint people like still lives if you want\nto, and they're willing. That sort of portrait is arguably the apex\nof still life painting, though the long sitting does tend to produce\npained expressions in the sitters.[5]\nInterleaf was one of many companies that had smart people and\nbuilt impressive technology, and yet got crushed by Moore's Law.\nIn the 1990s the exponential growth in the power of commodity (i.e.\nIntel) processors rolled up high-end, special-purpose hardware and\nsoftware companies like a bulldozer.[6]\nThe signature style seekers at RISD weren't specifically\nmercenary. In the art world, money and coolness are tightly coupled.\nAnything expensive comes to be seen as cool, and anything seen as\ncool will soon become equally expensive.[7]\nTechnically the apartment wasn't rent-controlled but\nrent-stabilized, but this is a refinement only New Yorkers would\nknow or care about. The point is that it was really cheap, less\nthan half market price.[8]\nMost software you can launch as soon as it's done. But when\nthe software is an online store builder and you're hosting the\nstores, if you don't have any users yet, that fact will be painfully\nobvious. So before we could launch publicly we had to launch\nprivately, in the sense of recruiting an initial set of users and\nmaking sure they had decent-looking stores.[9]\nWe'd had a code editor in Viaweb for users to define their\nown page styles. They didn't know it, but they were editing Lisp\nexpressions underneath. But this wasn't an app editor, because the\ncode ran when the merchants' sites were generated, not when shoppers\nvisited them.",
        "start_char_idx": 65729,
        "end_char_idx": 69783,
        "text_template": "{metadata_str}\n\n{content}",
        "metadata_template": "{key}: {value}",
        "metadata_seperator": "\n",
        "class_name": "TextNode"
      },
      "__type__": "1"
    },
    "bc8b8b93-eaf4-469a-b8bb-4493d1ea82da": {
      "__data__": {
        "id_": "bc8b8b93-eaf4-469a-b8bb-4493d1ea82da",
        "embedding": null,
        "metadata": {
          "source": "https://paulgraham.com/worked.html",
          "title": "What I Worked On",
          "language": null
        },
        "excluded_embed_metadata_keys": [],
        "excluded_llm_metadata_keys": [],
        "relationships": {
          "1": {
            "node_id": "775a1596-77f5-4642-80af-2f9ead7f2134",
            "node_type": "4",
            "metadata": {
              "source": "https://paulgraham.com/worked.html",
              "title": "What I Worked On",
              "language": null
            },
            "hash": "e6f0c014baa56ff32c4861f00fbfca70286719ce1bee1272e3af5f423a7217ff",
            "class_name": "RelatedNodeInfo"
          },
          "2": {
            "node_id": "3b55de4d-1776-40c8-8239-ee62f2aaa5f5",
            "node_type": "1",
            "metadata": {
              "source": "https://paulgraham.com/worked.html",
              "title": "What I Worked On",
              "language": null
            },
            "hash": "f8a90190bb6c581c7d33bc385ca9d89f2e2eb3824a0d90b192420cef294096d2",
            "class_name": "RelatedNodeInfo"
          },
          "3": {
            "node_id": "655cc94b-1685-4b9d-b251-0daf7c6af2d8",
            "node_type": "1",
            "metadata": {},
            "hash": "f6b6cf8f61db11413b39651102134ef7639614fdac5d78af806e58f40ca9e487",
            "class_name": "RelatedNodeInfo"
          }
        },
        "text": "The point is that it was really cheap, less\nthan half market price.[8]\nMost software you can launch as soon as it's done. But when\nthe software is an online store builder and you're hosting the\nstores, if you don't have any users yet, that fact will be painfully\nobvious. So before we could launch publicly we had to launch\nprivately, in the sense of recruiting an initial set of users and\nmaking sure they had decent-looking stores.[9]\nWe'd had a code editor in Viaweb for users to define their\nown page styles. They didn't know it, but they were editing Lisp\nexpressions underneath. But this wasn't an app editor, because the\ncode ran when the merchants' sites were generated, not when shoppers\nvisited them.[10]\nThis was the first instance of what is now a familiar experience,\nand so was what happened next, when I read the comments and found\nthey were full of angry people. How could I claim that Lisp was\nbetter than other languages? Weren't they all Turing complete?\nPeople who see the responses to essays I write sometimes tell me\nhow sorry they feel for me, but I'm not exaggerating when I reply\nthat it has always been like this, since the very beginning. It\ncomes with the territory. An essay must tell readers things they\ndon't already know, and some \npeople dislike being told such things.[11]\nPeople put plenty of stuff on the internet in the 90s of\ncourse, but putting something online is not the same as publishing\nit online. Publishing online means you treat the online version as\nthe (or at least a) primary version.[12]\nThere is a general lesson here that our experience with Y\nCombinator also teaches: Customs continue to constrain you long\nafter the restrictions that caused them have disappeared. Customary\nVC practice had once, like the customs about publishing essays,\nbeen based on real constraints. Startups had once been much more\nexpensive to start, and proportionally rare. Now they could be cheap\nand common, but the VCs' customs still reflected the old world,\njust as customs about writing essays still reflected the constraints\nof the print era.Which in turn implies that people who are independent-minded (i.e.\nless influenced by custom) will have an advantage in fields affected\nby rapid change (where customs are more likely to be obsolete).Here's an interesting point, though: you can't always predict which\nfields will be affected by rapid change. Obviously software and\nventure capital will be, but who would have predicted that essay\nwriting would be?[13]\nY Combinator was not the original name. At first we were\ncalled Cambridge Seed. But we didn't want a regional name, in case\nsomeone copied us in Silicon Valley, so we renamed ourselves after\none of the coolest tricks in the lambda calculus, the Y combinator.I picked orange as our color partly because it's the warmest, and\npartly because no VC used it. In 2005 all the VCs used staid colors\nlike maroon, navy blue, and forest green, because they were trying\nto appeal to LPs, not founders. The YC logo itself is an inside\njoke: the Viaweb logo had been a white V on a red circle, so I made\nthe YC logo a white Y on an orange square.[14]\nYC did become a fund for a couple years starting in 2009,\nbecause it was getting so big I could no longer afford to fund it\npersonally. But after Heroku got bought we had enough money to go\nback to being self-funded.[15]\nI've never liked the term \"deal flow,\" because it implies\nthat the number of new startups at any given time is fixed. This\nis not only false, but it's the purpose of YC to falsify it, by\ncausing startups to be founded that would not otherwise have existed.[16]\nShe reports that they were all different shapes and sizes,\nbecause there was a run on air conditioners and she had to get\nwhatever she could, but that they were all heavier than she could\ncarry now.[17]\nAnother problem with HN was a bizarre edge case that occurs\nwhen you both write essays and run a forum. When you run a forum,\nyou're assumed to see if not every conversation, at least every\nconversation involving you. And when you write essays, people post\nhighly imaginative misinterpretations of them on forums. Individually\nthese two phenomena are tedious but bearable, but the combination\nis disastrous.",
        "start_char_idx": 69073,
        "end_char_idx": 73298,
        "text_template": "{metadata_str}\n\n{content}",
        "metadata_template": "{key}: {value}",
        "metadata_seperator": "\n",
        "class_name": "TextNode"
      },
      "__type__": "1"
    },
    "655cc94b-1685-4b9d-b251-0daf7c6af2d8": {
      "__data__": {
        "id_": "655cc94b-1685-4b9d-b251-0daf7c6af2d8",
        "embedding": null,
        "metadata": {
          "source": "https://paulgraham.com/worked.html",
          "title": "What I Worked On",
          "language": null
        },
        "excluded_embed_metadata_keys": [],
        "excluded_llm_metadata_keys": [],
        "relationships": {
          "1": {
            "node_id": "775a1596-77f5-4642-80af-2f9ead7f2134",
            "node_type": "4",
            "metadata": {
              "source": "https://paulgraham.com/worked.html",
              "title": "What I Worked On",
              "language": null
            },
            "hash": "e6f0c014baa56ff32c4861f00fbfca70286719ce1bee1272e3af5f423a7217ff",
            "class_name": "RelatedNodeInfo"
          },
          "2": {
            "node_id": "bc8b8b93-eaf4-469a-b8bb-4493d1ea82da",
            "node_type": "1",
            "metadata": {
              "source": "https://paulgraham.com/worked.html",
              "title": "What I Worked On",
              "language": null
            },
            "hash": "088d30940cfcf378cc8795ffe795eed679ab98b1c899dfa23790043fa4fb94c0",
            "class_name": "RelatedNodeInfo"
          },
          "3": {
            "node_id": "b18ecf5c-e61c-4920-a86a-1e790216fd26",
            "node_type": "1",
            "metadata": {},
            "hash": "f965ae7016d429e06da23980489e4ac8909037b9d968d56247d331441481f6c8",
            "class_name": "RelatedNodeInfo"
          }
        },
        "text": "This\nis not only false, but it's the purpose of YC to falsify it, by\ncausing startups to be founded that would not otherwise have existed.[16]\nShe reports that they were all different shapes and sizes,\nbecause there was a run on air conditioners and she had to get\nwhatever she could, but that they were all heavier than she could\ncarry now.[17]\nAnother problem with HN was a bizarre edge case that occurs\nwhen you both write essays and run a forum. When you run a forum,\nyou're assumed to see if not every conversation, at least every\nconversation involving you. And when you write essays, people post\nhighly imaginative misinterpretations of them on forums. Individually\nthese two phenomena are tedious but bearable, but the combination\nis disastrous. You actually have to respond to the misinterpretations,\nbecause the assumption that you're present in the conversation means\nthat not responding to any sufficiently upvoted misinterpretation\nreads as a tacit admission that it's correct. But that in turn\nencourages more; anyone who wants to pick a fight with you senses\nthat now is their chance.[18]\nThe worst thing about leaving YC was not working with Jessica\nanymore. We'd been working on YC almost the whole time we'd known\neach other, and we'd neither tried nor wanted to separate it from\nour personal lives, so leaving was like pulling up a deeply rooted\ntree.[19]\nOne way to get more precise about the concept of invented vs\ndiscovered is to talk about space aliens. Any sufficiently advanced\nalien civilization would certainly know about the Pythagorean\ntheorem, for example. I believe, though with less certainty, that\nthey would also know about the Lisp in McCarthy's 1960 paper.But if so there's no reason to suppose that this is the limit of\nthe language that might be known to them. Presumably aliens need\nnumbers and errors and I/O too. So it seems likely there exists at\nleast one path out of McCarthy's Lisp along which discoveredness\nis preserved.Thanks to Trevor Blackwell, John Collison, Patrick Collison, Daniel\nGackle, Ralph Hazell, Jessica Livingston, Robert Morris, and Harj\nTaggar for reading drafts of this.",
        "start_char_idx": 72545,
        "end_char_idx": 74681,
        "text_template": "{metadata_str}\n\n{content}",
        "metadata_template": "{key}: {value}",
        "metadata_seperator": "\n",
        "class_name": "TextNode"
      },
      "__type__": "1"
    },
    "b18ecf5c-e61c-4920-a86a-1e790216fd26": {
      "__data__": {
        "id_": "b18ecf5c-e61c-4920-a86a-1e790216fd26",
        "embedding": null,
        "metadata": {
          "source": "https://paulgraham.com/greatwork.html",
          "title": "How to Do Great Work",
          "language": null
        },
        "excluded_embed_metadata_keys": [],
        "excluded_llm_metadata_keys": [],
        "relationships": {
          "1": {
            "node_id": "1760b2bf-567c-445d-b307-22e6f964e9b7",
            "node_type": "4",
            "metadata": {
              "source": "https://paulgraham.com/greatwork.html",
              "title": "How to Do Great Work",
              "language": null
            },
            "hash": "7ef2dd1e485a09fc74a12b799f79779693cb40b648a2ee6cbf61621442038e83",
            "class_name": "RelatedNodeInfo"
          },
          "2": {
            "node_id": "655cc94b-1685-4b9d-b251-0daf7c6af2d8",
            "node_type": "1",
            "metadata": {
              "source": "https://paulgraham.com/worked.html",
              "title": "What I Worked On",
              "language": null
            },
            "hash": "d555954f39cb0c912a64e74986a8bb6e91aefeb9a35287626a6fee5dba3c4956",
            "class_name": "RelatedNodeInfo"
          },
          "3": {
            "node_id": "691f2189-cffa-4537-8ed4-3cae0ec5a0c7",
            "node_type": "1",
            "metadata": {},
            "hash": "e43d24c4b3a97ffb970c52d1a4740d393c874764f8a2604bb6c67bb45d0aa2b7",
            "class_name": "RelatedNodeInfo"
          }
        },
        "text": "How to Do Great Work\n\nJuly 2023If you collected lists of techniques for doing great work in a lot\nof different fields, what would the intersection look like? I decided\nto find out by making it.Partly my goal was to create a guide that could be used by someone\nworking in any field. But I was also curious about the shape of the\nintersection. And one thing this exercise shows is that it does\nhave a definite shape; it's not just a point labelled \"work hard.\"The following recipe assumes you're very ambitious.\nThe first step is to decide what to work on. The work you choose\nneeds to have three qualities: it has to be something you have a\nnatural aptitude for, that you have a deep interest in, and that\noffers scope to do great work.In practice you don't have to worry much about the third criterion.\nAmbitious people are if anything already too conservative about it.\nSo all you need to do is find something you have an aptitude for\nand great interest in.\n[1]That sounds straightforward, but it's often quite difficult. When\nyou're young you don't know what you're good at or what different\nkinds of work are like. Some kinds of work you end up doing may not\neven exist yet. So while some people know what they want to do at\n14, most have to figure it out.The way to figure out what to work on is by working. If you're not\nsure what to work on, guess. But pick something and get going.\nYou'll probably guess wrong some of the time, but that's fine. It's\ngood to know about multiple things; some of the biggest discoveries\ncome from noticing connections between different fields.Develop a habit of working on your own projects. Don't let \"work\"\nmean something other people tell you to do. If you do manage to do\ngreat work one day, it will probably be on a project of your own.\nIt may be within some bigger project, but you'll be driving your\npart of it.What should your projects be? Whatever seems to you excitingly\nambitious. As you grow older and your taste in projects evolves,\nexciting and important will converge. At 7 it may seem excitingly\nambitious to build huge things out of Lego, then at 14 to teach\nyourself calculus, till at 21 you're starting to explore unanswered\nquestions in physics. But always preserve excitingness.There's a kind of excited curiosity that's both the engine and the\nrudder of great work. It will not only drive you, but if you let\nit have its way, will also show you what to work on.What are you excessively curious about \u2014 curious to a degree that\nwould bore most other people? That's what you're looking for.Once you've found something you're excessively interested in, the\nnext step is to learn enough about it to get you to one of the\nfrontiers of knowledge. Knowledge expands fractally, and from a\ndistance its edges look smooth, but once you learn enough to get\nclose to one, they turn out to be full of gaps.The next step is to notice them. This takes some skill, because\nyour brain wants to ignore such gaps in order to make a simpler\nmodel of the world. Many discoveries have come from asking questions\nabout things that everyone else took for granted. \n[2]If the answers seem strange, so much the better. Great work often\nhas a tincture of strangeness. You see this from painting to math.\nIt would be affected to try to manufacture it, but if it appears,\nembrace it.Boldly chase outlier ideas, even if other people aren't interested\nin them \u2014 in fact, especially if they aren't. If you're excited\nabout some possibility that everyone else ignores, and you have\nenough expertise to say precisely what they're all overlooking,\nthat's as good a bet as you'll find.\n[3]Four steps: choose a field, learn enough to get to the frontier,\nnotice gaps, explore promising ones. This is how practically everyone\nwho's done great work has done it, from painters to physicists.Steps two and four will require hard work. It may not be possible\nto prove that you have to work hard to do great things, but the\nempirical evidence is on the scale of the evidence for mortality.\nThat's why it's essential to work on something you're deeply\ninterested in. Interest will drive you to work harder than mere\ndiligence ever could.The three most powerful motives are curiosity, delight, and the\ndesire to do something impressive.",
        "start_char_idx": 0,
        "end_char_idx": 4251,
        "text_template": "{metadata_str}\n\n{content}",
        "metadata_template": "{key}: {value}",
        "metadata_seperator": "\n",
        "class_name": "TextNode"
      },
      "__type__": "1"
    },
    "691f2189-cffa-4537-8ed4-3cae0ec5a0c7": {
      "__data__": {
        "id_": "691f2189-cffa-4537-8ed4-3cae0ec5a0c7",
        "embedding": null,
        "metadata": {
          "source": "https://paulgraham.com/greatwork.html",
          "title": "How to Do Great Work",
          "language": null
        },
        "excluded_embed_metadata_keys": [],
        "excluded_llm_metadata_keys": [],
        "relationships": {
          "1": {
            "node_id": "1760b2bf-567c-445d-b307-22e6f964e9b7",
            "node_type": "4",
            "metadata": {
              "source": "https://paulgraham.com/greatwork.html",
              "title": "How to Do Great Work",
              "language": null
            },
            "hash": "7ef2dd1e485a09fc74a12b799f79779693cb40b648a2ee6cbf61621442038e83",
            "class_name": "RelatedNodeInfo"
          },
          "2": {
            "node_id": "b18ecf5c-e61c-4920-a86a-1e790216fd26",
            "node_type": "1",
            "metadata": {
              "source": "https://paulgraham.com/greatwork.html",
              "title": "How to Do Great Work",
              "language": null
            },
            "hash": "ae2ab56d1f59949bfe3bcf11e7fc0c355f63b3a8ff20ba5389ee9366ee85b619",
            "class_name": "RelatedNodeInfo"
          },
          "3": {
            "node_id": "d07d3e7c-3c64-4503-946a-01d747499b7b",
            "node_type": "1",
            "metadata": {},
            "hash": "0448a48eed2db42be99a90bb5c9652dbc985df26c8f5bdff5e49b8d5285f5dd3",
            "class_name": "RelatedNodeInfo"
          }
        },
        "text": "If you're excited\nabout some possibility that everyone else ignores, and you have\nenough expertise to say precisely what they're all overlooking,\nthat's as good a bet as you'll find.\n[3]Four steps: choose a field, learn enough to get to the frontier,\nnotice gaps, explore promising ones. This is how practically everyone\nwho's done great work has done it, from painters to physicists.Steps two and four will require hard work. It may not be possible\nto prove that you have to work hard to do great things, but the\nempirical evidence is on the scale of the evidence for mortality.\nThat's why it's essential to work on something you're deeply\ninterested in. Interest will drive you to work harder than mere\ndiligence ever could.The three most powerful motives are curiosity, delight, and the\ndesire to do something impressive. Sometimes they converge, and\nthat combination is the most powerful of all.The big prize is to discover a new fractal bud. You notice a crack\nin the surface of knowledge, pry it open, and there's a whole world\ninside.Let's talk a little more about the complicated business of figuring\nout what to work on. The main reason it's hard is that you can't\ntell what most kinds of work are like except by doing them. Which\nmeans the four steps overlap: you may have to work at something for\nyears before you know how much you like it or how good you are at\nit. And in the meantime you're not doing, and thus not learning\nabout, most other kinds of work. So in the worst case you choose\nlate based on very incomplete information.\n[4]The nature of ambition exacerbates this problem. Ambition comes in\ntwo forms, one that precedes interest in the subject and one that\ngrows out of it. Most people who do great work have a mix, and the\nmore you have of the former, the harder it will be to decide what\nto do.The educational systems in most countries pretend it's easy. They\nexpect you to commit to a field long before you could know what\nit's really like. And as a result an ambitious person on an optimal\ntrajectory will often read to the system as an instance of breakage.It would be better if they at least admitted it \u2014 if they admitted\nthat the system not only can't do much to help you figure out what\nto work on, but is designed on the assumption that you'll somehow\nmagically guess as a teenager. They don't tell you, but I will:\nwhen it comes to figuring out what to work on, you're on your own.\nSome people get lucky and do guess correctly, but the rest will\nfind themselves scrambling diagonally across tracks laid down on\nthe assumption that everyone does.What should you do if you're young and ambitious but don't know\nwhat to work on? What you should not do is drift along passively,\nassuming the problem will solve itself. You need to take action.\nBut there is no systematic procedure you can follow. When you read\nbiographies of people who've done great work, it's remarkable how\nmuch luck is involved. They discover what to work on as a result\nof a chance meeting, or by reading a book they happen to pick up.\nSo you need to make yourself a big target for luck, and the way to\ndo that is to be curious. Try lots of things, meet lots of people,\nread lots of books, ask lots of questions.\n[5]When in doubt, optimize for interestingness. Fields change as you\nlearn more about them. What mathematicians do, for example, is very\ndifferent from what you do in high school math classes. So you need\nto give different types of work a chance to show you what they're\nlike. But a field should become increasingly interesting as you\nlearn more about it. If it doesn't, it's probably not for you.Don't worry if you find you're interested in different things than\nother people. The stranger your tastes in interestingness, the\nbetter. Strange tastes are often strong ones, and a strong taste\nfor work means you'll be productive. And you're more likely to find\nnew things if you're looking where few have looked before.One sign that you're suited for some kind of work is when you like\neven the parts that other people find tedious or frightening.But fields aren't people; you don't owe them any loyalty.",
        "start_char_idx": 3427,
        "end_char_idx": 7547,
        "text_template": "{metadata_str}\n\n{content}",
        "metadata_template": "{key}: {value}",
        "metadata_seperator": "\n",
        "class_name": "TextNode"
      },
      "__type__": "1"
    },
    "d07d3e7c-3c64-4503-946a-01d747499b7b": {
      "__data__": {
        "id_": "d07d3e7c-3c64-4503-946a-01d747499b7b",
        "embedding": null,
        "metadata": {
          "source": "https://paulgraham.com/greatwork.html",
          "title": "How to Do Great Work",
          "language": null
        },
        "excluded_embed_metadata_keys": [],
        "excluded_llm_metadata_keys": [],
        "relationships": {
          "1": {
            "node_id": "1760b2bf-567c-445d-b307-22e6f964e9b7",
            "node_type": "4",
            "metadata": {
              "source": "https://paulgraham.com/greatwork.html",
              "title": "How to Do Great Work",
              "language": null
            },
            "hash": "7ef2dd1e485a09fc74a12b799f79779693cb40b648a2ee6cbf61621442038e83",
            "class_name": "RelatedNodeInfo"
          },
          "2": {
            "node_id": "691f2189-cffa-4537-8ed4-3cae0ec5a0c7",
            "node_type": "1",
            "metadata": {
              "source": "https://paulgraham.com/greatwork.html",
              "title": "How to Do Great Work",
              "language": null
            },
            "hash": "3cb7464f00555a6332db76627a214fdc6c5c0a95071cdad41585bf6bb4cfe351",
            "class_name": "RelatedNodeInfo"
          },
          "3": {
            "node_id": "d1f1fed0-52b3-4987-95eb-6cd3e26ea311",
            "node_type": "1",
            "metadata": {},
            "hash": "ff24cb46067ee5cee538fe25a1788d2e12a763ac5de0b1b606050d92364d6fc0",
            "class_name": "RelatedNodeInfo"
          }
        },
        "text": "Fields change as you\nlearn more about them. What mathematicians do, for example, is very\ndifferent from what you do in high school math classes. So you need\nto give different types of work a chance to show you what they're\nlike. But a field should become increasingly interesting as you\nlearn more about it. If it doesn't, it's probably not for you.Don't worry if you find you're interested in different things than\nother people. The stranger your tastes in interestingness, the\nbetter. Strange tastes are often strong ones, and a strong taste\nfor work means you'll be productive. And you're more likely to find\nnew things if you're looking where few have looked before.One sign that you're suited for some kind of work is when you like\neven the parts that other people find tedious or frightening.But fields aren't people; you don't owe them any loyalty. If in the\ncourse of working on one thing you discover another that's more\nexciting, don't be afraid to switch.If you're making something for people, make sure it's something\nthey actually want. The best way to do this is to make something\nyou yourself want. Write the story you want to read; build the tool\nyou want to use. Since your friends probably have similar interests,\nthis will also get you your initial audience.This should follow from the excitingness rule. Obviously the most\nexciting story to write will be the one you want to read. The reason\nI mention this case explicitly is that so many people get it wrong.\nInstead of making what they want, they try to make what some\nimaginary, more sophisticated audience wants. And once you go down\nthat route, you're lost.\n[6]There are a lot of forces that will lead you astray when you're\ntrying to figure out what to work on. Pretentiousness, fashion,\nfear, money, politics, other people's wishes, eminent frauds. But\nif you stick to what you find genuinely interesting, you'll be proof\nagainst all of them. If you're interested, you're not astray.\nFollowing your interests may sound like a rather passive strategy,\nbut in practice it usually means following them past all sorts of\nobstacles. You usually have to risk rejection and failure. So it\ndoes take a good deal of boldness.But while you need boldness, you don't usually need much planning.\nIn most cases the recipe for doing great work is simply: work hard\non excitingly ambitious projects, and something good will come of\nit. Instead of making a plan and then executing it, you just try\nto preserve certain invariants.The trouble with planning is that it only works for achievements\nyou can describe in advance. You can win a gold medal or get rich\nby deciding to as a child and then tenaciously pursuing that goal,\nbut you can't discover natural selection that way.I think for most people who want to do great work, the right strategy\nis not to plan too much. At each stage do whatever seems most\ninteresting and gives you the best options for the future. I call\nthis approach \"staying upwind.\" This is how most people who've done\ngreat work seem to have done it.\nEven when you've found something exciting to work on, working on\nit is not always straightforward. There will be times when some new\nidea makes you leap out of bed in the morning and get straight to\nwork. But there will also be plenty of times when things aren't\nlike that.You don't just put out your sail and get blown forward by inspiration.\nThere are headwinds and currents and hidden shoals. So there's a\ntechnique to working, just as there is to sailing.For example, while you must work hard, it's possible to work too\nhard, and if you do that you'll find you get diminishing returns:\nfatigue will make you stupid, and eventually even damage your health.\nThe point at which work yields diminishing returns depends on the\ntype. Some of the hardest types you might only be able to do for\nfour or five hours a day.Ideally those hours will be contiguous. To the extent you can, try\nto arrange your life so you have big blocks of time to work in.\nYou'll shy away from hard tasks if you know you might be interrupted.It will probably be harder to start working than to keep working.\nYou'll often have to trick yourself to get over that initial\nthreshold. Don't worry about this; it's the nature of work, not a\nflaw in your character.",
        "start_char_idx": 6692,
        "end_char_idx": 10960,
        "text_template": "{metadata_str}\n\n{content}",
        "metadata_template": "{key}: {value}",
        "metadata_seperator": "\n",
        "class_name": "TextNode"
      },
      "__type__": "1"
    },
    "d1f1fed0-52b3-4987-95eb-6cd3e26ea311": {
      "__data__": {
        "id_": "d1f1fed0-52b3-4987-95eb-6cd3e26ea311",
        "embedding": null,
        "metadata": {
          "source": "https://paulgraham.com/greatwork.html",
          "title": "How to Do Great Work",
          "language": null
        },
        "excluded_embed_metadata_keys": [],
        "excluded_llm_metadata_keys": [],
        "relationships": {
          "1": {
            "node_id": "1760b2bf-567c-445d-b307-22e6f964e9b7",
            "node_type": "4",
            "metadata": {
              "source": "https://paulgraham.com/greatwork.html",
              "title": "How to Do Great Work",
              "language": null
            },
            "hash": "7ef2dd1e485a09fc74a12b799f79779693cb40b648a2ee6cbf61621442038e83",
            "class_name": "RelatedNodeInfo"
          },
          "2": {
            "node_id": "d07d3e7c-3c64-4503-946a-01d747499b7b",
            "node_type": "1",
            "metadata": {
              "source": "https://paulgraham.com/greatwork.html",
              "title": "How to Do Great Work",
              "language": null
            },
            "hash": "befc69d4e82762d4123eb53befc52ec35579e6d0ae121389f26e447c689b603d",
            "class_name": "RelatedNodeInfo"
          },
          "3": {
            "node_id": "60c91bd4-1ff2-4088-9738-4bb341bc6f94",
            "node_type": "1",
            "metadata": {},
            "hash": "5d182d8356480ed09e3be5e6d8adbd8013064865947cc794f2d6762be4f07bca",
            "class_name": "RelatedNodeInfo"
          }
        },
        "text": "So there's a\ntechnique to working, just as there is to sailing.For example, while you must work hard, it's possible to work too\nhard, and if you do that you'll find you get diminishing returns:\nfatigue will make you stupid, and eventually even damage your health.\nThe point at which work yields diminishing returns depends on the\ntype. Some of the hardest types you might only be able to do for\nfour or five hours a day.Ideally those hours will be contiguous. To the extent you can, try\nto arrange your life so you have big blocks of time to work in.\nYou'll shy away from hard tasks if you know you might be interrupted.It will probably be harder to start working than to keep working.\nYou'll often have to trick yourself to get over that initial\nthreshold. Don't worry about this; it's the nature of work, not a\nflaw in your character. Work has a sort of activation energy, both\nper day and per project. And since this threshold is fake in the\nsense that it's higher than the energy required to keep going, it's\nok to tell yourself a lie of corresponding magnitude to get over\nit.It's usually a mistake to lie to yourself if you want to do great\nwork, but this is one of the rare cases where it isn't. When I'm\nreluctant to start work in the morning, I often trick myself by\nsaying \"I'll just read over what I've got so far.\" Five minutes\nlater I've found something that seems mistaken or incomplete, and\nI'm off.Similar techniques work for starting new projects. It's ok to lie\nto yourself about how much work a project will entail, for example.\nLots of great things began with someone saying \"How hard could it\nbe?\"This is one case where the young have an advantage. They're more\noptimistic, and even though one of the sources of their optimism\nis ignorance, in this case ignorance can sometimes beat knowledge.Try to finish what you start, though, even if it turns out to be\nmore work than you expected. Finishing things is not just an exercise\nin tidiness or self-discipline. In many projects a lot of the best\nwork happens in what was meant to be the final stage.Another permissible lie is to exaggerate the importance of what\nyou're working on, at least in your own mind. If that helps you\ndiscover something new, it may turn out not to have been a lie after\nall.\n[7]\nSince there are two senses of starting work \u2014 per day and per\nproject \u2014 there are also two forms of procrastination. Per-project\nprocrastination is far the more dangerous. You put off starting\nthat ambitious project from year to year because the time isn't\nquite right. When you're procrastinating in units of years, you can\nget a lot not done.\n[8]One reason per-project procrastination is so dangerous is that it\nusually camouflages itself as work. You're not just sitting around\ndoing nothing; you're working industriously on something else. So\nper-project procrastination doesn't set off the alarms that per-day\nprocrastination does. You're too busy to notice it.The way to beat it is to stop occasionally and ask yourself: Am I\nworking on what I most want to work on? When you're young it's ok\nif the answer is sometimes no, but this gets increasingly dangerous\nas you get older.\n[9]\nGreat work usually entails spending what would seem to most people\nan unreasonable amount of time on a problem. You can't think of\nthis time as a cost, or it will seem too high. You have to find the\nwork sufficiently engaging as it's happening.There may be some jobs where you have to work diligently for years\nat things you hate before you get to the good part, but this is not\nhow great work happens. Great work happens by focusing consistently\non something you're genuinely interested in. When you pause to take\nstock, you're surprised how far you've come.The reason we're surprised is that we underestimate the cumulative\neffect of work. Writing a page a day doesn't sound like much, but\nif you do it every day you'll write a book a year. That's the key:\nconsistency. People who do great things don't get a lot done every\nday. They get something done, rather than nothing.If you do work that compounds, you'll get exponential growth. Most\npeople who do this do it unconsciously, but it's worth stopping to\nthink about.",
        "start_char_idx": 10124,
        "end_char_idx": 14309,
        "text_template": "{metadata_str}\n\n{content}",
        "metadata_template": "{key}: {value}",
        "metadata_seperator": "\n",
        "class_name": "TextNode"
      },
      "__type__": "1"
    },
    "60c91bd4-1ff2-4088-9738-4bb341bc6f94": {
      "__data__": {
        "id_": "60c91bd4-1ff2-4088-9738-4bb341bc6f94",
        "embedding": null,
        "metadata": {
          "source": "https://paulgraham.com/greatwork.html",
          "title": "How to Do Great Work",
          "language": null
        },
        "excluded_embed_metadata_keys": [],
        "excluded_llm_metadata_keys": [],
        "relationships": {
          "1": {
            "node_id": "1760b2bf-567c-445d-b307-22e6f964e9b7",
            "node_type": "4",
            "metadata": {
              "source": "https://paulgraham.com/greatwork.html",
              "title": "How to Do Great Work",
              "language": null
            },
            "hash": "7ef2dd1e485a09fc74a12b799f79779693cb40b648a2ee6cbf61621442038e83",
            "class_name": "RelatedNodeInfo"
          },
          "2": {
            "node_id": "d1f1fed0-52b3-4987-95eb-6cd3e26ea311",
            "node_type": "1",
            "metadata": {
              "source": "https://paulgraham.com/greatwork.html",
              "title": "How to Do Great Work",
              "language": null
            },
            "hash": "fe2db6e60020b4c50b89b5f9563aee6029ec0d3ddce089ce271d9a986ef0ae03",
            "class_name": "RelatedNodeInfo"
          },
          "3": {
            "node_id": "27efba46-99ea-4352-afdc-79a7485e8213",
            "node_type": "1",
            "metadata": {},
            "hash": "e394a5f6078fc2270d84c71cd0e448ad0a5c8a6b21ae885c4c50a2454e4aea68",
            "class_name": "RelatedNodeInfo"
          }
        },
        "text": "You have to find the\nwork sufficiently engaging as it's happening.There may be some jobs where you have to work diligently for years\nat things you hate before you get to the good part, but this is not\nhow great work happens. Great work happens by focusing consistently\non something you're genuinely interested in. When you pause to take\nstock, you're surprised how far you've come.The reason we're surprised is that we underestimate the cumulative\neffect of work. Writing a page a day doesn't sound like much, but\nif you do it every day you'll write a book a year. That's the key:\nconsistency. People who do great things don't get a lot done every\nday. They get something done, rather than nothing.If you do work that compounds, you'll get exponential growth. Most\npeople who do this do it unconsciously, but it's worth stopping to\nthink about. Learning, for example, is an instance of this phenomenon:\nthe more you learn about something, the easier it is to learn more.\nGrowing an audience is another: the more fans you have, the more\nnew fans they'll bring you.The trouble with exponential growth is that the curve feels flat\nin the beginning. It isn't; it's still a wonderful exponential\ncurve. But we can't grasp that intuitively, so we underrate exponential\ngrowth in its early stages.Something that grows exponentially can become so valuable that it's\nworth making an extraordinary effort to get it started. But since\nwe underrate exponential growth early on, this too is mostly done\nunconsciously: people push through the initial, unrewarding phase\nof learning something new because they know from experience that\nlearning new things always takes an initial push, or they grow their\naudience one fan at a time because they have nothing better to do.\nIf people consciously realized they could invest in exponential\ngrowth, many more would do it.\nWork doesn't just happen when you're trying to. There's a kind of\nundirected thinking you do when walking or taking a shower or lying\nin bed that can be very powerful. By letting your mind wander a\nlittle, you'll often solve problems you were unable to solve by\nfrontal attack.You have to be working hard in the normal way to benefit from this\nphenomenon, though. You can't just walk around daydreaming. The\ndaydreaming has to be interleaved with deliberate work that feeds\nit questions.\n[10]Everyone knows to avoid distractions at work, but it's also important\nto avoid them in the other half of the cycle. When you let your\nmind wander, it wanders to whatever you care about most at that\nmoment. So avoid the kind of distraction that pushes your work out\nof the top spot, or you'll waste this valuable type of thinking on\nthe distraction instead. (Exception: Don't avoid love.)\nConsciously cultivate your taste in the work done in your field.\nUntil you know which is the best and what makes it so, you don't\nknow what you're aiming for.And that is what you're aiming for, because if you don't try to\nbe the best, you won't even be good. This observation has been made\nby so many people in so many different fields that it might be worth\nthinking about why it's true. It could be because ambition is a\nphenomenon where almost all the error is in one direction \u2014 where\nalmost all the shells that miss the target miss by falling short.\nOr it could be because ambition to be the best is a qualitatively\ndifferent thing from ambition to be good. Or maybe being good is\nsimply too vague a standard. Probably all three are true.\n[11]Fortunately there's a kind of economy of scale here. Though it might\nseem like you'd be taking on a heavy burden by trying to be the\nbest, in practice you often end up net ahead. It's exciting, and\nalso strangely liberating. It simplifies things. In some ways it's\neasier to try to be the best than to try merely to be good.One way to aim high is to try to make something that people will\ncare about in a hundred years. Not because their opinions matter\nmore than your contemporaries', but because something that still\nseems good in a hundred years is more likely to be genuinely good.\nDon't try to work in a distinctive style. Just try to do the best\njob you can; you won't be able to help doing it in a distinctive\nway.Style is doing things in a distinctive way without trying to.",
        "start_char_idx": 13465,
        "end_char_idx": 17727,
        "text_template": "{metadata_str}\n\n{content}",
        "metadata_template": "{key}: {value}",
        "metadata_seperator": "\n",
        "class_name": "TextNode"
      },
      "__type__": "1"
    },
    "27efba46-99ea-4352-afdc-79a7485e8213": {
      "__data__": {
        "id_": "27efba46-99ea-4352-afdc-79a7485e8213",
        "embedding": null,
        "metadata": {
          "source": "https://paulgraham.com/greatwork.html",
          "title": "How to Do Great Work",
          "language": null
        },
        "excluded_embed_metadata_keys": [],
        "excluded_llm_metadata_keys": [],
        "relationships": {
          "1": {
            "node_id": "1760b2bf-567c-445d-b307-22e6f964e9b7",
            "node_type": "4",
            "metadata": {
              "source": "https://paulgraham.com/greatwork.html",
              "title": "How to Do Great Work",
              "language": null
            },
            "hash": "7ef2dd1e485a09fc74a12b799f79779693cb40b648a2ee6cbf61621442038e83",
            "class_name": "RelatedNodeInfo"
          },
          "2": {
            "node_id": "60c91bd4-1ff2-4088-9738-4bb341bc6f94",
            "node_type": "1",
            "metadata": {
              "source": "https://paulgraham.com/greatwork.html",
              "title": "How to Do Great Work",
              "language": null
            },
            "hash": "24979f48decb641a29f160d11346369c108e0d82c2603032f7a75ee9e9ea2228",
            "class_name": "RelatedNodeInfo"
          },
          "3": {
            "node_id": "f3c5ea33-d21c-430a-9bc8-c2bc40376191",
            "node_type": "1",
            "metadata": {},
            "hash": "9edbcfd773d6b502c979b82e023a42b84372c4352f6fdde68f7f57caeedbf4ab",
            "class_name": "RelatedNodeInfo"
          }
        },
        "text": "Probably all three are true.\n[11]Fortunately there's a kind of economy of scale here. Though it might\nseem like you'd be taking on a heavy burden by trying to be the\nbest, in practice you often end up net ahead. It's exciting, and\nalso strangely liberating. It simplifies things. In some ways it's\neasier to try to be the best than to try merely to be good.One way to aim high is to try to make something that people will\ncare about in a hundred years. Not because their opinions matter\nmore than your contemporaries', but because something that still\nseems good in a hundred years is more likely to be genuinely good.\nDon't try to work in a distinctive style. Just try to do the best\njob you can; you won't be able to help doing it in a distinctive\nway.Style is doing things in a distinctive way without trying to. Trying\nto is affectation.Affectation is in effect to pretend that someone other than you is\ndoing the work. You adopt an impressive but fake persona, and while\nyou're pleased with the impressiveness, the fakeness is what shows\nin the work.\n[12]The temptation to be someone else is greatest for the young. They\noften feel like nobodies. But you never need to worry about that\nproblem, because it's self-solving if you work on sufficiently\nambitious projects. If you succeed at an ambitious project, you're\nnot a nobody; you're the person who did it. So just do the work and\nyour identity will take care of itself.\n\"Avoid affectation\" is a useful rule so far as it goes, but how\nwould you express this idea positively? How would you say what to\nbe, instead of what not to be? The best answer is earnest. If you're\nearnest you avoid not just affectation but a whole set of similar\nvices.The core of being earnest is being intellectually honest. We're\ntaught as children to be honest as an unselfish virtue \u2014 as a kind\nof sacrifice. But in fact it's a source of power too. To see new\nideas, you need an exceptionally sharp eye for the truth. You're\ntrying to see more truth than others have seen so far. And how can\nyou have a sharp eye for the truth if you're intellectually dishonest?One way to avoid intellectual dishonesty is to maintain a slight\npositive pressure in the opposite direction. Be aggressively willing\nto admit that you're mistaken. Once you've admitted you were mistaken\nabout something, you're free. Till then you have to carry it.\n[13]Another more subtle component of earnestness is informality.\nInformality is much more important than its grammatically negative\nname implies. It's not merely the absence of something. It means\nfocusing on what matters instead of what doesn't.What formality and affectation have in common is that as well as\ndoing the work, you're trying to seem a certain way as you're doing\nit. But any energy that goes into how you seem comes out of being\ngood. That's one reason nerds have an advantage in doing great work:\nthey expend little effort on seeming anything. In fact that's\nbasically the definition of a nerd.Nerds have a kind of innocent boldness that's exactly what you need\nin doing great work. It's not learned; it's preserved from childhood.\nSo hold onto it. Be the one who puts things out there rather than\nthe one who sits back and offers sophisticated-sounding criticisms\nof them. \"It's easy to criticize\" is true in the most literal sense,\nand the route to great work is never easy.There may be some jobs where it's an advantage to be cynical and\npessimistic, but if you want to do great work it's an advantage to\nbe optimistic, even though that means you'll risk looking like a\nfool sometimes. There's an old tradition of doing the opposite. The\nOld Testament says it's better to keep quiet lest you look like a\nfool. But that's advice for seeming smart. If you actually want\nto discover new things, it's better to take the risk of telling\npeople your ideas.Some people are naturally earnest, and with others it takes a\nconscious effort. Either kind of earnestness will suffice. But I\ndoubt it would be possible to do great work without being earnest.\nIt's so hard to do even if you are.",
        "start_char_idx": 16912,
        "end_char_idx": 20975,
        "text_template": "{metadata_str}\n\n{content}",
        "metadata_template": "{key}: {value}",
        "metadata_seperator": "\n",
        "class_name": "TextNode"
      },
      "__type__": "1"
    },
    "f3c5ea33-d21c-430a-9bc8-c2bc40376191": {
      "__data__": {
        "id_": "f3c5ea33-d21c-430a-9bc8-c2bc40376191",
        "embedding": null,
        "metadata": {
          "source": "https://paulgraham.com/greatwork.html",
          "title": "How to Do Great Work",
          "language": null
        },
        "excluded_embed_metadata_keys": [],
        "excluded_llm_metadata_keys": [],
        "relationships": {
          "1": {
            "node_id": "1760b2bf-567c-445d-b307-22e6f964e9b7",
            "node_type": "4",
            "metadata": {
              "source": "https://paulgraham.com/greatwork.html",
              "title": "How to Do Great Work",
              "language": null
            },
            "hash": "7ef2dd1e485a09fc74a12b799f79779693cb40b648a2ee6cbf61621442038e83",
            "class_name": "RelatedNodeInfo"
          },
          "2": {
            "node_id": "27efba46-99ea-4352-afdc-79a7485e8213",
            "node_type": "1",
            "metadata": {
              "source": "https://paulgraham.com/greatwork.html",
              "title": "How to Do Great Work",
              "language": null
            },
            "hash": "8c33b9e96437ad3ad26d5fd09a42987081aa7065dffe9bccc31c5ec16e057039",
            "class_name": "RelatedNodeInfo"
          },
          "3": {
            "node_id": "14b2773c-e341-4fb6-aad1-85d061f9e16a",
            "node_type": "1",
            "metadata": {},
            "hash": "f1754c8c5bd3ee05e2673f4b70541744f2ce3f646cabd93c81f67c2859678161",
            "class_name": "RelatedNodeInfo"
          }
        },
        "text": "\"It's easy to criticize\" is true in the most literal sense,\nand the route to great work is never easy.There may be some jobs where it's an advantage to be cynical and\npessimistic, but if you want to do great work it's an advantage to\nbe optimistic, even though that means you'll risk looking like a\nfool sometimes. There's an old tradition of doing the opposite. The\nOld Testament says it's better to keep quiet lest you look like a\nfool. But that's advice for seeming smart. If you actually want\nto discover new things, it's better to take the risk of telling\npeople your ideas.Some people are naturally earnest, and with others it takes a\nconscious effort. Either kind of earnestness will suffice. But I\ndoubt it would be possible to do great work without being earnest.\nIt's so hard to do even if you are. You don't have enough margin\nfor error to accommodate the distortions introduced by being affected,\nintellectually dishonest, orthodox, fashionable, or cool.\n[14]\nGreat work is consistent not only with who did it, but with itself.\nIt's usually all of a piece. So if you face a decision in the middle\nof working on something, ask which choice is more consistent.You may have to throw things away and redo them. You won't necessarily\nhave to, but you have to be willing to. And that can take some\neffort; when there's something you need to redo, status quo bias\nand laziness will combine to keep you in denial about it. To beat\nthis ask: If I'd already made the change, would I want to revert\nto what I have now?Have the confidence to cut. Don't keep something that doesn't fit\njust because you're proud of it, or because it cost you a lot of\neffort.Indeed, in some kinds of work it's good to strip whatever you're\ndoing to its essence. The result will be more concentrated; you'll\nunderstand it better; and you won't be able to lie to yourself about\nwhether there's anything real there.Mathematical elegance may sound like a mere metaphor, drawn from\nthe arts. That's what I thought when I first heard the term \"elegant\"\napplied to a proof. But now I suspect it's conceptually prior \u2014 \nthat the main ingredient in artistic elegance is mathematical\nelegance. At any rate it's a useful standard well beyond math.Elegance can be a long-term bet, though. Laborious solutions will\noften have more prestige in the short term. They cost a lot of\neffort and they're hard to understand, both of which impress people,\nat least temporarily.Whereas some of the very best work will seem like it took comparatively\nlittle effort, because it was in a sense already there. It didn't\nhave to be built, just seen. It's a very good sign when it's hard\nto say whether you're creating something or discovering it.When you're doing work that could be seen as either creation or\ndiscovery, err on the side of discovery. Try thinking of yourself\nas a mere conduit through which the ideas take their natural shape.(Strangely enough, one exception is the problem of choosing a problem\nto work on. This is usually seen as search, but in the best case\nit's more like creating something. In the best case you create the\nfield in the process of exploring it.)Similarly, if you're trying to build a powerful tool, make it\ngratuitously unrestrictive. A powerful tool almost by definition\nwill be used in ways you didn't expect, so err on the side of\neliminating restrictions, even if you don't know what the benefit\nwill be.Great work will often be tool-like in the sense of being something\nothers build on. So it's a good sign if you're creating ideas that\nothers could use, or exposing questions that others could answer.\nThe best ideas have implications in many different areas.If you express your ideas in the most general form, they'll be truer\nthan you intended.\nTrue by itself is not enough, of course. Great ideas have to be\ntrue and new. And it takes a certain amount of ability to see new\nideas even once you've learned enough to get to one of the frontiers\nof knowledge.In English we give this ability names like originality, creativity,\nand imagination. And it seems reasonable to give it a separate name,\nbecause it does seem to some extent a separate skill.",
        "start_char_idx": 20167,
        "end_char_idx": 24314,
        "text_template": "{metadata_str}\n\n{content}",
        "metadata_template": "{key}: {value}",
        "metadata_seperator": "\n",
        "class_name": "TextNode"
      },
      "__type__": "1"
    },
    "14b2773c-e341-4fb6-aad1-85d061f9e16a": {
      "__data__": {
        "id_": "14b2773c-e341-4fb6-aad1-85d061f9e16a",
        "embedding": null,
        "metadata": {
          "source": "https://paulgraham.com/greatwork.html",
          "title": "How to Do Great Work",
          "language": null
        },
        "excluded_embed_metadata_keys": [],
        "excluded_llm_metadata_keys": [],
        "relationships": {
          "1": {
            "node_id": "1760b2bf-567c-445d-b307-22e6f964e9b7",
            "node_type": "4",
            "metadata": {
              "source": "https://paulgraham.com/greatwork.html",
              "title": "How to Do Great Work",
              "language": null
            },
            "hash": "7ef2dd1e485a09fc74a12b799f79779693cb40b648a2ee6cbf61621442038e83",
            "class_name": "RelatedNodeInfo"
          },
          "2": {
            "node_id": "f3c5ea33-d21c-430a-9bc8-c2bc40376191",
            "node_type": "1",
            "metadata": {
              "source": "https://paulgraham.com/greatwork.html",
              "title": "How to Do Great Work",
              "language": null
            },
            "hash": "8bda0e4c463336e848ad265045b723b8b178428c43cc802dbd90b3177b8a5dd9",
            "class_name": "RelatedNodeInfo"
          },
          "3": {
            "node_id": "043581dc-ddb9-4ebe-8723-f027867d4afe",
            "node_type": "1",
            "metadata": {},
            "hash": "d9623401aa51a2b8b3d0ad6ae1cc7c5f91e0971a428b4a63e7709ce19978a048",
            "class_name": "RelatedNodeInfo"
          }
        },
        "text": "So it's a good sign if you're creating ideas that\nothers could use, or exposing questions that others could answer.\nThe best ideas have implications in many different areas.If you express your ideas in the most general form, they'll be truer\nthan you intended.\nTrue by itself is not enough, of course. Great ideas have to be\ntrue and new. And it takes a certain amount of ability to see new\nideas even once you've learned enough to get to one of the frontiers\nof knowledge.In English we give this ability names like originality, creativity,\nand imagination. And it seems reasonable to give it a separate name,\nbecause it does seem to some extent a separate skill. It's possible\nto have a great deal of ability in other respects \u2014 to have a great\ndeal of what's often called \"technical ability\" \u2014 and yet not have\nmuch of this.I've never liked the term \"creative process.\" It seems misleading.\nOriginality isn't a process, but a habit of mind. Original thinkers\nthrow off new ideas about whatever they focus on, like an angle\ngrinder throwing off sparks. They can't help it.If the thing they're focused on is something they don't understand\nvery well, these new ideas might not be good. One of the most\noriginal thinkers I know decided to focus on dating after he got\ndivorced. He knew roughly as much about dating as the average 15\nyear old, and the results were spectacularly colorful. But to see\noriginality separated from expertise like that made its nature all\nthe more clear.I don't know if it's possible to cultivate originality, but there\nare definitely ways to make the most of however much you have. For\nexample, you're much more likely to have original ideas when you're\nworking on something. Original ideas don't come from trying to have\noriginal ideas. They come from trying to build or understand something\nslightly too difficult.\n[15]Talking or writing about the things you're interested in is a good\nway to generate new ideas. When you try to put ideas into words, a\nmissing idea creates a sort of vacuum that draws it out of you.\nIndeed, there's a kind of thinking that can only be done by writing.Changing your context can help. If you visit a new place, you'll\noften find you have new ideas there. The journey itself often\ndislodges them. But you may not have to go far to get this benefit.\nSometimes it's enough just to go for a walk.\n[16]It also helps to travel in topic space. You'll have more new ideas\nif you explore lots of different topics, partly because it gives\nthe angle grinder more surface area to work on, and partly because\nanalogies are an especially fruitful source of new ideas.Don't divide your attention evenly between many topics though,\nor you'll spread yourself too thin. You want to distribute it\naccording to something more like a power law.\n[17]\nBe professionally\ncurious about a few topics and idly curious about many more.Curiosity and originality are closely related. Curiosity feeds\noriginality by giving it new things to work on. But the relationship\nis closer than that. Curiosity is itself a kind of originality;\nit's roughly to questions what originality is to answers. And since\nquestions at their best are a big component of answers, curiosity\nat its best is a creative force.\nHaving new ideas is a strange game, because it usually consists of\nseeing things that were right under your nose. Once you've seen a\nnew idea, it tends to seem obvious. Why did no one think of this\nbefore?When an idea seems simultaneously novel and obvious, it's probably\na good one.Seeing something obvious sounds easy. And yet empirically having\nnew ideas is hard. What's the source of this apparent contradiction?\nIt's that seeing the new idea usually requires you to change the\nway you look at the world. We see the world through models that\nboth help and constrain us. When you fix a broken model, new ideas\nbecome obvious. But noticing and fixing a broken model is hard.\nThat's how new ideas can be both obvious and yet hard to discover:\nthey're easy to see after you do something hard.One way to discover broken models is to be stricter than other\npeople. Broken models of the world leave a trail of clues where\nthey bash against reality. Most people don't want to see these\nclues.",
        "start_char_idx": 23651,
        "end_char_idx": 27870,
        "text_template": "{metadata_str}\n\n{content}",
        "metadata_template": "{key}: {value}",
        "metadata_seperator": "\n",
        "class_name": "TextNode"
      },
      "__type__": "1"
    },
    "043581dc-ddb9-4ebe-8723-f027867d4afe": {
      "__data__": {
        "id_": "043581dc-ddb9-4ebe-8723-f027867d4afe",
        "embedding": null,
        "metadata": {
          "source": "https://paulgraham.com/greatwork.html",
          "title": "How to Do Great Work",
          "language": null
        },
        "excluded_embed_metadata_keys": [],
        "excluded_llm_metadata_keys": [],
        "relationships": {
          "1": {
            "node_id": "1760b2bf-567c-445d-b307-22e6f964e9b7",
            "node_type": "4",
            "metadata": {
              "source": "https://paulgraham.com/greatwork.html",
              "title": "How to Do Great Work",
              "language": null
            },
            "hash": "7ef2dd1e485a09fc74a12b799f79779693cb40b648a2ee6cbf61621442038e83",
            "class_name": "RelatedNodeInfo"
          },
          "2": {
            "node_id": "14b2773c-e341-4fb6-aad1-85d061f9e16a",
            "node_type": "1",
            "metadata": {
              "source": "https://paulgraham.com/greatwork.html",
              "title": "How to Do Great Work",
              "language": null
            },
            "hash": "852bcf6e764f8738a2aea7f5471cfbbaafcca521ddfff849f86ef800a57360eb",
            "class_name": "RelatedNodeInfo"
          },
          "3": {
            "node_id": "7b23b817-8a51-48f5-9dfe-54933b8ec74d",
            "node_type": "1",
            "metadata": {},
            "hash": "663dfc223615800013c770c190e2c98d49e0ea341739e4a3a172a54b0f5f3048",
            "class_name": "RelatedNodeInfo"
          }
        },
        "text": "Why did no one think of this\nbefore?When an idea seems simultaneously novel and obvious, it's probably\na good one.Seeing something obvious sounds easy. And yet empirically having\nnew ideas is hard. What's the source of this apparent contradiction?\nIt's that seeing the new idea usually requires you to change the\nway you look at the world. We see the world through models that\nboth help and constrain us. When you fix a broken model, new ideas\nbecome obvious. But noticing and fixing a broken model is hard.\nThat's how new ideas can be both obvious and yet hard to discover:\nthey're easy to see after you do something hard.One way to discover broken models is to be stricter than other\npeople. Broken models of the world leave a trail of clues where\nthey bash against reality. Most people don't want to see these\nclues. It would be an understatement to say that they're attached\nto their current model; it's what they think in; so they'll tend\nto ignore the trail of clues left by its breakage, however conspicuous\nit may seem in retrospect.To find new ideas you have to seize on signs of breakage instead\nof looking away. That's what Einstein did. He was able to see the\nwild implications of Maxwell's equations not so much because he was\nlooking for new ideas as because he was stricter.The other thing you need is a willingness to break rules. Paradoxical\nas it sounds, if you want to fix your model of the world, it helps\nto be the sort of person who's comfortable breaking rules. From the\npoint of view of the old model, which everyone including you initially\nshares, the new model usually breaks at least implicit rules.Few understand the degree of rule-breaking required, because new\nideas seem much more conservative once they succeed. They seem\nperfectly reasonable once you're using the new model of the world\nthey brought with them. But they didn't at the time; it took the\ngreater part of a century for the heliocentric model to be generally\naccepted, even among astronomers, because it felt so wrong.Indeed, if you think about it, a good new idea has to seem bad to\nmost people, or someone would have already explored it. So what\nyou're looking for is ideas that seem crazy, but the right kind of\ncrazy. How do you recognize these? You can't with certainty. Often\nideas that seem bad are bad. But ideas that are the right kind of\ncrazy tend to be exciting; they're rich in implications; whereas\nideas that are merely bad tend to be depressing.There are two ways to be comfortable breaking rules: to enjoy\nbreaking them, and to be indifferent to them. I call these two cases\nbeing aggressively and passively independent-minded.The aggressively independent-minded are the naughty ones. Rules\ndon't merely fail to stop them; breaking rules gives them additional\nenergy. For this sort of person, delight at the sheer audacity of\na project sometimes supplies enough activation energy to get it\nstarted.The other way to break rules is not to care about them, or perhaps\neven to know they exist. This is why novices and outsiders often\nmake new discoveries; their ignorance of a field's assumptions acts\nas a source of temporary passive independent-mindedness. Aspies\nalso seem to have a kind of immunity to conventional beliefs.\nSeveral I know say that this helps them to have new ideas.Strictness plus rule-breaking sounds like a strange combination.\nIn popular culture they're opposed. But popular culture has a broken\nmodel in this respect. It implicitly assumes that issues are trivial\nones, and in trivial matters strictness and rule-breaking are\nopposed. But in questions that really matter, only rule-breakers\ncan be truly strict.\nAn overlooked idea often doesn't lose till the semifinals. You do\nsee it, subconsciously, but then another part of your subconscious\nshoots it down because it would be too weird, too risky, too much\nwork, too controversial. This suggests an exciting possibility: if\nyou could turn off such filters, you could see more new ideas.One way to do that is to ask what would be good ideas for someone\nelse to explore. Then your subconscious won't shoot them down to\nprotect you.You could also discover overlooked ideas by working in the other\ndirection: by starting from what's obscuring them. Every cherished\nbut mistaken principle is surrounded by a dead zone of valuable\nideas that are unexplored because they contradict it.Religions are collections of cherished but mistaken principles.",
        "start_char_idx": 27051,
        "end_char_idx": 31479,
        "text_template": "{metadata_str}\n\n{content}",
        "metadata_template": "{key}: {value}",
        "metadata_seperator": "\n",
        "class_name": "TextNode"
      },
      "__type__": "1"
    },
    "7b23b817-8a51-48f5-9dfe-54933b8ec74d": {
      "__data__": {
        "id_": "7b23b817-8a51-48f5-9dfe-54933b8ec74d",
        "embedding": null,
        "metadata": {
          "source": "https://paulgraham.com/greatwork.html",
          "title": "How to Do Great Work",
          "language": null
        },
        "excluded_embed_metadata_keys": [],
        "excluded_llm_metadata_keys": [],
        "relationships": {
          "1": {
            "node_id": "1760b2bf-567c-445d-b307-22e6f964e9b7",
            "node_type": "4",
            "metadata": {
              "source": "https://paulgraham.com/greatwork.html",
              "title": "How to Do Great Work",
              "language": null
            },
            "hash": "7ef2dd1e485a09fc74a12b799f79779693cb40b648a2ee6cbf61621442038e83",
            "class_name": "RelatedNodeInfo"
          },
          "2": {
            "node_id": "043581dc-ddb9-4ebe-8723-f027867d4afe",
            "node_type": "1",
            "metadata": {
              "source": "https://paulgraham.com/greatwork.html",
              "title": "How to Do Great Work",
              "language": null
            },
            "hash": "9615ca7623677278179b555ee6de40ecb08fcd3b820298d177327ae30ae13882",
            "class_name": "RelatedNodeInfo"
          },
          "3": {
            "node_id": "48a55e52-c68e-480c-b2e8-2ba93135c8ce",
            "node_type": "1",
            "metadata": {},
            "hash": "e8deca5a3a4bf91d769a80a592527ff73b37773bdb122f95993833515fbdcde7",
            "class_name": "RelatedNodeInfo"
          }
        },
        "text": "But in questions that really matter, only rule-breakers\ncan be truly strict.\nAn overlooked idea often doesn't lose till the semifinals. You do\nsee it, subconsciously, but then another part of your subconscious\nshoots it down because it would be too weird, too risky, too much\nwork, too controversial. This suggests an exciting possibility: if\nyou could turn off such filters, you could see more new ideas.One way to do that is to ask what would be good ideas for someone\nelse to explore. Then your subconscious won't shoot them down to\nprotect you.You could also discover overlooked ideas by working in the other\ndirection: by starting from what's obscuring them. Every cherished\nbut mistaken principle is surrounded by a dead zone of valuable\nideas that are unexplored because they contradict it.Religions are collections of cherished but mistaken principles. So\nanything that can be described either literally or metaphorically\nas a religion will have valuable unexplored ideas in its shadow.\nCopernicus and Darwin both made discoveries of this type.\n[18]What are people in your field religious about, in the sense of being\ntoo attached to some principle that might not be as self-evident\nas they think? What becomes possible if you discard it?\nPeople show much more originality in solving problems than in\ndeciding which problems to solve. Even the smartest can be surprisingly\nconservative when deciding what to work on. People who'd never dream\nof being fashionable in any other way get sucked into working on\nfashionable problems.One reason people are more conservative when choosing problems than\nsolutions is that problems are bigger bets. A problem could occupy\nyou for years, while exploring a solution might only take days. But\neven so I think most people are too conservative. They're not merely\nresponding to risk, but to fashion as well. Unfashionable problems\nare undervalued.One of the most interesting kinds of unfashionable problem is the\nproblem that people think has been fully explored, but hasn't.\nGreat work often takes something that already exists and shows its\nlatent potential. Durer and Watt both did this. So if you're\ninterested in a field that others think is tapped out, don't let\ntheir skepticism deter you. People are often wrong about this.Working on an unfashionable problem can be very pleasing. There's\nno hype or hurry. Opportunists and critics are both occupied\nelsewhere. The existing work often has an old-school solidity. And\nthere's a satisfying sense of economy in cultivating ideas that\nwould otherwise be wasted.But the most common type of overlooked problem is not explicitly\nunfashionable in the sense of being out of fashion. It just doesn't\nseem to matter as much as it actually does. How do you find these?\nBy being self-indulgent \u2014 by letting your curiosity have its way,\nand tuning out, at least temporarily, the little voice in your head\nthat says you should only be working on \"important\" problems.You do need to work on important problems, but almost everyone is\ntoo conservative about what counts as one. And if there's an important\nbut overlooked problem in your neighborhood, it's probably already\non your subconscious radar screen. So try asking yourself: if you\nwere going to take a break from \"serious\" work to work on something\njust because it would be really interesting, what would you do? The\nanswer is probably more important than it seems.Originality in choosing problems seems to matter even more than\noriginality in solving them. That's what distinguishes the people\nwho discover whole new fields. So what might seem to be merely the\ninitial step \u2014 deciding what to work on \u2014 is in a sense the key\nto the whole game.\nFew grasp this. One of the biggest misconceptions about new ideas\nis about the ratio of question to answer in their composition.\nPeople think big ideas are answers, but often the real insight was\nin the question.Part of the reason we underrate questions is the way they're used\nin schools. In schools they tend to exist only briefly before being\nanswered, like unstable particles. But a really good question can\nbe much more than that. A really good question is a partial discovery.\nHow do new species arise? Is the force that makes objects fall to\nearth the same as the one that keeps planets in their orbits? By\neven asking such questions you were already in excitingly novel\nterritory.Unanswered questions can be uncomfortable things to carry around\nwith you.",
        "start_char_idx": 30619,
        "end_char_idx": 35069,
        "text_template": "{metadata_str}\n\n{content}",
        "metadata_template": "{key}: {value}",
        "metadata_seperator": "\n",
        "class_name": "TextNode"
      },
      "__type__": "1"
    },
    "48a55e52-c68e-480c-b2e8-2ba93135c8ce": {
      "__data__": {
        "id_": "48a55e52-c68e-480c-b2e8-2ba93135c8ce",
        "embedding": null,
        "metadata": {
          "source": "https://paulgraham.com/greatwork.html",
          "title": "How to Do Great Work",
          "language": null
        },
        "excluded_embed_metadata_keys": [],
        "excluded_llm_metadata_keys": [],
        "relationships": {
          "1": {
            "node_id": "1760b2bf-567c-445d-b307-22e6f964e9b7",
            "node_type": "4",
            "metadata": {
              "source": "https://paulgraham.com/greatwork.html",
              "title": "How to Do Great Work",
              "language": null
            },
            "hash": "7ef2dd1e485a09fc74a12b799f79779693cb40b648a2ee6cbf61621442038e83",
            "class_name": "RelatedNodeInfo"
          },
          "2": {
            "node_id": "7b23b817-8a51-48f5-9dfe-54933b8ec74d",
            "node_type": "1",
            "metadata": {
              "source": "https://paulgraham.com/greatwork.html",
              "title": "How to Do Great Work",
              "language": null
            },
            "hash": "4d60db26f2f4a39eb2616c25de1ebf49ed8833089ee5c21f79215929acc6539b",
            "class_name": "RelatedNodeInfo"
          },
          "3": {
            "node_id": "210cdb8b-87bd-48e1-b5c5-500f28dd9f68",
            "node_type": "1",
            "metadata": {},
            "hash": "161dd143c3173491b7ef9231afa69b80d70b04faee2f32b2f1ec7f79032f6936",
            "class_name": "RelatedNodeInfo"
          }
        },
        "text": "So what might seem to be merely the\ninitial step \u2014 deciding what to work on \u2014 is in a sense the key\nto the whole game.\nFew grasp this. One of the biggest misconceptions about new ideas\nis about the ratio of question to answer in their composition.\nPeople think big ideas are answers, but often the real insight was\nin the question.Part of the reason we underrate questions is the way they're used\nin schools. In schools they tend to exist only briefly before being\nanswered, like unstable particles. But a really good question can\nbe much more than that. A really good question is a partial discovery.\nHow do new species arise? Is the force that makes objects fall to\nearth the same as the one that keeps planets in their orbits? By\neven asking such questions you were already in excitingly novel\nterritory.Unanswered questions can be uncomfortable things to carry around\nwith you. But the more you're carrying, the greater the chance of\nnoticing a solution \u2014 or perhaps even more excitingly, noticing\nthat two unanswered questions are the same.Sometimes you carry a question for a long time. Great work often\ncomes from returning to a question you first noticed years before\n\u2014 in your childhood, even \u2014 and couldn't stop thinking about.\nPeople talk a lot about the importance of keeping your youthful\ndreams alive, but it's just as important to keep your youthful\nquestions alive.\n[19]This is one of the places where actual expertise differs most from\nthe popular picture of it. In the popular picture, experts are\ncertain. But actually the more puzzled you are, the better, so long\nas (a) the things you're puzzled about matter, and (b) no one else\nunderstands them either.Think about what's happening at the moment just before a new idea\nis discovered. Often someone with sufficient expertise is puzzled\nabout something. Which means that originality consists partly of\npuzzlement \u2014 of confusion! You have to be comfortable enough with\nthe world being full of puzzles that you're willing to see them,\nbut not so comfortable that you don't want to solve them.\n[20]It's a great thing to be rich in unanswered questions. And this is\none of those situations where the rich get richer, because the best\nway to acquire new questions is to try answering existing ones.\nQuestions don't just lead to answers, but also to more questions.\nThe best questions grow in the answering. You notice a thread\nprotruding from the current paradigm and try pulling on it, and it\njust gets longer and longer. So don't require a question to be\nobviously big before you try answering it. You can rarely predict\nthat. It's hard enough even to notice the thread, let alone to\npredict how much will unravel if you pull on it.It's better to be promiscuously curious \u2014 to pull a little bit on\na lot of threads, and see what happens. Big things start small. The\ninitial versions of big things were often just experiments, or side\nprojects, or talks, which then grew into something bigger. So start\nlots of small things.Being prolific is underrated. The more different things you try,\nthe greater the chance of discovering something new. Understand,\nthough, that trying lots of things will mean trying lots of things\nthat don't work. You can't have a lot of good ideas without also\nhaving a lot of bad ones.\n[21]Though it sounds more responsible to begin by studying everything\nthat's been done before, you'll learn faster and have more fun by\ntrying stuff. And you'll understand previous work better when you\ndo look at it. So err on the side of starting. Which is easier when\nstarting means starting small; those two ideas fit together like\ntwo puzzle pieces.How do you get from starting small to doing something great? By\nmaking successive versions. Great things are almost always made in\nsuccessive versions. You start with something small and evolve it,\nand the final version is both cleverer and more ambitious than\nanything you could have planned.It's particularly useful to make successive versions when you're\nmaking something for people \u2014 to get an initial version in front\nof them quickly, and then evolve it based on their response.Begin by trying the simplest thing that could possibly work.\nSurprisingly often, it does. If it doesn't, this will at least get\nyou started.Don't try to cram too much new stuff into any one version.",
        "start_char_idx": 34188,
        "end_char_idx": 38500,
        "text_template": "{metadata_str}\n\n{content}",
        "metadata_template": "{key}: {value}",
        "metadata_seperator": "\n",
        "class_name": "TextNode"
      },
      "__type__": "1"
    },
    "210cdb8b-87bd-48e1-b5c5-500f28dd9f68": {
      "__data__": {
        "id_": "210cdb8b-87bd-48e1-b5c5-500f28dd9f68",
        "embedding": null,
        "metadata": {
          "source": "https://paulgraham.com/greatwork.html",
          "title": "How to Do Great Work",
          "language": null
        },
        "excluded_embed_metadata_keys": [],
        "excluded_llm_metadata_keys": [],
        "relationships": {
          "1": {
            "node_id": "1760b2bf-567c-445d-b307-22e6f964e9b7",
            "node_type": "4",
            "metadata": {
              "source": "https://paulgraham.com/greatwork.html",
              "title": "How to Do Great Work",
              "language": null
            },
            "hash": "7ef2dd1e485a09fc74a12b799f79779693cb40b648a2ee6cbf61621442038e83",
            "class_name": "RelatedNodeInfo"
          },
          "2": {
            "node_id": "48a55e52-c68e-480c-b2e8-2ba93135c8ce",
            "node_type": "1",
            "metadata": {
              "source": "https://paulgraham.com/greatwork.html",
              "title": "How to Do Great Work",
              "language": null
            },
            "hash": "f8fe941414472e44d3c91060cb1f389dede535cd3e500c662c3c10537e9769ef",
            "class_name": "RelatedNodeInfo"
          },
          "3": {
            "node_id": "a78e7dd7-adcb-4fdc-a667-83ebcd2d0c83",
            "node_type": "1",
            "metadata": {},
            "hash": "24322fcdd1d10f3f8f67326a638f3f254fe6d5f180fbb36321d4380f5c004bce",
            "class_name": "RelatedNodeInfo"
          }
        },
        "text": "And you'll understand previous work better when you\ndo look at it. So err on the side of starting. Which is easier when\nstarting means starting small; those two ideas fit together like\ntwo puzzle pieces.How do you get from starting small to doing something great? By\nmaking successive versions. Great things are almost always made in\nsuccessive versions. You start with something small and evolve it,\nand the final version is both cleverer and more ambitious than\nanything you could have planned.It's particularly useful to make successive versions when you're\nmaking something for people \u2014 to get an initial version in front\nof them quickly, and then evolve it based on their response.Begin by trying the simplest thing that could possibly work.\nSurprisingly often, it does. If it doesn't, this will at least get\nyou started.Don't try to cram too much new stuff into any one version. There\nare names for doing this with the first version (taking too long\nto ship) and the second (the second system effect), but these are\nboth merely instances of a more general principle.An early version of a new project will sometimes be dismissed as a\ntoy. It's a good sign when people do this. That means it has\neverything a new idea needs except scale, and that tends to follow.\n[22]The alternative to starting with something small and evolving it\nis to plan in advance what you're going to do. And planning does\nusually seem the more responsible choice. It sounds more organized\nto say \"we're going to do x and then y and then z\" than \"we're going\nto try x and see what happens.\" And it is more organized; it just\ndoesn't work as well.Planning per se isn't good. It's sometimes necessary, but it's a\nnecessary evil \u2014 a response to unforgiving conditions. It's something\nyou have to do because you're working with inflexible media, or\nbecause you need to coordinate the efforts of a lot of people. If\nyou keep projects small and use flexible media, you don't have to\nplan as much, and your designs can evolve instead.\nTake as much risk as you can afford. In an efficient market, risk\nis proportionate to reward, so don't look for certainty, but for a\nbet with high expected value. If you're not failing occasionally,\nyou're probably being too conservative.Though conservatism is usually associated with the old, it's the\nyoung who tend to make this mistake. Inexperience makes them fear\nrisk, but it's when you're young that you can afford the most.Even a project that fails can be valuable. In the process of working\non it, you'll have crossed territory few others have seen, and\nencountered questions few others have asked. And there's probably\nno better source of questions than the ones you encounter in trying\nto do something slightly too hard.\nUse the advantages of youth when you have them, and the advantages\nof age once you have those. The advantages of youth are energy,\ntime, optimism, and freedom. The advantages of age are knowledge,\nefficiency, money, and power. With effort you can acquire some of\nthe latter when young and keep some of the former when old.The old also have the advantage of knowing which advantages they\nhave. The young often have them without realizing it. The biggest\nis probably time. The young have no idea how rich they are in time.\nThe best way to turn this time to advantage is to use it in slightly\nfrivolous ways: to learn about something you don't need to know\nabout, just out of curiosity, or to try building something just\nbecause it would be cool, or to become freakishly good at something.That \"slightly\" is an important qualification. Spend time lavishly\nwhen you're young, but don't simply waste it. There's a big difference\nbetween doing something you worry might be a waste of time and doing\nsomething you know for sure will be. The former is at least a bet,\nand possibly a better one than you think.\n[23]The most subtle advantage of youth, or more precisely of inexperience,\nis that you're seeing everything with fresh eyes. When your brain\nembraces an idea for the first time, sometimes the two don't fit\ntogether perfectly. Usually the problem is with your brain, but\noccasionally it's with the idea. A piece of it sticks out awkwardly\nand jabs you when you think about it. People who are used to the\nidea have learned to ignore it, but you have the opportunity not\nto.",
        "start_char_idx": 37616,
        "end_char_idx": 41928,
        "text_template": "{metadata_str}\n\n{content}",
        "metadata_template": "{key}: {value}",
        "metadata_seperator": "\n",
        "class_name": "TextNode"
      },
      "__type__": "1"
    },
    "a78e7dd7-adcb-4fdc-a667-83ebcd2d0c83": {
      "__data__": {
        "id_": "a78e7dd7-adcb-4fdc-a667-83ebcd2d0c83",
        "embedding": null,
        "metadata": {
          "source": "https://paulgraham.com/greatwork.html",
          "title": "How to Do Great Work",
          "language": null
        },
        "excluded_embed_metadata_keys": [],
        "excluded_llm_metadata_keys": [],
        "relationships": {
          "1": {
            "node_id": "1760b2bf-567c-445d-b307-22e6f964e9b7",
            "node_type": "4",
            "metadata": {
              "source": "https://paulgraham.com/greatwork.html",
              "title": "How to Do Great Work",
              "language": null
            },
            "hash": "7ef2dd1e485a09fc74a12b799f79779693cb40b648a2ee6cbf61621442038e83",
            "class_name": "RelatedNodeInfo"
          },
          "2": {
            "node_id": "210cdb8b-87bd-48e1-b5c5-500f28dd9f68",
            "node_type": "1",
            "metadata": {
              "source": "https://paulgraham.com/greatwork.html",
              "title": "How to Do Great Work",
              "language": null
            },
            "hash": "e4ad199a45e633198862e60c38bd022d22200e23353091eab8fc61aafb470b2c",
            "class_name": "RelatedNodeInfo"
          },
          "3": {
            "node_id": "7e4f53a3-6306-4604-b0cb-4ee49048f3e6",
            "node_type": "1",
            "metadata": {},
            "hash": "a655df0bfd74fbf23c5ba93ff272d0ee9423caf4ba2fbf7f87e0dae310f1f37f",
            "class_name": "RelatedNodeInfo"
          }
        },
        "text": "Spend time lavishly\nwhen you're young, but don't simply waste it. There's a big difference\nbetween doing something you worry might be a waste of time and doing\nsomething you know for sure will be. The former is at least a bet,\nand possibly a better one than you think.\n[23]The most subtle advantage of youth, or more precisely of inexperience,\nis that you're seeing everything with fresh eyes. When your brain\nembraces an idea for the first time, sometimes the two don't fit\ntogether perfectly. Usually the problem is with your brain, but\noccasionally it's with the idea. A piece of it sticks out awkwardly\nand jabs you when you think about it. People who are used to the\nidea have learned to ignore it, but you have the opportunity not\nto.\n[24]So when you're learning about something for the first time, pay\nattention to things that seem wrong or missing. You'll be tempted\nto ignore them, since there's a 99% chance the problem is with you.\nAnd you may have to set aside your misgivings temporarily to keep\nprogressing. But don't forget about them. When you've gotten further\ninto the subject, come back and check if they're still there. If\nthey're still viable in the light of your present knowledge, they\nprobably represent an undiscovered idea.\nOne of the most valuable kinds of knowledge you get from experience\nis to know what you don't have to worry about. The young know all\nthe things that could matter, but not their relative importance.\nSo they worry equally about everything, when they should worry much\nmore about a few things and hardly at all about the rest.But what you don't know is only half the problem with inexperience.\nThe other half is what you do know that ain't so. You arrive at\nadulthood with your head full of nonsense \u2014 bad habits you've\nacquired and false things you've been taught \u2014 and you won't be\nable to do great work till you clear away at least the nonsense in\nthe way of whatever type of work you want to do.Much of the nonsense left in your head is left there by schools.\nWe're so used to schools that we unconsciously treat going to school\nas identical with learning, but in fact schools have all sorts of\nstrange qualities that warp our ideas about learning and thinking.For example, schools induce passivity. Since you were a small child,\nthere was an authority at the front of the class telling all of you\nwhat you had to learn and then measuring whether you did. But neither\nclasses nor tests are intrinsic to learning; they're just artifacts\nof the way schools are usually designed.The sooner you overcome this passivity, the better. If you're still\nin school, try thinking of your education as your project, and your\nteachers as working for you rather than vice versa. That may seem\na stretch, but it's not merely some weird thought experiment. It's\nthe truth, economically, and in the best case it's the truth\nintellectually as well. The best teachers don't want to be your\nbosses. They'd prefer it if you pushed ahead, using them as a source\nof advice, rather than being pulled by them through the material.Schools also give you a misleading impression of what work is like.\nIn school they tell you what the problems are, and they're almost\nalways soluble using no more than you've been taught so far. In\nreal life you have to figure out what the problems are, and you\noften don't know if they're soluble at all.But perhaps the worst thing schools do to you is train you to win\nby hacking the test. You can't do great work by doing that. You\ncan't trick God. So stop looking for that kind of shortcut. The way\nto beat the system is to focus on problems and solutions that others\nhave overlooked, not to skimp on the work itself.\nDon't think of yourself as dependent on some gatekeeper giving you\na \"big break.\" Even if this were true, the best way to get it would\nbe to focus on doing good work rather than chasing influential\npeople.And don't take rejection by committees to heart. The qualities that\nimpress admissions officers and prize committees are quite different\nfrom those required to do great work. The decisions of selection\ncommittees are only meaningful to the extent that they're part of\na feedback loop, and very few are.\nPeople new to a field will often copy existing work. There's nothing\ninherently bad about that.",
        "start_char_idx": 41188,
        "end_char_idx": 45469,
        "text_template": "{metadata_str}\n\n{content}",
        "metadata_template": "{key}: {value}",
        "metadata_seperator": "\n",
        "class_name": "TextNode"
      },
      "__type__": "1"
    },
    "7e4f53a3-6306-4604-b0cb-4ee49048f3e6": {
      "__data__": {
        "id_": "7e4f53a3-6306-4604-b0cb-4ee49048f3e6",
        "embedding": null,
        "metadata": {
          "source": "https://paulgraham.com/greatwork.html",
          "title": "How to Do Great Work",
          "language": null
        },
        "excluded_embed_metadata_keys": [],
        "excluded_llm_metadata_keys": [],
        "relationships": {
          "1": {
            "node_id": "1760b2bf-567c-445d-b307-22e6f964e9b7",
            "node_type": "4",
            "metadata": {
              "source": "https://paulgraham.com/greatwork.html",
              "title": "How to Do Great Work",
              "language": null
            },
            "hash": "7ef2dd1e485a09fc74a12b799f79779693cb40b648a2ee6cbf61621442038e83",
            "class_name": "RelatedNodeInfo"
          },
          "2": {
            "node_id": "a78e7dd7-adcb-4fdc-a667-83ebcd2d0c83",
            "node_type": "1",
            "metadata": {
              "source": "https://paulgraham.com/greatwork.html",
              "title": "How to Do Great Work",
              "language": null
            },
            "hash": "57db737ebb0fdbc6937d427e4c090f3c6643243647292491e621a096d36b2583",
            "class_name": "RelatedNodeInfo"
          },
          "3": {
            "node_id": "561259f6-6146-426f-a00e-589fb818da4d",
            "node_type": "1",
            "metadata": {},
            "hash": "60804c8ea70cab5d63bcb1c24ea22848678d1dc81fd5cf8356baae99beeafe24",
            "class_name": "RelatedNodeInfo"
          }
        },
        "text": "You can't do great work by doing that. You\ncan't trick God. So stop looking for that kind of shortcut. The way\nto beat the system is to focus on problems and solutions that others\nhave overlooked, not to skimp on the work itself.\nDon't think of yourself as dependent on some gatekeeper giving you\na \"big break.\" Even if this were true, the best way to get it would\nbe to focus on doing good work rather than chasing influential\npeople.And don't take rejection by committees to heart. The qualities that\nimpress admissions officers and prize committees are quite different\nfrom those required to do great work. The decisions of selection\ncommittees are only meaningful to the extent that they're part of\na feedback loop, and very few are.\nPeople new to a field will often copy existing work. There's nothing\ninherently bad about that. There's no better way to learn how\nsomething works than by trying to reproduce it. Nor does\ncopying necessarily make your work unoriginal. Originality is the\npresence of new ideas, not the absence of old ones.There's a good way to copy and a bad way. If you're going to copy\nsomething, do it openly instead of furtively, or worse still,\nunconsciously. This is what's meant by the famously misattributed\nphrase \"Great artists steal.\" The really dangerous kind of copying,\nthe kind that gives copying a bad name, is the kind that's done\nwithout realizing it, because you're nothing more than a train\nrunning on tracks laid down by someone else. But at the other\nextreme, copying can be a sign of superiority rather than subordination.\n[25]In many fields it's almost inevitable that your early work will be\nin some sense based on other people's. Projects rarely arise in a\nvacuum. They're usually a reaction to previous work. When you're\nfirst starting out, you don't have any previous work; if you're\ngoing to react to something, it has to be someone else's. Once\nyou're established, you can react to your own. But while the former\ngets called derivative and the latter doesn't, structurally the two\ncases are more similar than they seem.Oddly enough, the very novelty of the most novel ideas sometimes\nmakes them seem at first to be more derivative than they are. New\ndiscoveries often have to be conceived initially as variations of\nexisting things, even by their discoverers, because there isn't\nyet the conceptual vocabulary to express them.There are definitely some dangers to copying, though. One is that\nyou'll tend to copy old things \u2014 things that were in their day at\nthe frontier of knowledge, but no longer are.And when you do copy something, don't copy every feature of it.\nSome will make you ridiculous if you do. Don't copy the manner of\nan eminent 50 year old professor if you're 18, for example, or the\nidiom of a Renaissance poem hundreds of years later.Some of the features of things you admire are flaws they succeeded\ndespite. Indeed, the features that are easiest to imitate are the\nmost likely to be the flaws.This is particularly true for behavior. Some talented people are\njerks, and this sometimes makes it seem to the inexperienced that\nbeing a jerk is part of being talented. It isn't; being talented\nis merely how they get away with it.One of the most powerful kinds of copying is to copy something from\none field into another. History is so full of chance discoveries\nof this type that it's probably worth giving chance a hand by\ndeliberately learning about other kinds of work. You can take ideas\nfrom quite distant fields if you let them be metaphors.Negative examples can be as inspiring as positive ones. In fact you\ncan sometimes learn more from things done badly than from things\ndone well; sometimes it only becomes clear what's needed when it's\nmissing.\nIf a lot of the best people in your field are collected in one\nplace, it's usually a good idea to visit for a while. It will\nincrease your ambition, and also, by showing you that these people\nare human, increase your self-confidence.\n[26]If you're earnest you'll probably get a warmer welcome than you\nmight expect. Most people who are very good at something are happy\nto talk about it with anyone who's genuinely interested.",
        "start_char_idx": 44636,
        "end_char_idx": 48784,
        "text_template": "{metadata_str}\n\n{content}",
        "metadata_template": "{key}: {value}",
        "metadata_seperator": "\n",
        "class_name": "TextNode"
      },
      "__type__": "1"
    },
    "561259f6-6146-426f-a00e-589fb818da4d": {
      "__data__": {
        "id_": "561259f6-6146-426f-a00e-589fb818da4d",
        "embedding": null,
        "metadata": {
          "source": "https://paulgraham.com/greatwork.html",
          "title": "How to Do Great Work",
          "language": null
        },
        "excluded_embed_metadata_keys": [],
        "excluded_llm_metadata_keys": [],
        "relationships": {
          "1": {
            "node_id": "1760b2bf-567c-445d-b307-22e6f964e9b7",
            "node_type": "4",
            "metadata": {
              "source": "https://paulgraham.com/greatwork.html",
              "title": "How to Do Great Work",
              "language": null
            },
            "hash": "7ef2dd1e485a09fc74a12b799f79779693cb40b648a2ee6cbf61621442038e83",
            "class_name": "RelatedNodeInfo"
          },
          "2": {
            "node_id": "7e4f53a3-6306-4604-b0cb-4ee49048f3e6",
            "node_type": "1",
            "metadata": {
              "source": "https://paulgraham.com/greatwork.html",
              "title": "How to Do Great Work",
              "language": null
            },
            "hash": "7dbe5a1c66e6c3105b0120aa3a6cbc95815260c19531536a9b4cd7b7e367a2a4",
            "class_name": "RelatedNodeInfo"
          },
          "3": {
            "node_id": "be31eeb4-8dba-4c4b-9390-750000109174",
            "node_type": "1",
            "metadata": {},
            "hash": "de1c78eac3d947dce51bccedd523e8738920b102c8f81cbfa19c82ab08e8f4ff",
            "class_name": "RelatedNodeInfo"
          }
        },
        "text": "History is so full of chance discoveries\nof this type that it's probably worth giving chance a hand by\ndeliberately learning about other kinds of work. You can take ideas\nfrom quite distant fields if you let them be metaphors.Negative examples can be as inspiring as positive ones. In fact you\ncan sometimes learn more from things done badly than from things\ndone well; sometimes it only becomes clear what's needed when it's\nmissing.\nIf a lot of the best people in your field are collected in one\nplace, it's usually a good idea to visit for a while. It will\nincrease your ambition, and also, by showing you that these people\nare human, increase your self-confidence.\n[26]If you're earnest you'll probably get a warmer welcome than you\nmight expect. Most people who are very good at something are happy\nto talk about it with anyone who's genuinely interested. If they're\nreally good at their work, then they probably have a hobbyist's\ninterest in it, and hobbyists always want to talk about their\nhobbies.It may take some effort to find the people who are really good,\nthough. Doing great work has such prestige that in some places,\nparticularly universities, there's a polite fiction that everyone\nis engaged in it. And that is far from true. People within universities\ncan't say so openly, but the quality of the work being done in\ndifferent departments varies immensely. Some departments have people\ndoing great work; others have in the past; others never have.\nSeek out the best colleagues. There are a lot of projects that can't\nbe done alone, and even if you're working on one that can be, it's\ngood to have other people to encourage you and to bounce ideas off.Colleagues don't just affect your work, though; they also affect\nyou. So work with people you want to become like, because you will.Quality is more important than quantity in colleagues. It's better\nto have one or two great ones than a building full of pretty good\nones. In fact it's not merely better, but necessary, judging from\nhistory: the degree to which great work happens in clusters suggests\nthat one's colleagues often make the difference between doing great\nwork and not.How do you know when you have sufficiently good colleagues? In my\nexperience, when you do, you know. Which means if you're unsure,\nyou probably don't. But it may be possible to give a more concrete\nanswer than that. Here's an attempt: sufficiently good colleagues\noffer surprising insights. They can see and do things that you\ncan't. So if you have a handful of colleagues good enough to keep\nyou on your toes in this sense, you're probably over the threshold.Most of us can benefit from collaborating with colleagues, but some\nprojects require people on a larger scale, and starting one of those\nis not for everyone. If you want to run a project like that, you'll\nhave to become a manager, and managing well takes aptitude and\ninterest like any other kind of work. If you don't have them, there\nis no middle path: you must either force yourself to learn management\nas a second language, or avoid such projects.\n[27]\nHusband your morale. It's the basis of everything when you're working\non ambitious projects. You have to nurture and protect it like a\nliving organism.Morale starts with your view of life. You're more likely to do great\nwork if you're an optimist, and more likely to if you think of\nyourself as lucky than if you think of yourself as a victim.Indeed, work can to some extent protect you from your problems. If\nyou choose work that's pure, its very difficulties will serve as a\nrefuge from the difficulties of everyday life. If this is escapism,\nit's a very productive form of it, and one that has been used by\nsome of the greatest minds in history.Morale compounds via work: high morale helps you do good work, which\nincreases your morale and helps you do even better work. But this\ncycle also operates in the other direction: if you're not doing\ngood work, that can demoralize you and make it even harder to. Since\nit matters so much for this cycle to be running in the right\ndirection, it can be a good idea to switch to easier work when\nyou're stuck, just so you start to get something done.One of the biggest mistakes ambitious people make is to allow\nsetbacks to destroy their morale all at once, like a balloon bursting.",
        "start_char_idx": 47924,
        "end_char_idx": 52217,
        "text_template": "{metadata_str}\n\n{content}",
        "metadata_template": "{key}: {value}",
        "metadata_seperator": "\n",
        "class_name": "TextNode"
      },
      "__type__": "1"
    },
    "be31eeb4-8dba-4c4b-9390-750000109174": {
      "__data__": {
        "id_": "be31eeb4-8dba-4c4b-9390-750000109174",
        "embedding": null,
        "metadata": {
          "source": "https://paulgraham.com/greatwork.html",
          "title": "How to Do Great Work",
          "language": null
        },
        "excluded_embed_metadata_keys": [],
        "excluded_llm_metadata_keys": [],
        "relationships": {
          "1": {
            "node_id": "1760b2bf-567c-445d-b307-22e6f964e9b7",
            "node_type": "4",
            "metadata": {
              "source": "https://paulgraham.com/greatwork.html",
              "title": "How to Do Great Work",
              "language": null
            },
            "hash": "7ef2dd1e485a09fc74a12b799f79779693cb40b648a2ee6cbf61621442038e83",
            "class_name": "RelatedNodeInfo"
          },
          "2": {
            "node_id": "561259f6-6146-426f-a00e-589fb818da4d",
            "node_type": "1",
            "metadata": {
              "source": "https://paulgraham.com/greatwork.html",
              "title": "How to Do Great Work",
              "language": null
            },
            "hash": "e79a13c17b2edb797212f477f11ecb24f09f725b2f28f14df22cbc339e3a9b4a",
            "class_name": "RelatedNodeInfo"
          },
          "3": {
            "node_id": "e39d45d9-200d-4183-9c7a-2fd1f6a305ea",
            "node_type": "1",
            "metadata": {},
            "hash": "1d8812f33c2ccb13c5c93c0362d0aec9ce01eab1287c49824ca7476b439921d6",
            "class_name": "RelatedNodeInfo"
          }
        },
        "text": "If\nyou choose work that's pure, its very difficulties will serve as a\nrefuge from the difficulties of everyday life. If this is escapism,\nit's a very productive form of it, and one that has been used by\nsome of the greatest minds in history.Morale compounds via work: high morale helps you do good work, which\nincreases your morale and helps you do even better work. But this\ncycle also operates in the other direction: if you're not doing\ngood work, that can demoralize you and make it even harder to. Since\nit matters so much for this cycle to be running in the right\ndirection, it can be a good idea to switch to easier work when\nyou're stuck, just so you start to get something done.One of the biggest mistakes ambitious people make is to allow\nsetbacks to destroy their morale all at once, like a balloon bursting.\nYou can inoculate yourself against this by explicitly considering\nsetbacks a part of your process. Solving hard problems always\ninvolves some backtracking.Doing great work is a depth-first search whose root node is the\ndesire to. So \"If at first you don't succeed, try, try again\" isn't\nquite right. It should be: If at first you don't succeed, either\ntry again, or backtrack and then try again.\"Never give up\" is also not quite right. Obviously there are times\nwhen it's the right choice to eject. A more precise version would\nbe: Never let setbacks panic you into backtracking more than you\nneed to. Corollary: Never abandon the root node.It's not necessarily a bad sign if work is a struggle, any more\nthan it's a bad sign to be out of breath while running. It depends\nhow fast you're running. So learn to distinguish good pain from\nbad. Good pain is a sign of effort; bad pain is a sign of damage.\nAn audience is a critical component of morale. If you're a scholar,\nyour audience may be your peers; in the arts, it may be an audience\nin the traditional sense. Either way it doesn't need to be big.\nThe value of an audience doesn't grow anything like linearly with\nits size. Which is bad news if you're famous, but good news if\nyou're just starting out, because it means a small but dedicated\naudience can be enough to sustain you. If a handful of people\ngenuinely love what you're doing, that's enough.To the extent you can, avoid letting intermediaries come between\nyou and your audience. In some types of work this is inevitable,\nbut it's so liberating to escape it that you might be better off\nswitching to an adjacent type if that will let you go direct.\n[28]The people you spend time with will also have a big effect on your\nmorale. You'll find there are some who increase your energy and\nothers who decrease it, and the effect someone has is not always\nwhat you'd expect. Seek out the people who increase your energy and\navoid those who decrease it. Though of course if there's someone\nyou need to take care of, that takes precedence.Don't marry someone who doesn't understand that you need to work,\nor sees your work as competition for your attention. If you're\nambitious, you need to work; it's almost like a medical condition;\nso someone who won't let you work either doesn't understand you,\nor does and doesn't care.Ultimately morale is physical. You think with your body, so it's\nimportant to take care of it. That means exercising regularly,\neating and sleeping well, and avoiding the more dangerous kinds of\ndrugs. Running and walking are particularly good forms of exercise\nbecause they're good for thinking.\n[29]People who do great work are not necessarily happier than everyone\nelse, but they're happier than they'd be if they didn't. In fact,\nif you're smart and ambitious, it's dangerous not to be productive.\nPeople who are smart and ambitious but don't achieve much tend to\nbecome bitter.\nIt's ok to want to impress other people, but choose the right people.\nThe opinion of people you respect is signal. Fame, which is the\nopinion of a much larger group you might or might not respect, just\nadds noise.The prestige of a type of work is at best a trailing indicator and\nsometimes completely mistaken. If you do anything well enough,\nyou'll make it prestigious.",
        "start_char_idx": 51398,
        "end_char_idx": 55501,
        "text_template": "{metadata_str}\n\n{content}",
        "metadata_template": "{key}: {value}",
        "metadata_seperator": "\n",
        "class_name": "TextNode"
      },
      "__type__": "1"
    },
    "e39d45d9-200d-4183-9c7a-2fd1f6a305ea": {
      "__data__": {
        "id_": "e39d45d9-200d-4183-9c7a-2fd1f6a305ea",
        "embedding": null,
        "metadata": {
          "source": "https://paulgraham.com/greatwork.html",
          "title": "How to Do Great Work",
          "language": null
        },
        "excluded_embed_metadata_keys": [],
        "excluded_llm_metadata_keys": [],
        "relationships": {
          "1": {
            "node_id": "1760b2bf-567c-445d-b307-22e6f964e9b7",
            "node_type": "4",
            "metadata": {
              "source": "https://paulgraham.com/greatwork.html",
              "title": "How to Do Great Work",
              "language": null
            },
            "hash": "7ef2dd1e485a09fc74a12b799f79779693cb40b648a2ee6cbf61621442038e83",
            "class_name": "RelatedNodeInfo"
          },
          "2": {
            "node_id": "be31eeb4-8dba-4c4b-9390-750000109174",
            "node_type": "1",
            "metadata": {
              "source": "https://paulgraham.com/greatwork.html",
              "title": "How to Do Great Work",
              "language": null
            },
            "hash": "5bab7067cb475fa62470a5d6f25026d6036673b7c50e2be601e336fe810411c9",
            "class_name": "RelatedNodeInfo"
          },
          "3": {
            "node_id": "877cf157-4f19-4e6f-bb6c-93688a1e90bf",
            "node_type": "1",
            "metadata": {},
            "hash": "dc96fe9e393b18dd17e90bc2200267f0e267f8bfa0f93692fca8d6f217898412",
            "class_name": "RelatedNodeInfo"
          }
        },
        "text": "That means exercising regularly,\neating and sleeping well, and avoiding the more dangerous kinds of\ndrugs. Running and walking are particularly good forms of exercise\nbecause they're good for thinking.\n[29]People who do great work are not necessarily happier than everyone\nelse, but they're happier than they'd be if they didn't. In fact,\nif you're smart and ambitious, it's dangerous not to be productive.\nPeople who are smart and ambitious but don't achieve much tend to\nbecome bitter.\nIt's ok to want to impress other people, but choose the right people.\nThe opinion of people you respect is signal. Fame, which is the\nopinion of a much larger group you might or might not respect, just\nadds noise.The prestige of a type of work is at best a trailing indicator and\nsometimes completely mistaken. If you do anything well enough,\nyou'll make it prestigious. So the question to ask about a type of\nwork is not how much prestige it has, but how well it could be done.Competition can be an effective motivator, but don't let it choose\nthe problem for you; don't let yourself get drawn into chasing\nsomething just because others are. In fact, don't let competitors\nmake you do anything much more specific than work harder.Curiosity is the best guide. Your curiosity never lies, and it knows\nmore than you do about what's worth paying attention to.\nNotice how often that word has come up. If you asked an oracle the\nsecret to doing great work and the oracle replied with a single\nword, my bet would be on \"curiosity.\"That doesn't translate directly to advice. It's not enough just to\nbe curious, and you can't command curiosity anyway. But you can\nnurture it and let it drive you.Curiosity is the key to all four steps in doing great work: it will\nchoose the field for you, get you to the frontier, cause you to\nnotice the gaps in it, and drive you to explore them. The whole\nprocess is a kind of dance with curiosity.\nBelieve it or not, I tried to make this essay as short as I could.\nBut its length at least means it acts as a filter. If you made it\nthis far, you must be interested in doing great work. And if so\nyou're already further along than you might realize, because the\nset of people willing to want to is small.The factors in doing great work are factors in the literal,\nmathematical sense, and they are: ability, interest, effort, and\nluck. Luck by definition you can't do anything about, so we can\nignore that. And we can assume effort, if you do in fact want to\ndo great work. So the problem boils down to ability and interest.\nCan you find a kind of work where your ability and interest will\ncombine to yield an explosion of new ideas?Here there are grounds for optimism. There are so many different\nways to do great work, and even more that are still undiscovered.\nOut of all those different types of work, the one you're most suited\nfor is probably a pretty close match. Probably a comically close\nmatch. It's just a question of finding it, and how far into it your\nability and interest can take you. And you can only answer that by\ntrying.Many more people could try to do great work than do. What holds\nthem back is a combination of modesty and fear. It seems presumptuous\nto try to be Newton or Shakespeare. It also seems hard; surely if\nyou tried something like that, you'd fail. Presumably the calculation\nis rarely explicit. Few people consciously decide not to try to do\ngreat work. But that's what's going on subconsciously; they shy\naway from the question.So I'm going to pull a sneaky trick on you. Do you want to do great\nwork, or not? Now you have to decide consciously. Sorry about that.\nI wouldn't have done it to a general audience. But we already know\nyou're interested.Don't worry about being presumptuous. You don't have to tell anyone.\nAnd if it's too hard and you fail, so what? Lots of people have\nworse problems than that. In fact you'll be lucky if it's the worst\nproblem you have.Yes, you'll have to work hard. But again, lots of people have to\nwork hard.",
        "start_char_idx": 54643,
        "end_char_idx": 58635,
        "text_template": "{metadata_str}\n\n{content}",
        "metadata_template": "{key}: {value}",
        "metadata_seperator": "\n",
        "class_name": "TextNode"
      },
      "__type__": "1"
    },
    "877cf157-4f19-4e6f-bb6c-93688a1e90bf": {
      "__data__": {
        "id_": "877cf157-4f19-4e6f-bb6c-93688a1e90bf",
        "embedding": null,
        "metadata": {
          "source": "https://paulgraham.com/greatwork.html",
          "title": "How to Do Great Work",
          "language": null
        },
        "excluded_embed_metadata_keys": [],
        "excluded_llm_metadata_keys": [],
        "relationships": {
          "1": {
            "node_id": "1760b2bf-567c-445d-b307-22e6f964e9b7",
            "node_type": "4",
            "metadata": {
              "source": "https://paulgraham.com/greatwork.html",
              "title": "How to Do Great Work",
              "language": null
            },
            "hash": "7ef2dd1e485a09fc74a12b799f79779693cb40b648a2ee6cbf61621442038e83",
            "class_name": "RelatedNodeInfo"
          },
          "2": {
            "node_id": "e39d45d9-200d-4183-9c7a-2fd1f6a305ea",
            "node_type": "1",
            "metadata": {
              "source": "https://paulgraham.com/greatwork.html",
              "title": "How to Do Great Work",
              "language": null
            },
            "hash": "806f3be352bec4884fe910d718dea6bee742920c3c93609ab4c58ca6bb3e8092",
            "class_name": "RelatedNodeInfo"
          },
          "3": {
            "node_id": "264475de-19f5-4ce1-afe5-83ecafc5a589",
            "node_type": "1",
            "metadata": {},
            "hash": "37ec7946022f2be2f521cc42cff4d54310addcdb25a3d82d96b27ba7d0c7db41",
            "class_name": "RelatedNodeInfo"
          }
        },
        "text": "Presumably the calculation\nis rarely explicit. Few people consciously decide not to try to do\ngreat work. But that's what's going on subconsciously; they shy\naway from the question.So I'm going to pull a sneaky trick on you. Do you want to do great\nwork, or not? Now you have to decide consciously. Sorry about that.\nI wouldn't have done it to a general audience. But we already know\nyou're interested.Don't worry about being presumptuous. You don't have to tell anyone.\nAnd if it's too hard and you fail, so what? Lots of people have\nworse problems than that. In fact you'll be lucky if it's the worst\nproblem you have.Yes, you'll have to work hard. But again, lots of people have to\nwork hard. And if you're working on something you find very\ninteresting, which you necessarily will if you're on the right path,\nthe work will probably feel less burdensome than a lot of your\npeers'.The discoveries are out there, waiting to be made. Why not by you?\nNotes[1]\nI don't think you could give a precise definition of what\ncounts as great work. Doing great work means doing something important\nso well that you expand people's ideas of what's possible. But\nthere's no threshold for importance. It's a matter of degree, and\noften hard to judge at the time anyway. So I'd rather people focused\non developing their interests rather than worrying about whether\nthey're important or not. Just try to do something amazing, and\nleave it to future generations to say if you succeeded.[2]\nA lot of standup comedy is based on noticing anomalies in\neveryday life. \"Did you ever notice...?\" New ideas come from doing\nthis about nontrivial things. Which may help explain why people's\nreaction to a new idea is often the first half of laughing: Ha![3]\nThat second qualifier is critical. If you're excited about\nsomething most authorities discount, but you can't give a more\nprecise explanation than \"they don't get it,\" then you're starting\nto drift into the territory of cranks.[4]\nFinding something to work on is not simply a matter of finding\na match between the current version of you and a list of known\nproblems. You'll often have to coevolve with the problem. That's\nwhy it can sometimes be so hard to figure out what to work on. The\nsearch space is huge. It's the cartesian product of all possible\ntypes of work, both known and yet to be discovered, and all possible\nfuture versions of you.There's no way you could search this whole space, so you have to\nrely on heuristics to generate promising paths through it and hope\nthe best matches will be clustered. Which they will not always be;\ndifferent types of work have been collected together as much by\naccidents of history as by the intrinsic similarities between them.[5]\nThere are many reasons curious people are more likely to do\ngreat work, but one of the more subtle is that, by casting a wide\nnet, they're more likely to find the right thing to work on in the\nfirst place.[6]\nIt can also be dangerous to make things for an audience you\nfeel is less sophisticated than you, if that causes you to talk\ndown to them. You can make a lot of money doing that, if you do it\nin a sufficiently cynical way, but it's not the route to great work.\nNot that anyone using this m.o. would care.[7]\nThis idea I learned from Hardy's A Mathematician's Apology,\nwhich I recommend to anyone ambitious to do great work, in any\nfield.[8]\nJust as we overestimate what we can do in a day and underestimate\nwhat we can do over several years, we overestimate the damage done\nby procrastinating for a day and underestimate the damage done by\nprocrastinating for several years.[9]\nYou can't usually get paid for doing exactly what you want,\nespecially early on. There are two options: get paid for doing work\nclose to what you want and hope to push it closer, or get paid for\ndoing something else entirely and do your own projects on the side.\nBoth can work, but both have drawbacks: in the first approach your\nwork is compromised by default, and in the second you have to fight\nto get time to do it.[10]\nIf you set your life up right, it will deliver the focus-relax\ncycle automatically.",
        "start_char_idx": 57940,
        "end_char_idx": 62046,
        "text_template": "{metadata_str}\n\n{content}",
        "metadata_template": "{key}: {value}",
        "metadata_seperator": "\n",
        "class_name": "TextNode"
      },
      "__type__": "1"
    },
    "264475de-19f5-4ce1-afe5-83ecafc5a589": {
      "__data__": {
        "id_": "264475de-19f5-4ce1-afe5-83ecafc5a589",
        "embedding": null,
        "metadata": {
          "source": "https://paulgraham.com/greatwork.html",
          "title": "How to Do Great Work",
          "language": null
        },
        "excluded_embed_metadata_keys": [],
        "excluded_llm_metadata_keys": [],
        "relationships": {
          "1": {
            "node_id": "1760b2bf-567c-445d-b307-22e6f964e9b7",
            "node_type": "4",
            "metadata": {
              "source": "https://paulgraham.com/greatwork.html",
              "title": "How to Do Great Work",
              "language": null
            },
            "hash": "7ef2dd1e485a09fc74a12b799f79779693cb40b648a2ee6cbf61621442038e83",
            "class_name": "RelatedNodeInfo"
          },
          "2": {
            "node_id": "877cf157-4f19-4e6f-bb6c-93688a1e90bf",
            "node_type": "1",
            "metadata": {
              "source": "https://paulgraham.com/greatwork.html",
              "title": "How to Do Great Work",
              "language": null
            },
            "hash": "871fa382f3389c779a0d194fd5c84a4f2b1b5ddec8ab4278b01caea2857e9177",
            "class_name": "RelatedNodeInfo"
          },
          "3": {
            "node_id": "6d6e87db-a119-40e9-aa96-cd47a2fa1a04",
            "node_type": "1",
            "metadata": {},
            "hash": "8e5e7266e1578fe8f4fa25888a65e9e69cc4f9496a04936c3ce8f8bef6bbb173",
            "class_name": "RelatedNodeInfo"
          }
        },
        "text": "[8]\nJust as we overestimate what we can do in a day and underestimate\nwhat we can do over several years, we overestimate the damage done\nby procrastinating for a day and underestimate the damage done by\nprocrastinating for several years.[9]\nYou can't usually get paid for doing exactly what you want,\nespecially early on. There are two options: get paid for doing work\nclose to what you want and hope to push it closer, or get paid for\ndoing something else entirely and do your own projects on the side.\nBoth can work, but both have drawbacks: in the first approach your\nwork is compromised by default, and in the second you have to fight\nto get time to do it.[10]\nIf you set your life up right, it will deliver the focus-relax\ncycle automatically. The perfect setup is an office you work in and\nthat you walk to and from.[11]\nThere may be some very unworldly people who do great work\nwithout consciously trying to. If you want to expand this rule to\ncover that case, it becomes: Don't try to be anything except the\nbest.[12]\nThis gets more complicated in work like acting, where the\ngoal is to adopt a fake persona. But even here it's possible to be\naffected. Perhaps the rule in such fields should be to avoid\nunintentional affectation.[13]\nIt's safe to have beliefs that you treat as unquestionable\nif and only if they're also unfalsifiable. For example, it's safe\nto have the principle that everyone should be treated equally under\nthe law, because a sentence with a \"should\" in it isn't really a\nstatement about the world and is therefore hard to disprove. And\nif there's no evidence that could disprove one of your principles,\nthere can't be any facts you'd need to ignore in order to preserve\nit.[14]\nAffectation is easier to cure than intellectual dishonesty.\nAffectation is often a shortcoming of the young that burns off in\ntime, while intellectual dishonesty is more of a character flaw.[15]\nObviously you don't have to be working at the exact moment\nyou have the idea, but you'll probably have been working fairly\nrecently.[16]\nSome say psychoactive drugs have a similar effect. I'm\nskeptical, but also almost totally ignorant of their effects.[17]\nFor example you might give the nth most important topic\n(m-1)/m^n of your attention, for some m > 1. You couldn't allocate\nyour attention so precisely, of course, but this at least gives an\nidea of a reasonable distribution.[18]\nThe principles defining a religion have to be mistaken.\nOtherwise anyone might adopt them, and there would be nothing to\ndistinguish the adherents of the religion from everyone else.[19]\nIt might be a good exercise to try writing down a list of\nquestions you wondered about in your youth. You might find you're\nnow in a position to do something about some of them.[20]\nThe connection between originality and uncertainty causes a\nstrange phenomenon: because the conventional-minded are more certain\nthan the independent-minded, this tends to give them the upper hand\nin disputes, even though they're generally stupider.\n\n   The best lack all conviction, while the worst\n   Are full of passionate intensity.\n\n[21]\nDerived from Linus Pauling's \"If you want to have good ideas,\nyou must have many ideas.\"[22]\nAttacking a project as a \"toy\" is similar to attacking a\nstatement as \"inappropriate.\" It means that no more substantial\ncriticism can be made to stick.[23]\nOne way to tell whether you're wasting time is to ask if\nyou're producing or consuming. Writing computer games is less likely\nto be a waste of time than playing them, and playing games where\nyou create something is less likely to be a waste of time than\nplaying games where you don't.[24]\nAnother related advantage is that if you haven't said anything\npublicly yet, you won't be biased toward evidence that supports\nyour earlier conclusions. With sufficient integrity you could achieve\neternal youth in this respect, but few manage to. For most people,\nhaving previously published opinions has an effect similar to\nideology, just in quantity 1.[25]\nIn the early 1630s Daniel Mytens made a painting of Henrietta\nMaria handing a laurel wreath to Charles I. Van Dyck then painted\nhis own version to show how much better he was.[26]\nI'm being deliberately vague about what a place is.",
        "start_char_idx": 61298,
        "end_char_idx": 65530,
        "text_template": "{metadata_str}\n\n{content}",
        "metadata_template": "{key}: {value}",
        "metadata_seperator": "\n",
        "class_name": "TextNode"
      },
      "__type__": "1"
    },
    "6d6e87db-a119-40e9-aa96-cd47a2fa1a04": {
      "__data__": {
        "id_": "6d6e87db-a119-40e9-aa96-cd47a2fa1a04",
        "embedding": null,
        "metadata": {
          "source": "https://paulgraham.com/greatwork.html",
          "title": "How to Do Great Work",
          "language": null
        },
        "excluded_embed_metadata_keys": [],
        "excluded_llm_metadata_keys": [],
        "relationships": {
          "1": {
            "node_id": "1760b2bf-567c-445d-b307-22e6f964e9b7",
            "node_type": "4",
            "metadata": {
              "source": "https://paulgraham.com/greatwork.html",
              "title": "How to Do Great Work",
              "language": null
            },
            "hash": "7ef2dd1e485a09fc74a12b799f79779693cb40b648a2ee6cbf61621442038e83",
            "class_name": "RelatedNodeInfo"
          },
          "2": {
            "node_id": "264475de-19f5-4ce1-afe5-83ecafc5a589",
            "node_type": "1",
            "metadata": {
              "source": "https://paulgraham.com/greatwork.html",
              "title": "How to Do Great Work",
              "language": null
            },
            "hash": "02e9ca2b9076fa23cd3da8a9bca8978f8aba6b1c1023eacb54a43599dfc710e4",
            "class_name": "RelatedNodeInfo"
          },
          "3": {
            "node_id": "f89aade3-d8ad-4914-b203-a535ed40e172",
            "node_type": "1",
            "metadata": {},
            "hash": "f7f9cc59263f22809f42e1707ac3d10f24178b8effeecdaa7c89c6e65f976d1f",
            "class_name": "RelatedNodeInfo"
          }
        },
        "text": "Writing computer games is less likely\nto be a waste of time than playing them, and playing games where\nyou create something is less likely to be a waste of time than\nplaying games where you don't.[24]\nAnother related advantage is that if you haven't said anything\npublicly yet, you won't be biased toward evidence that supports\nyour earlier conclusions. With sufficient integrity you could achieve\neternal youth in this respect, but few manage to. For most people,\nhaving previously published opinions has an effect similar to\nideology, just in quantity 1.[25]\nIn the early 1630s Daniel Mytens made a painting of Henrietta\nMaria handing a laurel wreath to Charles I. Van Dyck then painted\nhis own version to show how much better he was.[26]\nI'm being deliberately vague about what a place is. As of\nthis writing, being in the same physical place has advantages that\nare hard to duplicate, but that could change.[27]\nThis is false when the work the other people have to do is\nvery constrained, as with SETI@home or Bitcoin. It may be possible\nto expand the area in which it's false by defining similarly\nrestricted protocols with more freedom of action in the nodes.[28]\nCorollary: Building something that enables people to go around\nintermediaries and engage directly with their audience is probably\na good idea.[29]\nIt may be helpful always to walk or run the same route, because\nthat frees attention for thinking. It feels that way to me, and\nthere is some historical evidence for it.Thanks \nto Trevor Blackwell, Daniel Gackle, Pam Graham, Tom Howard,\nPatrick Hsu, Steve Huffman, Jessica Livingston, Henry Lloyd-Baker,\nBob Metcalfe, Ben Miller, Robert Morris, Michael Nielsen, Courtenay\nPipkin, Joris Poort, Mieke Roos, Rajat Suri, Harj Taggar, Garry\nTan, and my younger son for suggestions and for reading drafts.",
        "start_char_idx": 64738,
        "end_char_idx": 66554,
        "text_template": "{metadata_str}\n\n{content}",
        "metadata_template": "{key}: {value}",
        "metadata_seperator": "\n",
        "class_name": "TextNode"
      },
      "__type__": "1"
    },
    "f89aade3-d8ad-4914-b203-a535ed40e172": {
      "__data__": {
        "id_": "f89aade3-d8ad-4914-b203-a535ed40e172",
        "embedding": null,
        "metadata": {
          "source": "https://paulgraham.com/richnow.html",
          "title": "How People Get Rich Now",
          "language": null
        },
        "excluded_embed_metadata_keys": [],
        "excluded_llm_metadata_keys": [],
        "relationships": {
          "1": {
            "node_id": "d1f6290b-658f-4ec1-8bd8-65f7c563197f",
            "node_type": "4",
            "metadata": {
              "source": "https://paulgraham.com/richnow.html",
              "title": "How People Get Rich Now",
              "language": null
            },
            "hash": "c3551dffbab3f0879da9f373b2fc47f21a7a41d4ea6a0b3d64b3b47553beb431",
            "class_name": "RelatedNodeInfo"
          },
          "2": {
            "node_id": "6d6e87db-a119-40e9-aa96-cd47a2fa1a04",
            "node_type": "1",
            "metadata": {
              "source": "https://paulgraham.com/greatwork.html",
              "title": "How to Do Great Work",
              "language": null
            },
            "hash": "6ad37d18ab357ed270b2532f3304cc813626a2112686ab0c7ab08b2614652168",
            "class_name": "RelatedNodeInfo"
          },
          "3": {
            "node_id": "5180efc2-9f78-43db-9930-8d137bc95818",
            "node_type": "1",
            "metadata": {},
            "hash": "23bdcd1556af660cd6c8d9f37bdf0f6e3903f94cb45b1688adc7e52e8a5d98ff",
            "class_name": "RelatedNodeInfo"
          }
        },
        "text": "How People Get Rich Now\n\nApril 2021Every year since 1982, Forbes magazine has published a list of the\r\nrichest Americans. If we compare the 100 richest people in 1982 to\r\nthe 100 richest in 2020, we notice some big differences.In 1982 the most common source of wealth was inheritance. Of the\r\n100 richest people, 60 inherited from an ancestor. There were 10\r\ndu Pont heirs alone. By 2020 the number of heirs had been cut in\r\nhalf, accounting for only 27 of the biggest 100 fortunes.Why would the percentage of heirs decrease? Not because inheritance\r\ntaxes increased. In fact, they decreased significantly during this\r\nperiod. The reason the percentage of heirs has decreased is not\r\nthat fewer people are inheriting great fortunes, but that more\r\npeople are making them.How are people making these new fortunes? Roughly 3/4 by starting\r\ncompanies and 1/4 by investing. Of the 73 new fortunes in 2020, 56\r\nderive from founders' or early employees' equity (52 founders, 2\r\nearly employees, and 2 wives of founders), and 17 from managing\r\ninvestment funds.There were no fund managers among the 100 richest Americans in 1982.\r\nHedge funds and private equity firms existed in 1982, but none of\r\ntheir founders were rich enough yet to make it into the top 100.\r\nTwo things changed: fund managers discovered new ways to generate\r\nhigh returns, and more investors were willing to trust them with\r\ntheir money.\r\n[1]But the main source of new fortunes now is starting companies, and\r\nwhen you look at the data, you see big changes there too. People\r\nget richer from starting companies now than they did in 1982, because\r\nthe companies do different things.In 1982, there were two dominant sources of new wealth: oil and\r\nreal estate. Of the 40 new fortunes in 1982, at least 24 were due\r\nprimarily to oil or real estate. Now only a small number are: of\r\nthe 73 new fortunes in 2020, 4 were due to real estate and only 2\r\nto oil.By 2020 the biggest source of new wealth was what are sometimes\r\ncalled \"tech\" companies. Of the 73 new fortunes, about 30 derive\r\nfrom such companies. These are particularly common among the richest\r\nof the rich: 8 of the top 10 fortunes in 2020 were new fortunes of\r\nthis type.Arguably it's slightly misleading to treat tech as a category.\r\nIsn't Amazon really a retailer, and Tesla a car maker? Yes and no.\r\nMaybe in 50 years, when what we call tech is taken for granted, it\r\nwon't seem right to put these two businesses in the same category.\r\nBut at the moment at least, there is definitely something they share\r\nin common that distinguishes them. What retailer starts AWS? What\r\ncar maker is run by someone who also has a rocket company?The tech companies behind the top 100 fortunes also form a\r\nwell-differentiated group in the sense that they're all companies\r\nthat venture capitalists would readily invest in, and the others\r\nmostly not. And there's a reason why: these are mostly companies\r\nthat win by having better technology, rather than just a CEO who's\r\nreally driven and good at making deals.To that extent, the rise of the tech companies represents a qualitative\r\nchange. The oil and real estate magnates of the 1982 Forbes 400\r\ndidn't win by making better technology. They won by being really\r\ndriven and good at making deals. \r\n[2]\r\nAnd indeed, that way of\r\ngetting rich is so old that it predates the Industrial Revolution.\r\nThe courtiers who got rich in the (nominal) service of European\r\nroyal houses in the 16th and 17th centuries were also, as a rule,\r\nreally driven and good at making deals.People who don't look any deeper than the Gini coefficient look\r\nback on the world of 1982 as the good old days, because those who\r\ngot rich then didn't get as rich. But if you dig into how they\r\ngot rich, the old days don't look so good. In 1982, 84% of the\r\nrichest 100 people got rich by inheritance, extracting natural\r\nresources, or doing real estate deals. Is that really better than\r\na world in which the richest people get rich by starting tech\r\ncompanies?Why are people starting so many more new companies than they used\r\nto, and why are they getting so rich from it?",
        "start_char_idx": 0,
        "end_char_idx": 4110,
        "text_template": "{metadata_str}\n\n{content}",
        "metadata_template": "{key}: {value}",
        "metadata_seperator": "\n",
        "class_name": "TextNode"
      },
      "__type__": "1"
    },
    "5180efc2-9f78-43db-9930-8d137bc95818": {
      "__data__": {
        "id_": "5180efc2-9f78-43db-9930-8d137bc95818",
        "embedding": null,
        "metadata": {
          "source": "https://paulgraham.com/richnow.html",
          "title": "How People Get Rich Now",
          "language": null
        },
        "excluded_embed_metadata_keys": [],
        "excluded_llm_metadata_keys": [],
        "relationships": {
          "1": {
            "node_id": "d1f6290b-658f-4ec1-8bd8-65f7c563197f",
            "node_type": "4",
            "metadata": {
              "source": "https://paulgraham.com/richnow.html",
              "title": "How People Get Rich Now",
              "language": null
            },
            "hash": "c3551dffbab3f0879da9f373b2fc47f21a7a41d4ea6a0b3d64b3b47553beb431",
            "class_name": "RelatedNodeInfo"
          },
          "2": {
            "node_id": "f89aade3-d8ad-4914-b203-a535ed40e172",
            "node_type": "1",
            "metadata": {
              "source": "https://paulgraham.com/richnow.html",
              "title": "How People Get Rich Now",
              "language": null
            },
            "hash": "d5d101a88960fa916f27f86952854c1e5c389c5fcae03c6786cf1c55dc6ec72a",
            "class_name": "RelatedNodeInfo"
          },
          "3": {
            "node_id": "22e640ca-28ae-4ce6-8e5d-0a9ed9989d0c",
            "node_type": "1",
            "metadata": {},
            "hash": "929c169a33d84ad6a4c5e79f90bdd879a61fe372fa79ff76c524a9dc68aed002",
            "class_name": "RelatedNodeInfo"
          }
        },
        "text": "The courtiers who got rich in the (nominal) service of European\r\nroyal houses in the 16th and 17th centuries were also, as a rule,\r\nreally driven and good at making deals.People who don't look any deeper than the Gini coefficient look\r\nback on the world of 1982 as the good old days, because those who\r\ngot rich then didn't get as rich. But if you dig into how they\r\ngot rich, the old days don't look so good. In 1982, 84% of the\r\nrichest 100 people got rich by inheritance, extracting natural\r\nresources, or doing real estate deals. Is that really better than\r\na world in which the richest people get rich by starting tech\r\ncompanies?Why are people starting so many more new companies than they used\r\nto, and why are they getting so rich from it? The answer to the\r\nfirst question, curiously enough, is that it's misphrased. We\r\nshouldn't be asking why people are starting companies, but why\r\nthey're starting companies again.\r\n[3]In 1892, the New York Herald Tribune compiled a list of all the\r\nmillionaires in America. They found 4047 of them. How many had\r\ninherited their wealth then? Only about 20%, which is less than the\r\nproportion of heirs today. And when you investigate the sources of\r\nthe new fortunes, 1892 looks even more like today. Hugh Rockoff\r\nfound that \"many of the richest ... gained their initial edge from\r\nthe new technology of mass production.\"\r\n[4]So it's not 2020 that's the anomaly here, but 1982. The real question\r\nis why so few people had gotten rich from starting companies in\r\n1982. And the answer is that even as the Herald Tribune's list was\r\nbeing compiled, a wave of consolidation \r\nwas sweeping through the\r\nAmerican economy. In the late 19th and early 20th centuries,\r\nfinanciers like J. P. Morgan combined thousands of smaller companies\r\ninto a few hundred giant ones with commanding economies of scale.\r\nBy the end of World War II, as Michael Lind writes, \"the major\r\nsectors of the economy were either organized as government-backed\r\ncartels or dominated by a few oligopolistic corporations.\"\r\n[5]In 1960, most of the people who start startups today would have\r\ngone to work for one of them. You could get rich from starting your\r\nown company in 1890 and in 2020, but in 1960 it was not really a\r\nviable option. You couldn't break through the oligopolies to get\r\nat the markets. So the prestigious route in 1960 was not to start\r\nyour own company, but to work your way up the corporate ladder at\r\nan existing one.\r\n[6]Making everyone a corporate employee decreased economic inequality\r\n(and every other kind of variation), but if your model of normal\r\nis the mid 20th century, you have a very misleading model in that\r\nrespect. J. P. Morgan's economy turned out to be just a phase, and\r\nstarting in the 1970s, it began to break up.Why did it break up? Partly senescence. The big companies that\r\nseemed models of scale and efficiency in 1930 had by 1970 become\r\nslack and bloated. By 1970 the rigid structure of the economy was\r\nfull of cosy nests that various groups had built to insulate\r\nthemselves from market forces. During the Carter administration the\r\nfederal government realized something was amiss and began, in a\r\nprocess they called \"deregulation,\" to roll back the policies that\r\npropped up the oligopolies.But it wasn't just decay from within that broke up J. P. Morgan's\r\neconomy. There was also pressure from without, in the form of new\r\ntechnology, and particularly microelectronics. The best way to\r\nenvision what happened is to imagine a pond with a crust of ice on\r\ntop. Initially the only way from the bottom to the surface is around\r\nthe edges. But as the ice crust weakens, you start to be able to\r\npunch right through the middle.The edges of the pond were pure tech: companies that actually\r\ndescribed themselves as being in the electronics or software business.\r\nWhen you used the word \"startup\" in 1990, that was what you meant.\r\nBut now startups are punching right through the middle of the ice\r\ncrust and displacing incumbents like retailers and TV networks and\r\ncar companies.",
        "start_char_idx": 3363,
        "end_char_idx": 7410,
        "text_template": "{metadata_str}\n\n{content}",
        "metadata_template": "{key}: {value}",
        "metadata_seperator": "\n",
        "class_name": "TextNode"
      },
      "__type__": "1"
    },
    "22e640ca-28ae-4ce6-8e5d-0a9ed9989d0c": {
      "__data__": {
        "id_": "22e640ca-28ae-4ce6-8e5d-0a9ed9989d0c",
        "embedding": null,
        "metadata": {
          "source": "https://paulgraham.com/richnow.html",
          "title": "How People Get Rich Now",
          "language": null
        },
        "excluded_embed_metadata_keys": [],
        "excluded_llm_metadata_keys": [],
        "relationships": {
          "1": {
            "node_id": "d1f6290b-658f-4ec1-8bd8-65f7c563197f",
            "node_type": "4",
            "metadata": {
              "source": "https://paulgraham.com/richnow.html",
              "title": "How People Get Rich Now",
              "language": null
            },
            "hash": "c3551dffbab3f0879da9f373b2fc47f21a7a41d4ea6a0b3d64b3b47553beb431",
            "class_name": "RelatedNodeInfo"
          },
          "2": {
            "node_id": "5180efc2-9f78-43db-9930-8d137bc95818",
            "node_type": "1",
            "metadata": {
              "source": "https://paulgraham.com/richnow.html",
              "title": "How People Get Rich Now",
              "language": null
            },
            "hash": "a4c0431ce4761b6deafc57a27c8dcf9737b7d3bbb7e609da623820a8c244456f",
            "class_name": "RelatedNodeInfo"
          },
          "3": {
            "node_id": "4ffb8336-0912-4fd7-9925-adc04c642f3f",
            "node_type": "1",
            "metadata": {},
            "hash": "84e4437e5e3001104481d15658818eb0186c881aee56c306af0c29fcc28c904a",
            "class_name": "RelatedNodeInfo"
          }
        },
        "text": "There was also pressure from without, in the form of new\r\ntechnology, and particularly microelectronics. The best way to\r\nenvision what happened is to imagine a pond with a crust of ice on\r\ntop. Initially the only way from the bottom to the surface is around\r\nthe edges. But as the ice crust weakens, you start to be able to\r\npunch right through the middle.The edges of the pond were pure tech: companies that actually\r\ndescribed themselves as being in the electronics or software business.\r\nWhen you used the word \"startup\" in 1990, that was what you meant.\r\nBut now startups are punching right through the middle of the ice\r\ncrust and displacing incumbents like retailers and TV networks and\r\ncar companies.\r\n[7]But though the breakup of J. P. Morgan's economy created a new world\r\nin the technological sense, it was a reversion to the norm in the\r\nsocial sense. If you only look back as far as the mid 20th century,\r\nit seems like people getting rich by starting their own companies\r\nis a recent phenomenon. But if you look back further, you realize\r\nit's actually the default. So what we should expect in the future\r\nis more of the same. Indeed, we should expect both the number and\r\nwealth of founders to grow, because every decade it gets easier to\r\nstart a startup.Part of the reason it's getting easier to start a startup is social.\r\nSociety is (re)assimilating the concept. If you start one now, your\r\nparents won't freak out the way they would have a generation ago,\r\nand knowledge about how to do it is much more widespread. But the\r\nmain reason it's easier to start a startup now is that it's cheaper.\r\nTechnology has driven down the cost of both building products and\r\nacquiring customers.The decreasing cost of starting a startup has in turn changed the\r\nbalance of power between founders and investors. Back when starting\r\na startup meant building a factory, you needed investors' permission\r\nto do it at all. But now investors need founders more than founders\r\nneed investors, and that, combined with the increasing amount of\r\nventure capital available, has driven up valuations.\r\n[8]So the decreasing cost of starting a startup increases the number\r\nof rich people in two ways: it means that more people start them,\r\nand that those who do can raise money on better terms.But there's also a third factor at work: the companies themselves\r\nare more valuable, because newly founded companies grow faster than\r\nthey used to. Technology hasn't just made it cheaper to build and\r\ndistribute things, but faster too.This trend has been running for a long time. IBM, founded in 1896,\r\ntook 45 years to reach a billion 2020 dollars in revenue.\r\nHewlett-Packard, founded in 1939, took 25 years. Microsoft, founded\r\nin 1975, took 13 years. Now the norm for fast-growing companies is\r\n7 or 8 years.\r\n[9]Fast growth has a double effect on the value of founders' stock.\r\nThe value of a company is a function of its revenue and its growth\r\nrate. So if a company grows faster, you not only get to a billion\r\ndollars in revenue sooner, but the company is more valuable when\r\nit reaches that point than it would be if it were growing slower.That's why founders sometimes get so rich so young now. The low\r\ninitial cost of starting a startup means founders can start young,\r\nand the fast growth of companies today means that if they succeed\r\nthey could be surprisingly rich just a few years later.It's easier now to start and grow a company than it has ever been.\r\nThat means more people start them, that those who do get better\r\nterms from investors, and that the resulting companies become more\r\nvaluable. Once you understand how these mechanisms work, and that\r\nstartups were suppressed for most of the 20th century, you don't\r\nhave to resort to some vague right turn the country took under\r\nReagan to explain why America's Gini coefficient is increasing. Of\r\ncourse the Gini coefficient is increasing. With more people starting\r\nmore valuable companies, how could it not be?Notes[1]\r\nInvestment firms grew rapidly after a regulatory change by\r\nthe Labor Department in 1978 allowed pension funds to invest in\r\nthem, but the effects of this growth were not yet visible in the\r\ntop 100 fortunes in 1982.[2]\r\nGeorge Mitchell deserves mention as an exception. Though\r\nreally driven and good at making deals, he was also the first to\r\nfigure out how to use fracking to get natural gas out of shale.",
        "start_char_idx": 6701,
        "end_char_idx": 11094,
        "text_template": "{metadata_str}\n\n{content}",
        "metadata_template": "{key}: {value}",
        "metadata_seperator": "\n",
        "class_name": "TextNode"
      },
      "__type__": "1"
    },
    "4ffb8336-0912-4fd7-9925-adc04c642f3f": {
      "__data__": {
        "id_": "4ffb8336-0912-4fd7-9925-adc04c642f3f",
        "embedding": null,
        "metadata": {
          "source": "https://paulgraham.com/richnow.html",
          "title": "How People Get Rich Now",
          "language": null
        },
        "excluded_embed_metadata_keys": [],
        "excluded_llm_metadata_keys": [],
        "relationships": {
          "1": {
            "node_id": "d1f6290b-658f-4ec1-8bd8-65f7c563197f",
            "node_type": "4",
            "metadata": {
              "source": "https://paulgraham.com/richnow.html",
              "title": "How People Get Rich Now",
              "language": null
            },
            "hash": "c3551dffbab3f0879da9f373b2fc47f21a7a41d4ea6a0b3d64b3b47553beb431",
            "class_name": "RelatedNodeInfo"
          },
          "2": {
            "node_id": "22e640ca-28ae-4ce6-8e5d-0a9ed9989d0c",
            "node_type": "1",
            "metadata": {
              "source": "https://paulgraham.com/richnow.html",
              "title": "How People Get Rich Now",
              "language": null
            },
            "hash": "bab9ef11cde2e863c89b25b6ac06d07b40ae46a0d222e4a8de6d88a8c87afd96",
            "class_name": "RelatedNodeInfo"
          },
          "3": {
            "node_id": "128adaac-700f-45e4-bfa2-bf45b102c362",
            "node_type": "1",
            "metadata": {},
            "hash": "ac76efc7c495328035b22f3ae6be2b9f295027b08700e11465d1f8bbf7ab447b",
            "class_name": "RelatedNodeInfo"
          }
        },
        "text": "Once you understand how these mechanisms work, and that\r\nstartups were suppressed for most of the 20th century, you don't\r\nhave to resort to some vague right turn the country took under\r\nReagan to explain why America's Gini coefficient is increasing. Of\r\ncourse the Gini coefficient is increasing. With more people starting\r\nmore valuable companies, how could it not be?Notes[1]\r\nInvestment firms grew rapidly after a regulatory change by\r\nthe Labor Department in 1978 allowed pension funds to invest in\r\nthem, but the effects of this growth were not yet visible in the\r\ntop 100 fortunes in 1982.[2]\r\nGeorge Mitchell deserves mention as an exception. Though\r\nreally driven and good at making deals, he was also the first to\r\nfigure out how to use fracking to get natural gas out of shale.[3]\r\nWhen I say people are starting more companies, I mean the\r\ntype of company meant to grow \r\nvery big. There has actually been a\r\ndecrease in the last couple decades in the overall number of new\r\ncompanies. But the vast majority of companies are small retail and\r\nservice businesses. So what the statistics about the decreasing\r\nnumber of new businesses mean is that people are starting fewer\r\nshoe stores and barber shops.People sometimes get confused when they see a graph labelled\r\n\"startups\" that's going down, because there are two senses of the\r\nword \"startup\": (1) the founding of a company, and (2) a particular\r\ntype of company designed to grow big fast. The statistics mean\r\nstartup in sense (1), not sense (2).[4]\r\nRockoff, Hugh. \"Great Fortunes of the Gilded Age.\" NBER Working\r\nPaper 14555, 2008.[5]\r\nLind, Michael. Land of Promise. HarperCollins, 2012.It's also likely that the high tax rates in the mid 20th century\r\ndeterred people from starting their own companies. Starting one's\r\nown company is risky, and when risk isn't rewarded, people opt for\r\nsafety instead.But it wasn't simply cause and effect. The oligopolies and high tax\r\nrates of the mid 20th century were all of a piece. Lower taxes are\r\nnot just a cause of entrepreneurship, but an effect as well: the\r\npeople getting rich in the mid 20th century from real estate and\r\noil exploration lobbied for and got huge tax loopholes that made\r\ntheir effective tax rate much lower, and presumably if it had been\r\nmore common to grow big companies by building new technology, the\r\npeople doing that would have lobbied for their own loopholes as\r\nwell.[6]\r\nThat's why the people who did get rich in the mid 20th century\r\nso often got rich from oil exploration or real estate. Those were\r\nthe two big areas of the economy that weren't susceptible to\r\nconsolidation.[7]\r\nThe pure tech companies used to be called \"high technology\" startups.\r\nBut now that startups can punch through the middle of the ice crust,\r\nwe don't need a separate name for the edges, and the term \"high-tech\"\r\nhas a decidedly retro \r\nsound.[8]\r\nHigher valuations mean you either sell less stock to get a\r\ngiven amount of money, or get more money for a given amount of\r\nstock. The typical startup does some of each. Obviously you end up\r\nricher if you keep more stock, but you should also end up richer\r\nif you raise more money, because (a) it should make the company\r\nmore successful, and (b) you should be able to last longer before\r\nthe next round, or not even need one. Notice all those shoulds\r\nthough. In practice a lot of money slips through them.It might seem that the huge rounds raised by startups nowadays\r\ncontradict the claim that it has become cheaper to start one. But\r\nthere's no contradiction here; the startups that raise the most are\r\nthe ones doing it by choice, in order to grow faster, not the ones\r\ndoing it because they need the money to survive. There's nothing\r\nlike not needing money to make people offer it to you.You would think, after having been on the side of labor in its fight\r\nwith capital for almost two centuries, that the far left would be\r\nhappy that labor has finally prevailed. But none of them seem to\r\nbe. You can almost hear them saying \"No, no, not that way.\"[9]\r\nIBM was created in 1911 by merging three companies, the most\r\nimportant of which was Herman Hollerith's Tabulating Machine Company,\r\nfounded in 1896.",
        "start_char_idx": 10306,
        "end_char_idx": 14495,
        "text_template": "{metadata_str}\n\n{content}",
        "metadata_template": "{key}: {value}",
        "metadata_seperator": "\n",
        "class_name": "TextNode"
      },
      "__type__": "1"
    },
    "128adaac-700f-45e4-bfa2-bf45b102c362": {
      "__data__": {
        "id_": "128adaac-700f-45e4-bfa2-bf45b102c362",
        "embedding": null,
        "metadata": {
          "source": "https://paulgraham.com/richnow.html",
          "title": "How People Get Rich Now",
          "language": null
        },
        "excluded_embed_metadata_keys": [],
        "excluded_llm_metadata_keys": [],
        "relationships": {
          "1": {
            "node_id": "d1f6290b-658f-4ec1-8bd8-65f7c563197f",
            "node_type": "4",
            "metadata": {
              "source": "https://paulgraham.com/richnow.html",
              "title": "How People Get Rich Now",
              "language": null
            },
            "hash": "c3551dffbab3f0879da9f373b2fc47f21a7a41d4ea6a0b3d64b3b47553beb431",
            "class_name": "RelatedNodeInfo"
          },
          "2": {
            "node_id": "4ffb8336-0912-4fd7-9925-adc04c642f3f",
            "node_type": "1",
            "metadata": {
              "source": "https://paulgraham.com/richnow.html",
              "title": "How People Get Rich Now",
              "language": null
            },
            "hash": "44611b17ce642e3ee11407c831300460cee85334b60ea18f81078698534f4d05",
            "class_name": "RelatedNodeInfo"
          },
          "3": {
            "node_id": "de1c79f9-ee30-4e5b-b062-ca583ca6a720",
            "node_type": "1",
            "metadata": {},
            "hash": "14146190aaef1f95677c36b3fa0af5d246f8ad633524f29c6017466af0ccf847",
            "class_name": "RelatedNodeInfo"
          }
        },
        "text": "In practice a lot of money slips through them.It might seem that the huge rounds raised by startups nowadays\r\ncontradict the claim that it has become cheaper to start one. But\r\nthere's no contradiction here; the startups that raise the most are\r\nthe ones doing it by choice, in order to grow faster, not the ones\r\ndoing it because they need the money to survive. There's nothing\r\nlike not needing money to make people offer it to you.You would think, after having been on the side of labor in its fight\r\nwith capital for almost two centuries, that the far left would be\r\nhappy that labor has finally prevailed. But none of them seem to\r\nbe. You can almost hear them saying \"No, no, not that way.\"[9]\r\nIBM was created in 1911 by merging three companies, the most\r\nimportant of which was Herman Hollerith's Tabulating Machine Company,\r\nfounded in 1896. In 1941 its revenues were $60 million.Hewlett-Packard's revenues in 1964 were $125 million.Microsoft's revenues in 1988 were $590 million.Thanks to Trevor Blackwell, Jessica Livingston, Bob Lesko, Robert Morris, \r\nRuss Roberts, and Alex Tabarrok for reading drafts of this, and to Jon Erlichman for growth data.",
        "start_char_idx": 13645,
        "end_char_idx": 14807,
        "text_template": "{metadata_str}\n\n{content}",
        "metadata_template": "{key}: {value}",
        "metadata_seperator": "\n",
        "class_name": "TextNode"
      },
      "__type__": "1"
    },
    "de1c79f9-ee30-4e5b-b062-ca583ca6a720": {
      "__data__": {
        "id_": "de1c79f9-ee30-4e5b-b062-ca583ca6a720",
        "embedding": null,
        "metadata": {
          "source": "https://paulgraham.com/think.html",
          "title": "How to Think for Yourself",
          "language": null
        },
        "excluded_embed_metadata_keys": [],
        "excluded_llm_metadata_keys": [],
        "relationships": {
          "1": {
            "node_id": "f704ac66-8744-4697-8c70-c06e3af28252",
            "node_type": "4",
            "metadata": {
              "source": "https://paulgraham.com/think.html",
              "title": "How to Think for Yourself",
              "language": null
            },
            "hash": "ce8ba39b9db8a39afdae99d7d30ff75bb7f4d1c5ea067f163d9f434e1fdcdc19",
            "class_name": "RelatedNodeInfo"
          },
          "2": {
            "node_id": "128adaac-700f-45e4-bfa2-bf45b102c362",
            "node_type": "1",
            "metadata": {
              "source": "https://paulgraham.com/richnow.html",
              "title": "How People Get Rich Now",
              "language": null
            },
            "hash": "1768465b995015debbbf60411b2fccaa2ac83912f6ab1ffd0c2a9b43c7b9f0c2",
            "class_name": "RelatedNodeInfo"
          },
          "3": {
            "node_id": "27a60777-4116-47c7-b705-cbd3eafa5f5b",
            "node_type": "1",
            "metadata": {},
            "hash": "869d5f2d66f34b483678ebe5bc3d68f18fa894a95fde780cbfd5c5471d54b2fb",
            "class_name": "RelatedNodeInfo"
          }
        },
        "text": "How to Think for Yourself\n\nNovember 2020There are some kinds of work that you can't do well without thinking\ndifferently from your peers. To be a successful scientist, for\nexample, it's not enough just to be correct. Your ideas have to be\nboth correct and novel. You can't publish papers saying things other\npeople already know. You need to say things no one else has realized\nyet.The same is true for investors. It's not enough for a public market\ninvestor to predict correctly how a company will do. If a lot of\nother people make the same prediction, the stock price will already\nreflect it, and there's no room to make money. The only valuable\ninsights are the ones most other investors don't share.You see this pattern with startup founders too. You don't want to\nstart a startup to do something that everyone agrees is a good idea,\nor there will already be other companies doing it. You have to do\nsomething that sounds to most other people like a bad idea, but\nthat you know isn't \u0097 like writing software for a tiny computer\nused by a few thousand hobbyists, or starting a site to let people\nrent airbeds on strangers' floors.Ditto for essayists. An essay that told people things they already\nknew would be boring. You have to tell them something new.But this pattern isn't universal. In fact, it doesn't hold for most\nkinds of work. In most kinds of work \u0097 to be an administrator, for\nexample \u0097 all you need is the first half. All you need is to be\nright. It's not essential that everyone else be wrong.There's room for a little novelty in most kinds of work, but in\npractice there's a fairly sharp distinction between the kinds of\nwork where it's essential to be independent-minded, and the kinds\nwhere it's not.I wish someone had told me about this distinction when I was a kid,\nbecause it's one of the most important things to think about when\nyou're deciding what kind of work you want to do. Do you want to\ndo the kind of work where you can only win by thinking differently\nfrom everyone else? I suspect most people's unconscious mind will\nanswer that question before their conscious mind has a chance to.\nI know mine does.Independent-mindedness seems to be more a matter of nature than\nnurture. Which means if you pick the wrong type of work, you're\ngoing to be unhappy. If you're naturally independent-minded, you're\ngoing to find it frustrating to be a middle manager. And if you're\nnaturally conventional-minded, you're going to be sailing into a\nheadwind if you try to do original research.One difficulty here, though, is that people are often mistaken about\nwhere they fall on the spectrum from conventional- to independent-minded.\nConventional-minded people don't like to think of themselves as\nconventional-minded. And in any case, it genuinely feels to them\nas if they make up their own minds about everything. It's just a\ncoincidence that their beliefs are identical to their peers'. And\nthe independent-minded, meanwhile, are often unaware how different\ntheir ideas are from conventional ones, at least till they state\nthem publicly.\n[1]By the time they reach adulthood, most people know roughly how smart\nthey are (in the narrow sense of ability to solve pre-set problems),\nbecause they're constantly being tested and ranked according to it.\nBut schools generally ignore independent-mindedness, except to the\nextent they try to suppress it. So we don't get anything like the\nsame kind of feedback about how independent-minded we are.There may even be a phenomenon like Dunning-Kruger at work, where\nthe most conventional-minded people are confident that they're\nindependent-minded, while the genuinely independent-minded worry\nthey might not be independent-minded enough.\n___________\nCan you make yourself more independent-minded? I think so. This\nquality may be largely inborn, but there seem to be ways to magnify\nit, or at least not to suppress it.One of the most effective techniques is one practiced unintentionally\nby most nerds: simply to be less aware what conventional beliefs\nare. It's hard to be a conformist if you don't know what you're\nsupposed to conform to. Though again, it may be that such people\nalready are independent-minded. A conventional-minded person would\nprobably feel anxious not knowing what other people thought, and\nmake more effort to find out.It matters a lot who you surround yourself with.",
        "start_char_idx": 0,
        "end_char_idx": 4348,
        "text_template": "{metadata_str}\n\n{content}",
        "metadata_template": "{key}: {value}",
        "metadata_seperator": "\n",
        "class_name": "TextNode"
      },
      "__type__": "1"
    },
    "27a60777-4116-47c7-b705-cbd3eafa5f5b": {
      "__data__": {
        "id_": "27a60777-4116-47c7-b705-cbd3eafa5f5b",
        "embedding": null,
        "metadata": {
          "source": "https://paulgraham.com/think.html",
          "title": "How to Think for Yourself",
          "language": null
        },
        "excluded_embed_metadata_keys": [],
        "excluded_llm_metadata_keys": [],
        "relationships": {
          "1": {
            "node_id": "f704ac66-8744-4697-8c70-c06e3af28252",
            "node_type": "4",
            "metadata": {
              "source": "https://paulgraham.com/think.html",
              "title": "How to Think for Yourself",
              "language": null
            },
            "hash": "ce8ba39b9db8a39afdae99d7d30ff75bb7f4d1c5ea067f163d9f434e1fdcdc19",
            "class_name": "RelatedNodeInfo"
          },
          "2": {
            "node_id": "de1c79f9-ee30-4e5b-b062-ca583ca6a720",
            "node_type": "1",
            "metadata": {
              "source": "https://paulgraham.com/think.html",
              "title": "How to Think for Yourself",
              "language": null
            },
            "hash": "4edf1bc98eb8ebefe2845cae5a5e963f6232153eac4007f794b626be9ebe4837",
            "class_name": "RelatedNodeInfo"
          },
          "3": {
            "node_id": "04b785da-e897-47d0-b393-567fe996a7b7",
            "node_type": "1",
            "metadata": {},
            "hash": "4098eeb70cf56e6cc349f8d010db4b15b52f998ceaa26ba8cc682156988ae3c6",
            "class_name": "RelatedNodeInfo"
          }
        },
        "text": "___________\nCan you make yourself more independent-minded? I think so. This\nquality may be largely inborn, but there seem to be ways to magnify\nit, or at least not to suppress it.One of the most effective techniques is one practiced unintentionally\nby most nerds: simply to be less aware what conventional beliefs\nare. It's hard to be a conformist if you don't know what you're\nsupposed to conform to. Though again, it may be that such people\nalready are independent-minded. A conventional-minded person would\nprobably feel anxious not knowing what other people thought, and\nmake more effort to find out.It matters a lot who you surround yourself with. If you're surrounded\nby conventional-minded people, it will constrain which ideas you\ncan express, and that in turn will constrain which ideas you have.\nBut if you surround yourself with independent-minded people, you'll\nhave the opposite experience: hearing other people say surprising\nthings will encourage you to, and to think of more.Because the independent-minded find it uncomfortable to be surrounded\nby conventional-minded people, they tend to self-segregate once\nthey have a chance to. The problem with high school is that they\nhaven't yet had a chance to. Plus high school tends to be an\ninward-looking little world whose inhabitants lack confidence, both\nof which magnify the forces of conformism.  So high school is\noften a bad time for the\nindependent-minded. But there is some advantage even here: it\nteaches you what to avoid. If you later find yourself in a situation\nthat makes you think \"this is like high school,\" you know you should\nget out.\n[2]Another place where the independent- and conventional-minded are\nthrown together is in successful startups. The founders and early\nemployees are almost always independent-minded; otherwise the startup\nwouldn't be successful. But conventional-minded people greatly\noutnumber independent-minded ones, so as the company grows, the\noriginal spirit of independent-mindedness is inevitably diluted.\nThis causes all kinds of problems besides the obvious one that the\ncompany starts to suck. One of the strangest is that the founders\nfind themselves able to speak more freely with founders of other\ncompanies than with their own employees.\n[3]Fortunately you don't have to spend all your time with independent-minded\npeople. It's enough to have one or two you can talk to regularly.\nAnd once you find them, they're usually as eager to talk as you\nare; they need you too. Although universities no longer have the\nkind of monopoly they used to have on education, good universities\nare still an excellent way to meet independent-minded people. Most\nstudents will still be conventional-minded, but you'll at least\nfind clumps of independent-minded ones, rather than the near zero\nyou may have found in high school.It also works to go in the other direction: as well as cultivating\na small collection of independent-minded friends, to try to meet\nas many different types of people as you can. It will decrease the\ninfluence of your immediate peers if you have several other groups\nof peers. Plus if you're part of several different worlds, you can\noften import ideas from one to another.But by different types of people, I don't mean demographically\ndifferent. For this technique to work, they have to think differently.\nSo while it's an excellent idea to go and visit other countries,\nyou can probably find people who think differently right around the\ncorner. When I meet someone who knows a lot about something unusual\n(which includes practically everyone, if you dig deep enough), I\ntry to learn what they know that other people don't. There are\nalmost always surprises here. It's a good way to make conversation\nwhen you meet strangers, but I don't do it to make conversation.\nI really want to know.You can expand the source of influences in time as well as space,\nby reading history. When I read history I do it not just to learn\nwhat happened, but to try to get inside the heads of people who\nlived in the past. How did things look to them? This is hard to do,\nbut worth the effort for the same reason it's worth travelling far\nto triangulate a point.You can also take more explicit measures to prevent yourself from\nautomatically adopting conventional opinions. The most general is\nto cultivate an attitude of skepticism. When you hear someone say\nsomething, stop and ask yourself \"Is that true?\" Don't say it out\nloud.",
        "start_char_idx": 3696,
        "end_char_idx": 8128,
        "text_template": "{metadata_str}\n\n{content}",
        "metadata_template": "{key}: {value}",
        "metadata_seperator": "\n",
        "class_name": "TextNode"
      },
      "__type__": "1"
    },
    "04b785da-e897-47d0-b393-567fe996a7b7": {
      "__data__": {
        "id_": "04b785da-e897-47d0-b393-567fe996a7b7",
        "embedding": null,
        "metadata": {
          "source": "https://paulgraham.com/think.html",
          "title": "How to Think for Yourself",
          "language": null
        },
        "excluded_embed_metadata_keys": [],
        "excluded_llm_metadata_keys": [],
        "relationships": {
          "1": {
            "node_id": "f704ac66-8744-4697-8c70-c06e3af28252",
            "node_type": "4",
            "metadata": {
              "source": "https://paulgraham.com/think.html",
              "title": "How to Think for Yourself",
              "language": null
            },
            "hash": "ce8ba39b9db8a39afdae99d7d30ff75bb7f4d1c5ea067f163d9f434e1fdcdc19",
            "class_name": "RelatedNodeInfo"
          },
          "2": {
            "node_id": "27a60777-4116-47c7-b705-cbd3eafa5f5b",
            "node_type": "1",
            "metadata": {
              "source": "https://paulgraham.com/think.html",
              "title": "How to Think for Yourself",
              "language": null
            },
            "hash": "13c5780e7c7839f6ddbc7fbac8d4ad4adb2e75a1f6490c4103a5214c002bce14",
            "class_name": "RelatedNodeInfo"
          },
          "3": {
            "node_id": "684dce58-30f5-4bed-a8c7-996076bbe548",
            "node_type": "1",
            "metadata": {},
            "hash": "ba42fdfe6d73009e435a604d98871a4add16f93815debf28508a0dd91daeab8a",
            "class_name": "RelatedNodeInfo"
          }
        },
        "text": "There are\nalmost always surprises here. It's a good way to make conversation\nwhen you meet strangers, but I don't do it to make conversation.\nI really want to know.You can expand the source of influences in time as well as space,\nby reading history. When I read history I do it not just to learn\nwhat happened, but to try to get inside the heads of people who\nlived in the past. How did things look to them? This is hard to do,\nbut worth the effort for the same reason it's worth travelling far\nto triangulate a point.You can also take more explicit measures to prevent yourself from\nautomatically adopting conventional opinions. The most general is\nto cultivate an attitude of skepticism. When you hear someone say\nsomething, stop and ask yourself \"Is that true?\" Don't say it out\nloud. I'm not suggesting that you impose on everyone who talks to\nyou the burden of proving what they say, but rather that you take\nupon yourself the burden of evaluating what they say.Treat it as a puzzle. You know that some accepted ideas will later\nturn out to be wrong. See if you can guess which. The end goal is\nnot to find flaws in the things you're told, but to find the new\nideas that had been concealed by the broken ones. So this game\nshould be an exciting quest for novelty, not a boring protocol for\nintellectual hygiene. And you'll be surprised, when you start asking\n\"Is this true?\", how often the answer is not an immediate yes. If\nyou have any imagination, you're more likely to have too many leads\nto follow than too few.More generally your goal should be not to let anything into your\nhead unexamined, and things don't always enter your head in the\nform of statements. Some of the most powerful influences are implicit.\nHow do you even notice these? By standing back and watching how\nother people get their ideas.When you stand back at a sufficient distance, you can see ideas\nspreading through groups of people like waves. The most obvious are\nin fashion: you notice a few people wearing a certain kind of shirt,\nand then more and more, until half the people around you are wearing\nthe same shirt. You may not care much what you wear, but there are\nintellectual fashions too, and you definitely don't want to participate\nin those. Not just because you want sovereignty over your own\nthoughts, but because unfashionable\nideas are disproportionately likely to lead somewhere interesting.\nThe best place to find undiscovered ideas is where no one else is\nlooking.\n[4]\n___________\nTo go beyond this general advice, we need to look at the internal\nstructure of independent-mindedness \u0097 at the individual muscles\nwe need to exercise, as it were. It seems to me that it has three\ncomponents: fastidiousness about truth, resistance to being told\nwhat to think, and curiosity.Fastidiousness about truth means more than just not believing things\nthat are false. It means being careful about degree of belief. For\nmost people, degree of belief rushes unexamined toward the extremes:\nthe unlikely becomes impossible, and the probable becomes certain.\n[5]\nTo the independent-minded, this seems unpardonably sloppy.\nThey're willing to have anything in their heads, from highly\nspeculative hypotheses to (apparent) tautologies, but on subjects\nthey care about, everything has to be labelled with a carefully\nconsidered degree of belief.\n[6]The independent-minded thus have a horror of ideologies, which\nrequire one to accept a whole collection of beliefs at once, and\nto treat them as articles of faith. To an independent-minded person\nthat would seem revolting, just as it would seem to someone fastidious\nabout food to take a bite of a submarine sandwich filled with a\nlarge variety of ingredients of indeterminate age and provenance.Without this fastidiousness about truth, you can't be truly\nindependent-minded. It's not enough just to have resistance to being\ntold what to think. Those kind of people reject conventional ideas\nonly to replace them with the most random conspiracy theories. And\nsince these conspiracy theories have often been manufactured to\ncapture them, they end up being less independent-minded than ordinary\npeople, because they're subject to a much more exacting master than\nmere convention.\n[7]Can you increase your fastidiousness about truth? I would think so.\nIn my experience, merely thinking about something you're fastidious\nabout causes that fastidiousness to grow.",
        "start_char_idx": 7341,
        "end_char_idx": 11726,
        "text_template": "{metadata_str}\n\n{content}",
        "metadata_template": "{key}: {value}",
        "metadata_seperator": "\n",
        "class_name": "TextNode"
      },
      "__type__": "1"
    },
    "684dce58-30f5-4bed-a8c7-996076bbe548": {
      "__data__": {
        "id_": "684dce58-30f5-4bed-a8c7-996076bbe548",
        "embedding": null,
        "metadata": {
          "source": "https://paulgraham.com/think.html",
          "title": "How to Think for Yourself",
          "language": null
        },
        "excluded_embed_metadata_keys": [],
        "excluded_llm_metadata_keys": [],
        "relationships": {
          "1": {
            "node_id": "f704ac66-8744-4697-8c70-c06e3af28252",
            "node_type": "4",
            "metadata": {
              "source": "https://paulgraham.com/think.html",
              "title": "How to Think for Yourself",
              "language": null
            },
            "hash": "ce8ba39b9db8a39afdae99d7d30ff75bb7f4d1c5ea067f163d9f434e1fdcdc19",
            "class_name": "RelatedNodeInfo"
          },
          "2": {
            "node_id": "04b785da-e897-47d0-b393-567fe996a7b7",
            "node_type": "1",
            "metadata": {
              "source": "https://paulgraham.com/think.html",
              "title": "How to Think for Yourself",
              "language": null
            },
            "hash": "daeedd65688e9e2298db617d9a89fa13fc9e43934affb45db95bc7165c1244e5",
            "class_name": "RelatedNodeInfo"
          },
          "3": {
            "node_id": "f0449142-a468-47fe-8552-1c5dff7508c3",
            "node_type": "1",
            "metadata": {},
            "hash": "ed75d798fb7e959b9c27090f9d3a44f03a871250f1902f8fb0b76f307a0a5375",
            "class_name": "RelatedNodeInfo"
          }
        },
        "text": "To an independent-minded person\nthat would seem revolting, just as it would seem to someone fastidious\nabout food to take a bite of a submarine sandwich filled with a\nlarge variety of ingredients of indeterminate age and provenance.Without this fastidiousness about truth, you can't be truly\nindependent-minded. It's not enough just to have resistance to being\ntold what to think. Those kind of people reject conventional ideas\nonly to replace them with the most random conspiracy theories. And\nsince these conspiracy theories have often been manufactured to\ncapture them, they end up being less independent-minded than ordinary\npeople, because they're subject to a much more exacting master than\nmere convention.\n[7]Can you increase your fastidiousness about truth? I would think so.\nIn my experience, merely thinking about something you're fastidious\nabout causes that fastidiousness to grow. If so, this is one of\nthose rare virtues we can have more of merely by wanting it. And\nif it's like other forms of fastidiousness, it should also be\npossible to encourage in children. I certainly got a strong dose\nof it from my father.\n[8]The second component of independent-mindedness, resistance to being\ntold what to think, is the most visible of the three. But even this\nis often misunderstood. The big mistake people make about it is to\nthink of it as a merely negative quality. The language we use\nreinforces that idea. You're unconventional. You don't care\nwhat other people think. But it's not just a kind of immunity. In\nthe most independent-minded people, the desire not to be told what\nto think is a positive force. It's not mere skepticism, but an\nactive delight in ideas that subvert\nthe conventional wisdom, the more counterintuitive the better.Some of the most novel ideas seemed at the time almost like practical\njokes. Think how often your reaction to a novel idea is to laugh.\nI don't think it's because novel ideas are funny per se, but because\nnovelty and humor share a certain kind of surprisingness. But while\nnot identical, the two are close enough that there is a definite\ncorrelation between having a sense of humor and being independent-minded\n\u0097 just as there is between being humorless and being conventional-minded.\n[9]I don't think we can significantly increase our resistance to being\ntold what to think. It seems the most innate of the three components\nof independent-mindedness; people who have this quality as adults\nusually showed all too visible signs of it as children. But if we\ncan't increase our resistance to being told what to think, we can\nat least shore it up, by surrounding ourselves with other\nindependent-minded people.The third component of independent-mindedness, curiosity, may be\nthe most interesting. To the extent that we can give a brief answer\nto the question of where novel ideas come from, it's curiosity. That's\nwhat people are usually feeling before having them.In my experience, independent-mindedness and curiosity predict one\nanother perfectly. Everyone I know who's independent-minded is\ndeeply curious, and everyone I know who's conventional-minded isn't.\nExcept, curiously, children. All small children are curious. Perhaps\nthe reason is that even the conventional-minded have to be curious\nin the beginning, in order to learn what the conventions are. Whereas\nthe independent-minded are the gluttons of curiosity, who keep\neating even after they're full.\n[10]The three components of independent-mindedness work in concert:\nfastidiousness about truth and resistance to being told what to\nthink leave space in your brain, and curiosity finds new ideas to\nfill it.Interestingly, the three components can substitute for one another\nin much the same way muscles can. If you're sufficiently fastidious\nabout truth, you don't need to be as resistant to being told what\nto think, because fastidiousness alone will create sufficient gaps\nin your knowledge. And either one can compensate for curiosity,\nbecause if you create enough space in your brain, your discomfort\nat the resulting vacuum will add force to your curiosity. Or curiosity\ncan compensate for them: if you're sufficiently curious, you don't\nneed to clear space in your brain, because the new ideas you discover\nwill push out the conventional ones you acquired by default.Because the components of independent-mindedness are so interchangeable,\nyou can have them to varying degrees and still get the same result.\nSo there is not just a single model of independent-mindedness.",
        "start_char_idx": 10832,
        "end_char_idx": 15323,
        "text_template": "{metadata_str}\n\n{content}",
        "metadata_template": "{key}: {value}",
        "metadata_seperator": "\n",
        "class_name": "TextNode"
      },
      "__type__": "1"
    },
    "f0449142-a468-47fe-8552-1c5dff7508c3": {
      "__data__": {
        "id_": "f0449142-a468-47fe-8552-1c5dff7508c3",
        "embedding": null,
        "metadata": {
          "source": "https://paulgraham.com/think.html",
          "title": "How to Think for Yourself",
          "language": null
        },
        "excluded_embed_metadata_keys": [],
        "excluded_llm_metadata_keys": [],
        "relationships": {
          "1": {
            "node_id": "f704ac66-8744-4697-8c70-c06e3af28252",
            "node_type": "4",
            "metadata": {
              "source": "https://paulgraham.com/think.html",
              "title": "How to Think for Yourself",
              "language": null
            },
            "hash": "ce8ba39b9db8a39afdae99d7d30ff75bb7f4d1c5ea067f163d9f434e1fdcdc19",
            "class_name": "RelatedNodeInfo"
          },
          "2": {
            "node_id": "684dce58-30f5-4bed-a8c7-996076bbe548",
            "node_type": "1",
            "metadata": {
              "source": "https://paulgraham.com/think.html",
              "title": "How to Think for Yourself",
              "language": null
            },
            "hash": "816effb291d9c28ddf85fb2bc0a5a4397a78e529108e2aae82d8877e4f164b6c",
            "class_name": "RelatedNodeInfo"
          },
          "3": {
            "node_id": "88a05154-3994-4497-aaab-0abee055eb1c",
            "node_type": "1",
            "metadata": {},
            "hash": "c05fa91ac885b020eff0df7e958c880c290eaf599d9811d30d4adff6d53734c0",
            "class_name": "RelatedNodeInfo"
          }
        },
        "text": "If you're sufficiently fastidious\nabout truth, you don't need to be as resistant to being told what\nto think, because fastidiousness alone will create sufficient gaps\nin your knowledge. And either one can compensate for curiosity,\nbecause if you create enough space in your brain, your discomfort\nat the resulting vacuum will add force to your curiosity. Or curiosity\ncan compensate for them: if you're sufficiently curious, you don't\nneed to clear space in your brain, because the new ideas you discover\nwill push out the conventional ones you acquired by default.Because the components of independent-mindedness are so interchangeable,\nyou can have them to varying degrees and still get the same result.\nSo there is not just a single model of independent-mindedness. Some\nindependent-minded people are openly subversive, and others are\nquietly curious. They all know the secret handshake though.Is there a way to cultivate curiosity? To start with, you want to\navoid situations that suppress it. How much does the work you're\ncurrently doing engage your curiosity? If the answer is \"not much,\"\nmaybe you should change something.The most important active step you can take to cultivate your\ncuriosity is probably to seek out the topics that engage it. Few\nadults are equally curious about everything, and it doesn't seem\nas if you can choose which topics interest you. So it's up to you\nto find them. Or invent them, if\nnecessary.Another way to increase your curiosity is to indulge it, by\ninvestigating things you're interested in. Curiosity is unlike\nmost other appetites in this respect: indulging it tends to increase\nrather than to sate it. Questions lead to more questions.Curiosity seems to be more individual than fastidiousness about\ntruth or resistance to being told what to think. To the degree\npeople have the latter two, they're usually pretty general, whereas\ndifferent people can be curious about very different things. So\nperhaps curiosity is the compass here. Perhaps, if your goal is to\ndiscover novel ideas, your motto should not be \"do what you love\"\nso much as \"do what you're curious about.\"Notes[1]\nOne convenient consequence of the fact that no one identifies\nas conventional-minded is that you can say what you like about\nconventional-minded people without getting in too much trouble.\nWhen I wrote \"The Four Quadrants of\nConformism\" I expected a firestorm of rage from the\naggressively conventional-minded, but in fact it was quite muted.\nThey sensed that there was something about the essay that they\ndisliked intensely, but they had a hard time finding a specific\npassage to pin it on.[2]\nWhen I ask myself what in my life is like high school, the\nanswer is Twitter. It's not just full of conventional-minded people,\nas anything its size will inevitably be, but subject to violent\nstorms of conventional-mindedness that remind me of descriptions\nof Jupiter. But while it probably is a net loss to spend time there,\nit has at least made me think more about the distinction between\nindependent- and conventional-mindedness, which I probably wouldn't\nhave done otherwise.[3]\nThe decrease in independent-mindedness in growing startups is\nstill an open problem, but there may be solutions.Founders can delay the problem by making a conscious effort only\nto hire independent-minded people. Which of course also has the\nancillary benefit that they have better ideas.Another possible solution is to create policies that somehow disrupt\nthe force of conformism, much as control rods slow chain reactions,\nso that the conventional-minded aren't as dangerous. The physical\nseparation of Lockheed's Skunk Works may have had this as a side\nbenefit. Recent examples suggest employee forums like Slack may not\nbe an unmitigated good.The most radical solution would be to grow revenues without growing\nthe company. You think hiring that junior PR person will be cheap,\ncompared to a programmer, but what will be the effect on the average\nlevel of independent-mindedness in your company? (The growth in\nstaff relative to faculty seems to have had a similar effect on\nuniversities.) Perhaps the rule about outsourcing work that's not\nyour \"core competency\" should be augmented by one about outsourcing\nwork done by people who'd ruin your culture as employees.Some investment firms already seem to be able to grow revenues\nwithout growing the number of employees. Automation plus the ever\nincreasing articulation of the \"tech stack\" suggest this may one\nday be possible for product companies.[4]\nThere are intellectual fashions in every field, but their\ninfluence varies.",
        "start_char_idx": 14555,
        "end_char_idx": 19136,
        "text_template": "{metadata_str}\n\n{content}",
        "metadata_template": "{key}: {value}",
        "metadata_seperator": "\n",
        "class_name": "TextNode"
      },
      "__type__": "1"
    },
    "88a05154-3994-4497-aaab-0abee055eb1c": {
      "__data__": {
        "id_": "88a05154-3994-4497-aaab-0abee055eb1c",
        "embedding": null,
        "metadata": {
          "source": "https://paulgraham.com/think.html",
          "title": "How to Think for Yourself",
          "language": null
        },
        "excluded_embed_metadata_keys": [],
        "excluded_llm_metadata_keys": [],
        "relationships": {
          "1": {
            "node_id": "f704ac66-8744-4697-8c70-c06e3af28252",
            "node_type": "4",
            "metadata": {
              "source": "https://paulgraham.com/think.html",
              "title": "How to Think for Yourself",
              "language": null
            },
            "hash": "ce8ba39b9db8a39afdae99d7d30ff75bb7f4d1c5ea067f163d9f434e1fdcdc19",
            "class_name": "RelatedNodeInfo"
          },
          "2": {
            "node_id": "f0449142-a468-47fe-8552-1c5dff7508c3",
            "node_type": "1",
            "metadata": {
              "source": "https://paulgraham.com/think.html",
              "title": "How to Think for Yourself",
              "language": null
            },
            "hash": "3ae322f5332609e987eaee4611354a10fa9a34779814a37df9e02c36d9f8d4ae",
            "class_name": "RelatedNodeInfo"
          },
          "3": {
            "node_id": "ec2fae4c-76cf-4048-bf24-317cdae844e5",
            "node_type": "1",
            "metadata": {},
            "hash": "0e8fd659ac9d8dcef3fb629649c49faef815858a9e335b79e18755058d92d052",
            "class_name": "RelatedNodeInfo"
          }
        },
        "text": "Recent examples suggest employee forums like Slack may not\nbe an unmitigated good.The most radical solution would be to grow revenues without growing\nthe company. You think hiring that junior PR person will be cheap,\ncompared to a programmer, but what will be the effect on the average\nlevel of independent-mindedness in your company? (The growth in\nstaff relative to faculty seems to have had a similar effect on\nuniversities.) Perhaps the rule about outsourcing work that's not\nyour \"core competency\" should be augmented by one about outsourcing\nwork done by people who'd ruin your culture as employees.Some investment firms already seem to be able to grow revenues\nwithout growing the number of employees. Automation plus the ever\nincreasing articulation of the \"tech stack\" suggest this may one\nday be possible for product companies.[4]\nThere are intellectual fashions in every field, but their\ninfluence varies. One of the reasons politics, for example, tends\nto be boring is that it's so extremely subject to them. The threshold\nfor having opinions about politics is much lower than the one for having\nopinions about set theory. So while there are some ideas in politics,\nin practice they tend to be swamped by waves of intellectual fashion.[5]\nThe conventional-minded are often fooled by the strength of\ntheir opinions into believing that they're independent-minded. But\nstrong convictions are not a sign of independent-mindedness. Rather\nthe opposite.[6]\nFastidiousness about truth doesn't imply that an independent-minded\nperson won't be dishonest, but that he won't be deluded. It's sort\nof like the definition of a gentleman as someone who is never\nunintentionally rude.[7]\nYou see this especially among political extremists. They think\nthemselves nonconformists, but actually they're niche conformists.\nTheir opinions may be different from the average person's, but they\nare often more influenced by their peers' opinions than the average\nperson's are.[8]\nIf we broaden the concept of fastidiousness about truth so that\nit excludes pandering, bogusness, and pomposity as well as falsehood\nin the strict sense, our model of independent-mindedness can expand\nfurther into the arts.[9]\nThis correlation is far from perfect, though. G\u00f6del and Dirac\ndon't seem to have been very strong in the humor department. But\nsomeone who is both \"neurotypical\" and humorless is very likely to\nbe conventional-minded.[10]\nException: gossip. Almost everyone is curious about gossip.\nThanks to Trevor Blackwell, Paul Buchheit, Patrick Collison, Jessica\nLivingston, Robert Morris, Harj Taggar, and Peter Thiel for reading\ndrafts of this.Italian Translation",
        "start_char_idx": 18220,
        "end_char_idx": 20868,
        "text_template": "{metadata_str}\n\n{content}",
        "metadata_template": "{key}: {value}",
        "metadata_seperator": "\n",
        "class_name": "TextNode"
      },
      "__type__": "1"
    },
    "ec2fae4c-76cf-4048-bf24-317cdae844e5": {
      "__data__": {
        "id_": "ec2fae4c-76cf-4048-bf24-317cdae844e5",
        "embedding": null,
        "metadata": {
          "source": "https://paulgraham.com/google.html",
          "title": "How to Start Google",
          "language": null
        },
        "excluded_embed_metadata_keys": [],
        "excluded_llm_metadata_keys": [],
        "relationships": {
          "1": {
            "node_id": "1493b302-b7ca-4fdb-ad36-39a0d5bff339",
            "node_type": "4",
            "metadata": {
              "source": "https://paulgraham.com/google.html",
              "title": "How to Start Google",
              "language": null
            },
            "hash": "a0e85b883fbf78e97c7b9c89708e327f7e204dbd1c9a3613a1281ac513d69960",
            "class_name": "RelatedNodeInfo"
          },
          "2": {
            "node_id": "88a05154-3994-4497-aaab-0abee055eb1c",
            "node_type": "1",
            "metadata": {
              "source": "https://paulgraham.com/think.html",
              "title": "How to Think for Yourself",
              "language": null
            },
            "hash": "6d7eeb6f0ed86013e621365b3430c2d9d2215d3d38df1c3b10f1be10f22fc972",
            "class_name": "RelatedNodeInfo"
          },
          "3": {
            "node_id": "d968bc65-d1e9-4f17-b2bf-58b97a150768",
            "node_type": "1",
            "metadata": {},
            "hash": "49e5551bc2e695505ce6cdf07b0788f1a2ca8ed2ea589a7c9060699f0a330622",
            "class_name": "RelatedNodeInfo"
          }
        },
        "text": "How to Start Google\n\nMarch 2024(This is a talk I gave to 14 and 15 year olds about what to do now\nif they might want to start a startup later. Lots of schools think\nthey should tell students something about startups. This is what I\nthink they should tell them.)Most of you probably think that when you're released into the\nso-called real world you'll eventually have to get some kind of\njob. That's not true, and today I'm going to talk about a trick you\ncan use to avoid ever having to get a job.The trick is to start your own company. So it's not a trick for\navoiding work, because if you start your own company you'll\nwork harder than you would if you had an ordinary job. But you will\navoid many of the annoying things that come with a job, including\na boss telling you what to do.It's more exciting to work on your own project than someone else's.\nAnd you can also get a lot richer. In fact, this is the standard\nway to get \nreally rich. If you look at the lists of the richest\npeople that occasionally get published in the press, nearly all of\nthem did it by starting their own companies.Starting your own company can mean anything from starting a barber\nshop to starting Google. I'm here to talk about one extreme end of\nthat continuum. I'm going to tell you how to start Google.The companies at the Google end of the continuum are called startups\nwhen they're young. The reason I know about them is that my wife\nJessica and I started something called Y Combinator that is basically\na startup factory. Since 2005, Y Combinator has funded over 4000\nstartups. So we know exactly what you need to start a startup,\nbecause we've helped people do it for the last 19 years.You might have thought I was joking when I said I was going to tell\nyou how to start Google. You might be thinking \"How could we\nstart Google?\" But that's effectively what the people who did start\nGoogle were thinking before they started it. If you'd told Larry\nPage and Sergey Brin, the founders of Google, that the company they\nwere about to start would one day be worth over a trillion dollars,\ntheir heads would have exploded.All you can know when you start working on a startup is that it\nseems worth pursuing. You can't know whether it will turn into\na company worth billions or one that goes out of business. So when I\nsay I'm going to tell you how to start Google, I mean I'm going to\ntell you how to get to the point where you can start a company that\nhas as much chance of being Google as Google had of being Google.\n[1]How do you get from where you are now to the point where you can\nstart a successful startup? You need three things. You need to be\ngood at some kind of technology, you need an idea for what you're\ngoing to build, and you need cofounders to start the company with.How do you get good at technology? And how do you choose which\ntechnology to get good at? Both of those questions turn out to have\nthe same answer: work on your own projects. Don't try to guess\nwhether gene editing or LLMs or rockets will turn out to be the\nmost valuable technology to know about. No one can predict that.\nJust work on whatever interests you the most. You'll work much\nharder on something you're interested in than something you're doing\nbecause you think you're supposed to.If you're not sure what technology to get good at, get good at\nprogramming. That has been the source of the median startup for the\nlast 30 years, and this is probably not going to change in the next\n10.Those of you who are taking computer science classes in school may\nat this point be thinking, ok, we've got this sorted. We're already\nbeing taught all about programming. But sorry, this is not enough.\nYou have to be working on your own projects, not just learning stuff\nin classes. You can do well in computer science classes without\never really learning to program. In fact you can graduate with a\ndegree in computer science from a top university and still not be\nany good at programming. That's why tech companies all make you\ntake a coding test before they'll hire you, regardless of where you\nwent to university or how well you did there.",
        "start_char_idx": 0,
        "end_char_idx": 4104,
        "text_template": "{metadata_str}\n\n{content}",
        "metadata_template": "{key}: {value}",
        "metadata_seperator": "\n",
        "class_name": "TextNode"
      },
      "__type__": "1"
    },
    "d968bc65-d1e9-4f17-b2bf-58b97a150768": {
      "__data__": {
        "id_": "d968bc65-d1e9-4f17-b2bf-58b97a150768",
        "embedding": null,
        "metadata": {
          "source": "https://paulgraham.com/google.html",
          "title": "How to Start Google",
          "language": null
        },
        "excluded_embed_metadata_keys": [],
        "excluded_llm_metadata_keys": [],
        "relationships": {
          "1": {
            "node_id": "1493b302-b7ca-4fdb-ad36-39a0d5bff339",
            "node_type": "4",
            "metadata": {
              "source": "https://paulgraham.com/google.html",
              "title": "How to Start Google",
              "language": null
            },
            "hash": "a0e85b883fbf78e97c7b9c89708e327f7e204dbd1c9a3613a1281ac513d69960",
            "class_name": "RelatedNodeInfo"
          },
          "2": {
            "node_id": "ec2fae4c-76cf-4048-bf24-317cdae844e5",
            "node_type": "1",
            "metadata": {
              "source": "https://paulgraham.com/google.html",
              "title": "How to Start Google",
              "language": null
            },
            "hash": "98810c0cdd7cf026c2f565eb4c97520e282b98444ea2121b2713d7c556e7d219",
            "class_name": "RelatedNodeInfo"
          },
          "3": {
            "node_id": "0c34b50a-1403-478d-adb0-ed0017c39c4b",
            "node_type": "1",
            "metadata": {},
            "hash": "f36ad818e2cb5501fdec56ebe4c9308900b9aca757ad2966413f02542bbc6457",
            "class_name": "RelatedNodeInfo"
          }
        },
        "text": "That has been the source of the median startup for the\nlast 30 years, and this is probably not going to change in the next\n10.Those of you who are taking computer science classes in school may\nat this point be thinking, ok, we've got this sorted. We're already\nbeing taught all about programming. But sorry, this is not enough.\nYou have to be working on your own projects, not just learning stuff\nin classes. You can do well in computer science classes without\never really learning to program. In fact you can graduate with a\ndegree in computer science from a top university and still not be\nany good at programming. That's why tech companies all make you\ntake a coding test before they'll hire you, regardless of where you\nwent to university or how well you did there. They know grades and\nexam results prove nothing.If you really want to learn to program, you have to work on your\nown projects. You learn so much faster that way. Imagine you're\nwriting a game and there's something you want to do in it, and you\ndon't know how. You're going to figure out how a lot faster than\nyou'd learn anything in a class.You don't have to learn programming, though. If you're wondering\nwhat counts as technology, it includes practically everything you\ncould describe using the words \"make\" or \"build.\" So welding would\ncount, or making clothes, or making videos. Whatever you're most\ninterested in. The critical distinction is whether you're producing\nor just consuming. Are you writing computer games, or just playing\nthem? That's the cutoff.Steve Jobs, the founder of Apple, spent time when he was a teenager\nstudying calligraphy \u2014 the sort of beautiful writing that\nyou see in medieval manuscripts. No one, including him, thought\nthat this would help him in his career. He was just doing it because\nhe was interested in it. But it turned out to help him a lot. The\ncomputer that made Apple really big, the Macintosh, came out at\njust the moment when computers got powerful enough to make letters\nlike the ones in printed books instead of the computery-looking\nletters you see in 8 bit games. Apple destroyed everyone else at\nthis, and one reason was that Steve was one of the few people in\nthe computer business who really got graphic design.Don't feel like your projects have to be serious. They can\nbe as frivolous as you like, so long as you're building things\nyou're excited about. Probably 90% of programmers start out building\ngames. They and their friends like to play games. So they build\nthe kind of things they and their friends want. And that's exactly\nwhat you should be doing at 15 if you want to start a startup one\nday.You don't have to do just one project. In fact it's good to learn\nabout multiple things. Steve Jobs didn't just learn calligraphy.\nHe also learned about electronics, which was even more valuable.\nWhatever you're interested in. (Do you notice a theme here?)So that's the first of the three things you need, to get good at\nsome kind or kinds of technology. You do it the same way you get\ngood at the violin or football: practice. If you start a startup\nat 22, and you start writing your own programs now, then by the\ntime you start the company you'll have spent at least 7 years\npracticing writing code, and you can get pretty good at anything\nafter practicing it for 7 years.Let's suppose you're 22 and you've succeeded: You're now really\ngood at some technology. How do you get \nstartup ideas? It might\nseem like that's the hard part. Even if you are a good programmer,\nhow do you get the idea to start Google?Actually it's easy to get startup ideas once you're good at technology.\nOnce you're good at some technology, when you look at the world you\nsee dotted outlines around the things that are missing. You start\nto be able to see both the things that are missing from the technology\nitself, and all the broken things that could be fixed using it, and\neach one of these is a potential startup.In the town near our house there's a shop with a sign warning that\nthe door is hard to close. The sign has been there for several\nyears. To the people in the shop it must seem like this mysterious\nnatural phenomenon that the door sticks, and all they can do is put\nup a sign warning customers about it.",
        "start_char_idx": 3335,
        "end_char_idx": 7560,
        "text_template": "{metadata_str}\n\n{content}",
        "metadata_template": "{key}: {value}",
        "metadata_seperator": "\n",
        "class_name": "TextNode"
      },
      "__type__": "1"
    },
    "0c34b50a-1403-478d-adb0-ed0017c39c4b": {
      "__data__": {
        "id_": "0c34b50a-1403-478d-adb0-ed0017c39c4b",
        "embedding": null,
        "metadata": {
          "source": "https://paulgraham.com/google.html",
          "title": "How to Start Google",
          "language": null
        },
        "excluded_embed_metadata_keys": [],
        "excluded_llm_metadata_keys": [],
        "relationships": {
          "1": {
            "node_id": "1493b302-b7ca-4fdb-ad36-39a0d5bff339",
            "node_type": "4",
            "metadata": {
              "source": "https://paulgraham.com/google.html",
              "title": "How to Start Google",
              "language": null
            },
            "hash": "a0e85b883fbf78e97c7b9c89708e327f7e204dbd1c9a3613a1281ac513d69960",
            "class_name": "RelatedNodeInfo"
          },
          "2": {
            "node_id": "d968bc65-d1e9-4f17-b2bf-58b97a150768",
            "node_type": "1",
            "metadata": {
              "source": "https://paulgraham.com/google.html",
              "title": "How to Start Google",
              "language": null
            },
            "hash": "351233cc364e06d087888a25705e18dcdb1722d9f2b944e40ed2ac29992c4ddc",
            "class_name": "RelatedNodeInfo"
          },
          "3": {
            "node_id": "b505d39f-64c7-4903-acb9-b2e07355a70a",
            "node_type": "1",
            "metadata": {},
            "hash": "6db9a48e94502b1a56abb37f30b98140d8e34a4948ff97712b62b4d8b922adde",
            "class_name": "RelatedNodeInfo"
          }
        },
        "text": "How do you get \nstartup ideas? It might\nseem like that's the hard part. Even if you are a good programmer,\nhow do you get the idea to start Google?Actually it's easy to get startup ideas once you're good at technology.\nOnce you're good at some technology, when you look at the world you\nsee dotted outlines around the things that are missing. You start\nto be able to see both the things that are missing from the technology\nitself, and all the broken things that could be fixed using it, and\neach one of these is a potential startup.In the town near our house there's a shop with a sign warning that\nthe door is hard to close. The sign has been there for several\nyears. To the people in the shop it must seem like this mysterious\nnatural phenomenon that the door sticks, and all they can do is put\nup a sign warning customers about it. But any carpenter looking at\nthis situation would think \"why don't you just plane off the part\nthat sticks?\"Once you're good at programming, all the missing software in the\nworld starts to become as obvious as a sticking door to a carpenter.\nI'll give you a real world example. Back in the 20th century,\nAmerican universities used to publish printed directories with all\nthe students' names and contact info. When I tell you what these\ndirectories were called, you'll know which startup I'm talking\nabout. They were called facebooks, because they usually had a picture\nof each student next to their name.So Mark Zuckerberg shows up at Harvard in 2002, and the university\nstill hasn't gotten the facebook online. Each individual house has\nan online facebook, but there isn't one for the whole university.\nThe university administration has been diligently having meetings\nabout this, and will probably have solved the problem in another\ndecade or so. Most of the students don't consciously notice that\nanything is wrong. But Mark is a programmer. He looks at this\nsituation and thinks \"Well, this is stupid. I could write a program\nto fix this in one night. Just let people upload their own photos\nand then combine the data into a new site for the whole university.\"\nSo he does. And almost literally overnight he has thousands of\nusers.Of course Facebook was not a startup yet. It was just a... project.\nThere's that word again. Projects aren't just the best way to learn\nabout technology. They're also the best source of startup ideas.Facebook was not unusual in this respect. Apple and Google also\nbegan as projects. Apple wasn't meant to be a company. Steve Wozniak\njust wanted to build his own computer. It only turned into a company\nwhen Steve Jobs said \"Hey, I wonder if we could sell plans for this\ncomputer to other people.\" That's how Apple started. They weren't\neven selling computers, just plans for computers. Can you imagine\nhow lame this company seemed?Ditto for Google. Larry and Sergey weren't trying to start a company\nat first. They were just trying to make search better. Before Google,\nmost search engines didn't try to sort the results they gave you\nin order of importance. If you searched for \"rugby\" they just gave\nyou every web page that contained the word \"rugby.\" And the web was\nso small in 1997 that this actually worked! Kind of. There might\nonly be 20 or 30 pages with the word \"rugby,\" but the web was growing\nexponentially, which meant this way of doing search was becoming\nexponentially more broken. Most users just thought, \"Wow, I sure\nhave to look through a lot of search results to find what I want.\"\nDoor sticks. But like Mark, Larry and Sergey were programmers. Like\nMark, they looked at this situation and thought \"Well, this is\nstupid. Some pages about rugby matter more than others. Let's figure\nout which those are and show them first.\"It's obvious in retrospect that this was a great idea for a startup.\nIt wasn't obvious at the time. It's never obvious. If it was obviously\na good idea to start Apple or Google or Facebook, someone else would\nhave already done it. That's why the best startups grow out of\nprojects that aren't meant to be startups. You're not trying to\nstart a company. You're just following your instincts about what's\ninteresting.",
        "start_char_idx": 6725,
        "end_char_idx": 10853,
        "text_template": "{metadata_str}\n\n{content}",
        "metadata_template": "{key}: {value}",
        "metadata_seperator": "\n",
        "class_name": "TextNode"
      },
      "__type__": "1"
    },
    "b505d39f-64c7-4903-acb9-b2e07355a70a": {
      "__data__": {
        "id_": "b505d39f-64c7-4903-acb9-b2e07355a70a",
        "embedding": null,
        "metadata": {
          "source": "https://paulgraham.com/google.html",
          "title": "How to Start Google",
          "language": null
        },
        "excluded_embed_metadata_keys": [],
        "excluded_llm_metadata_keys": [],
        "relationships": {
          "1": {
            "node_id": "1493b302-b7ca-4fdb-ad36-39a0d5bff339",
            "node_type": "4",
            "metadata": {
              "source": "https://paulgraham.com/google.html",
              "title": "How to Start Google",
              "language": null
            },
            "hash": "a0e85b883fbf78e97c7b9c89708e327f7e204dbd1c9a3613a1281ac513d69960",
            "class_name": "RelatedNodeInfo"
          },
          "2": {
            "node_id": "0c34b50a-1403-478d-adb0-ed0017c39c4b",
            "node_type": "1",
            "metadata": {
              "source": "https://paulgraham.com/google.html",
              "title": "How to Start Google",
              "language": null
            },
            "hash": "4edc3ee9c253b0a7b09358383dfeb13396dd67c07a86e5f0a55f3d652b38f1ec",
            "class_name": "RelatedNodeInfo"
          },
          "3": {
            "node_id": "b71413ec-fbef-4c84-a34b-1b696ef91c5d",
            "node_type": "1",
            "metadata": {},
            "hash": "8c7273ea1317c2b8acc9b466bb4e6347d9e6839d450956a02b7b491af571150a",
            "class_name": "RelatedNodeInfo"
          }
        },
        "text": "Most users just thought, \"Wow, I sure\nhave to look through a lot of search results to find what I want.\"\nDoor sticks. But like Mark, Larry and Sergey were programmers. Like\nMark, they looked at this situation and thought \"Well, this is\nstupid. Some pages about rugby matter more than others. Let's figure\nout which those are and show them first.\"It's obvious in retrospect that this was a great idea for a startup.\nIt wasn't obvious at the time. It's never obvious. If it was obviously\na good idea to start Apple or Google or Facebook, someone else would\nhave already done it. That's why the best startups grow out of\nprojects that aren't meant to be startups. You're not trying to\nstart a company. You're just following your instincts about what's\ninteresting. And if you're young and good at technology, then your\nunconscious instincts about what's interesting are better than your\nconscious ideas about what would be a good company.So it's critical, if you're a young founder, to build things for\nyourself and your friends to use. The biggest mistake young founders\nmake is to build something for some mysterious group of other people.\nBut if you can make something that you and your friends truly want\nto use \u2014 something your friends aren't just using out of\nloyalty to you, but would be really sad to lose if you shut it down\n\u2014 then you almost certainly have the germ of a good startup\nidea. It may not seem like a startup to you. It may not be obvious\nhow to make money from it. But trust me, there's a way.What you need in a startup idea, and all you need, is something\nyour friends actually want. And those ideas aren't hard to see once\nyou're good at technology. There are sticking doors everywhere.\n[2]Now for the third and final thing you need: a cofounder, or cofounders.\nThe optimal startup has two or three founders, so you need one or\ntwo cofounders. How do you find them? Can you predict what I'm going\nto say next? It's the same thing: projects. You find cofounders by\nworking on projects with them. What you need in a cofounder is\nsomeone who's good at what they do and that you work well with, and\nthe only way to judge this is to work with them on things.At this point I'm going to tell you something you might not want\nto hear. It really matters to do well in your classes, even the\nones that are just memorization or blathering about literature,\nbecause you need to do well in your classes to get into a good\nuniversity. And if you want to start a startup you should try to\nget into the best university you can, because that's where the best\ncofounders are. It's also where the best employees are. When Larry\nand Sergey started Google, they began by just hiring all the smartest\npeople they knew out of Stanford, and this was a real advantage for\nthem.The empirical evidence is clear on this. If you look at where the\nlargest numbers of successful startups come from, it's pretty much\nthe same as the list of the most selective universities.I don't think it's the prestigious names of these universities that\ncause more good startups to come out of them. Nor do I think it's\nbecause the quality of the teaching is better. What's driving this\nis simply the difficulty of getting in. You have to be pretty smart\nand determined to get into MIT or Cambridge, so if you do manage\nto get in, you'll find the other students include a lot of smart\nand determined people.\n[3]You don't have to start a startup with someone you meet at university.\nThe founders of Twitch met when they were seven. The founders of\nStripe, Patrick and John Collison, met when John was born. But\nuniversities are the main source of cofounders. And because they're\nwhere the cofounders are, they're also where the ideas are, because\nthe best ideas grow out of projects you do with the people who\nbecome your cofounders.So the list of what you need to do to get from here to starting a\nstartup is quite short. You need to get good at technology, and the\nway to do that is to work on your own projects.",
        "start_char_idx": 10092,
        "end_char_idx": 14082,
        "text_template": "{metadata_str}\n\n{content}",
        "metadata_template": "{key}: {value}",
        "metadata_seperator": "\n",
        "class_name": "TextNode"
      },
      "__type__": "1"
    },
    "b71413ec-fbef-4c84-a34b-1b696ef91c5d": {
      "__data__": {
        "id_": "b71413ec-fbef-4c84-a34b-1b696ef91c5d",
        "embedding": null,
        "metadata": {
          "source": "https://paulgraham.com/google.html",
          "title": "How to Start Google",
          "language": null
        },
        "excluded_embed_metadata_keys": [],
        "excluded_llm_metadata_keys": [],
        "relationships": {
          "1": {
            "node_id": "1493b302-b7ca-4fdb-ad36-39a0d5bff339",
            "node_type": "4",
            "metadata": {
              "source": "https://paulgraham.com/google.html",
              "title": "How to Start Google",
              "language": null
            },
            "hash": "a0e85b883fbf78e97c7b9c89708e327f7e204dbd1c9a3613a1281ac513d69960",
            "class_name": "RelatedNodeInfo"
          },
          "2": {
            "node_id": "b505d39f-64c7-4903-acb9-b2e07355a70a",
            "node_type": "1",
            "metadata": {
              "source": "https://paulgraham.com/google.html",
              "title": "How to Start Google",
              "language": null
            },
            "hash": "7aada9d7ed36503f3a53552b5d794d861e1bd8962a54f6a2907c3eadd5e67205",
            "class_name": "RelatedNodeInfo"
          },
          "3": {
            "node_id": "40552d33-514b-4661-a123-f6fd045f4d26",
            "node_type": "1",
            "metadata": {},
            "hash": "b41b3d36e3a92c39a1f1befff750fd658aadc4588d52ef59c4e89936a01413ce",
            "class_name": "RelatedNodeInfo"
          }
        },
        "text": "You have to be pretty smart\nand determined to get into MIT or Cambridge, so if you do manage\nto get in, you'll find the other students include a lot of smart\nand determined people.\n[3]You don't have to start a startup with someone you meet at university.\nThe founders of Twitch met when they were seven. The founders of\nStripe, Patrick and John Collison, met when John was born. But\nuniversities are the main source of cofounders. And because they're\nwhere the cofounders are, they're also where the ideas are, because\nthe best ideas grow out of projects you do with the people who\nbecome your cofounders.So the list of what you need to do to get from here to starting a\nstartup is quite short. You need to get good at technology, and the\nway to do that is to work on your own projects. And you need to do\nas well in school as you can, so you can get into a good university,\nbecause that's where the cofounders and the ideas are.That's it, just two things, build stuff and do well in school.Notes[1]\nThe rhetorical trick in this sentence is that the \"Google\"s\nrefer to different things. What I mean is: a company that has as\nmuch chance of growing as big as Google ultimately did as Larry and\nSergey could have reasonably expected Google itself would at the\ntime they started it. But I think the original version is zippier.[2]\nMaking something for your friends isn't the only source of\nstartup ideas. It's just the best source for young founders, who\nhave the least knowledge of what other people want, and whose own\nwants are most predictive of future demand.[3]\nStrangely enough this is particularly true in countries like\nthe US where undergraduate admissions are done badly. US admissions\ndepartments make applicants jump through a lot of arbitrary hoops\nthat have little to do with their intellectual ability. But the\nmore arbitrary a test, the more it becomes a test of mere determination\nand resourcefulness. And those are the two most important qualities\nin startup founders. So US admissions departments are better at\nselecting founders than they would be if they were better at selecting\nstudents.Thanks to Jared Friedman, Carolynn Levy, Jessica Livingston, Harj Taggar, and Garry Tan for reading drafts of this.",
        "start_char_idx": 13296,
        "end_char_idx": 15519,
        "text_template": "{metadata_str}\n\n{content}",
        "metadata_template": "{key}: {value}",
        "metadata_seperator": "\n",
        "class_name": "TextNode"
      },
      "__type__": "1"
    },
    "40552d33-514b-4661-a123-f6fd045f4d26": {
      "__data__": {
        "id_": "40552d33-514b-4661-a123-f6fd045f4d26",
        "embedding": null,
        "metadata": {
          "source": "https://paulgraham.com/startupideas.html",
          "title": "How to Get Startup Ideas",
          "language": null
        },
        "excluded_embed_metadata_keys": [],
        "excluded_llm_metadata_keys": [],
        "relationships": {
          "1": {
            "node_id": "24ef60e9-a5fe-4906-b98d-9620e68c7ea4",
            "node_type": "4",
            "metadata": {
              "source": "https://paulgraham.com/startupideas.html",
              "title": "How to Get Startup Ideas",
              "language": null
            },
            "hash": "a6c920acd415f8b0d407151a9884f4da76e3ef6eb45c55fd5b28874684ab194c",
            "class_name": "RelatedNodeInfo"
          },
          "2": {
            "node_id": "b71413ec-fbef-4c84-a34b-1b696ef91c5d",
            "node_type": "1",
            "metadata": {
              "source": "https://paulgraham.com/google.html",
              "title": "How to Start Google",
              "language": null
            },
            "hash": "d4406cf94c326acca19daa20459fa9e7f7571411d45c8d3f23d8252821de2fce",
            "class_name": "RelatedNodeInfo"
          },
          "3": {
            "node_id": "4484e424-16e4-4fa7-b169-994a23ae6d65",
            "node_type": "1",
            "metadata": {},
            "hash": "df0085cf38e2b7a9840b3f1d64d4f248ffeff4fd5d655b7e09c4a958f01d687a",
            "class_name": "RelatedNodeInfo"
          }
        },
        "text": "How to Get Startup Ideas\n\n\n\nWant to start a startup?  Get funded by\nY Combinator.\n\n\n\n\nNovember 2012The way to get startup ideas is not to try to think of startup\nideas.  It's to look for problems, preferably problems you have\nyourself.The very best startup ideas tend to have three things in common:\nthey're something the founders themselves want, that they themselves\ncan build, and that few others realize are worth doing.  Microsoft,\nApple, Yahoo, Google, and Facebook all began this way.\nProblemsWhy is it so important to work on a problem you have?  Among other\nthings, it ensures the problem really exists.  It sounds obvious\nto say you should only work on problems that exist.  And yet by far\nthe most common mistake startups make is to solve problems no one\nhas.I made it myself.  In 1995 I started a company to put art galleries\nonline.  But galleries didn't want to be online.  It's not how the\nart business works.  So why did I spend 6 months working on this\nstupid idea?  Because I didn't pay attention to users.  I invented\na model of the world that didn't correspond to reality, and worked\nfrom that.  I didn't notice my model was wrong until I tried\nto convince users to pay for what we'd built.  Even then I took\nembarrassingly long to catch on.  I was attached to my model of the\nworld, and I'd spent a lot of time on the software.  They had to\nwant it!Why do so many founders build things no one wants?  Because they\nbegin by trying to think of startup ideas.  That m.o. is doubly\ndangerous: it doesn't merely yield few good ideas; it yields bad\nideas that sound plausible enough to fool you into working on them.At YC we call these \"made-up\" or \"sitcom\" startup ideas.  Imagine\none of the characters on a TV show was starting a startup.  The\nwriters would have to invent something for it to do.  But coming\nup with good startup ideas is hard.  It's not something you can do\nfor the asking.  So (unless they got amazingly lucky) the writers\nwould come up with an idea that sounded plausible, but was actually\nbad.For example, a social network for pet owners.  It doesn't sound\nobviously mistaken.  Millions of people have pets.  Often they care\na lot about their pets and spend a lot of money on them.  Surely\nmany of these people would like a site where they could talk to\nother pet owners.  Not all of them perhaps, but if just 2 or 3\npercent were regular visitors, you could have millions of users.\nYou could serve them targeted offers, and maybe charge for premium\nfeatures. \n[1]The danger of an idea like this is that when you run it by your\nfriends with pets, they don't say \"I would never use this.\" They\nsay \"Yeah, maybe I could see using something like that.\" Even when\nthe startup launches, it will sound plausible to a lot of people.\nThey don't want to use it themselves, at least not right now, but\nthey could imagine other people wanting it.  Sum that reaction\nacross the entire population, and you have zero users. \n[2]\nWellWhen a startup launches, there have to be at least some users who\nreally need what they're making \u2014 not just people who could see\nthemselves using it one day, but who want it urgently.  Usually\nthis initial group of users is small, for the simple reason that\nif there were something that large numbers of people urgently needed\nand that could be built with the amount of effort a startup usually\nputs into a version one, it would probably already exist.  Which\nmeans you have to compromise on one dimension: you can either build\nsomething a large number of people want a small amount, or something\na small number of people want a large amount.  Choose the latter.\nNot all ideas of that type are good startup ideas, but nearly all\ngood startup ideas are of that type.Imagine a graph whose x axis represents all the people who might\nwant what you're making and whose y axis represents how much they\nwant it.  If you invert the scale on the y axis, you can envision\ncompanies as holes.  Google is an immense crater: hundreds of\nmillions of people use it, and they need it a lot.  A startup just\nstarting out can't expect to excavate that much volume.",
        "start_char_idx": 0,
        "end_char_idx": 4103,
        "text_template": "{metadata_str}\n\n{content}",
        "metadata_template": "{key}: {value}",
        "metadata_seperator": "\n",
        "class_name": "TextNode"
      },
      "__type__": "1"
    },
    "4484e424-16e4-4fa7-b169-994a23ae6d65": {
      "__data__": {
        "id_": "4484e424-16e4-4fa7-b169-994a23ae6d65",
        "embedding": null,
        "metadata": {
          "source": "https://paulgraham.com/startupideas.html",
          "title": "How to Get Startup Ideas",
          "language": null
        },
        "excluded_embed_metadata_keys": [],
        "excluded_llm_metadata_keys": [],
        "relationships": {
          "1": {
            "node_id": "24ef60e9-a5fe-4906-b98d-9620e68c7ea4",
            "node_type": "4",
            "metadata": {
              "source": "https://paulgraham.com/startupideas.html",
              "title": "How to Get Startup Ideas",
              "language": null
            },
            "hash": "a6c920acd415f8b0d407151a9884f4da76e3ef6eb45c55fd5b28874684ab194c",
            "class_name": "RelatedNodeInfo"
          },
          "2": {
            "node_id": "40552d33-514b-4661-a123-f6fd045f4d26",
            "node_type": "1",
            "metadata": {
              "source": "https://paulgraham.com/startupideas.html",
              "title": "How to Get Startup Ideas",
              "language": null
            },
            "hash": "63edd6a28eacda7b353c06e74e697bc33ccb06cfd2eb2b4413523900253299f0",
            "class_name": "RelatedNodeInfo"
          },
          "3": {
            "node_id": "a2c42716-321f-4c84-87dd-19c89c083703",
            "node_type": "1",
            "metadata": {},
            "hash": "6f900622da6a7b004a6116aba74db9ea883c45fc94581853634f2b862c2babff",
            "class_name": "RelatedNodeInfo"
          }
        },
        "text": "Which\nmeans you have to compromise on one dimension: you can either build\nsomething a large number of people want a small amount, or something\na small number of people want a large amount.  Choose the latter.\nNot all ideas of that type are good startup ideas, but nearly all\ngood startup ideas are of that type.Imagine a graph whose x axis represents all the people who might\nwant what you're making and whose y axis represents how much they\nwant it.  If you invert the scale on the y axis, you can envision\ncompanies as holes.  Google is an immense crater: hundreds of\nmillions of people use it, and they need it a lot.  A startup just\nstarting out can't expect to excavate that much volume.  So you\nhave two choices about the shape of hole you start with.  You can\neither dig a hole that's broad but shallow, or one that's narrow\nand deep, like a well.Made-up startup ideas are usually of the first type.  Lots of people\nare mildly interested in a social network for pet owners.Nearly all good startup ideas are of the second type.  Microsoft\nwas a well when they made Altair Basic.  There were only a couple\nthousand Altair owners, but without this software they were programming\nin machine language.  Thirty years later Facebook had the same\nshape.  Their first site was exclusively for Harvard students, of\nwhich there are only a few thousand, but those few thousand users\nwanted it a lot.When you have an idea for a startup, ask yourself: who wants this\nright now?  Who wants this so much that they'll use it even when\nit's a crappy version one made by a two-person startup they've never\nheard of?  If you can't answer that, the idea is probably bad. \n[3]You don't need the narrowness of the well per se.  It's depth you\nneed; you get narrowness as a byproduct of optimizing for depth\n(and speed).  But you almost always do get it.  In practice the\nlink between depth and narrowness is so strong that it's a good\nsign when you know that an idea will appeal strongly to a specific\ngroup or type of user.But while demand shaped like a well is almost a necessary condition\nfor a good startup idea, it's not a sufficient one.  If Mark\nZuckerberg had built something that could only ever have appealed\nto Harvard students, it would not have been a good startup idea.\nFacebook was a good idea because it started with a small market\nthere was a fast path out of.  Colleges are similar enough that if\nyou build a facebook that works at Harvard, it will work at any\ncollege. So you spread rapidly through all the colleges.  Once you\nhave all the college students, you get everyone else simply by\nletting them in.Similarly for Microsoft: Basic for the Altair; Basic for other\nmachines; other languages besides Basic; operating systems;\napplications; IPO.\nSelfHow do you tell whether there's a path out of an idea?  How do you\ntell whether something is the germ of a giant company, or just a\nniche product?  Often you can't. The founders of Airbnb didn't\nrealize at first how big a market they were tapping.  Initially\nthey had a much narrower idea.  They were going to let hosts rent\nout space on their floors during conventions.  They didn't foresee\nthe expansion of this idea; it forced itself upon them gradually.\nAll they knew at first is that they were onto something.  That's\nprobably as much as Bill Gates or Mark Zuckerberg knew at first.Occasionally it's obvious from the beginning when there's a path\nout of the initial niche.  And sometimes I can see a path that's\nnot immediately obvious; that's one of our specialties at YC.  But\nthere are limits to how well this can be done, no matter how much\nexperience you have.  The most important thing to understand about\npaths out of the initial idea is the meta-fact that these are hard\nto see.So if you can't predict whether there's a path out of an idea, how\ndo you choose between ideas?  The truth is disappointing but\ninteresting: if you're the right sort of person, you have the right\nsort of hunches.  If you're at the leading edge of a field that's\nchanging fast, when you have a hunch that something is worth doing,\nyou're more likely to be right.In Zen and the Art of Motorcycle Maintenance, Robert Pirsig says:\n\n  You want to know how to paint a perfect painting? It's easy.",
        "start_char_idx": 3411,
        "end_char_idx": 7647,
        "text_template": "{metadata_str}\n\n{content}",
        "metadata_template": "{key}: {value}",
        "metadata_seperator": "\n",
        "class_name": "TextNode"
      },
      "__type__": "1"
    },
    "a2c42716-321f-4c84-87dd-19c89c083703": {
      "__data__": {
        "id_": "a2c42716-321f-4c84-87dd-19c89c083703",
        "embedding": null,
        "metadata": {
          "source": "https://paulgraham.com/startupideas.html",
          "title": "How to Get Startup Ideas",
          "language": null
        },
        "excluded_embed_metadata_keys": [],
        "excluded_llm_metadata_keys": [],
        "relationships": {
          "1": {
            "node_id": "24ef60e9-a5fe-4906-b98d-9620e68c7ea4",
            "node_type": "4",
            "metadata": {
              "source": "https://paulgraham.com/startupideas.html",
              "title": "How to Get Startup Ideas",
              "language": null
            },
            "hash": "a6c920acd415f8b0d407151a9884f4da76e3ef6eb45c55fd5b28874684ab194c",
            "class_name": "RelatedNodeInfo"
          },
          "2": {
            "node_id": "4484e424-16e4-4fa7-b169-994a23ae6d65",
            "node_type": "1",
            "metadata": {
              "source": "https://paulgraham.com/startupideas.html",
              "title": "How to Get Startup Ideas",
              "language": null
            },
            "hash": "ca33a44b2405b383b2351764b15d368df7004f1fb6b2ce71ef24d7c74b2f8d46",
            "class_name": "RelatedNodeInfo"
          },
          "3": {
            "node_id": "5a7596ba-6a4a-46e7-ab1c-5e0e2f963249",
            "node_type": "1",
            "metadata": {},
            "hash": "8347fe9d326019d6c4b3e1dfcc4fcbab3ec219a081d2cbf681ed8f87b6778439",
            "class_name": "RelatedNodeInfo"
          }
        },
        "text": "And sometimes I can see a path that's\nnot immediately obvious; that's one of our specialties at YC.  But\nthere are limits to how well this can be done, no matter how much\nexperience you have.  The most important thing to understand about\npaths out of the initial idea is the meta-fact that these are hard\nto see.So if you can't predict whether there's a path out of an idea, how\ndo you choose between ideas?  The truth is disappointing but\ninteresting: if you're the right sort of person, you have the right\nsort of hunches.  If you're at the leading edge of a field that's\nchanging fast, when you have a hunch that something is worth doing,\nyou're more likely to be right.In Zen and the Art of Motorcycle Maintenance, Robert Pirsig says:\n\n  You want to know how to paint a perfect painting? It's easy.  Make\n  yourself perfect and then just paint naturally.\n\nI've wondered about that passage since I read it in high school.\nI'm not sure how useful his advice is for painting specifically,\nbut it fits this situation well.  Empirically, the way to have good\nstartup ideas is to become the sort of person who has them.Being at the leading edge of a field doesn't mean you have to be\none of the people pushing it forward.  You can also be at the leading\nedge as a user.  It was not so much because he was a programmer\nthat Facebook seemed a good idea to Mark Zuckerberg as because he\nused computers so much.  If you'd asked most 40 year olds in 2004\nwhether they'd like to publish their lives semi-publicly on the\nInternet, they'd have been horrified at the idea.  But Mark already\nlived online; to him it seemed natural.Paul Buchheit says that people at the leading edge of a rapidly\nchanging field \"live in the future.\"  Combine that with Pirsig and\nyou get:\n\n  Live in the future, then build what's missing.\n\nThat describes the way many if not most of the biggest startups got\nstarted.  Neither Apple nor Yahoo nor Google nor Facebook were even\nsupposed to be companies at first.  They grew out of things their\nfounders built because there seemed a gap in the world.If you look at the way successful founders have had their ideas,\nit's generally the result of some external stimulus hitting a\nprepared mind.  Bill Gates and Paul Allen hear about the Altair and\nthink \"I bet we could write a Basic interpreter for it.\" Drew Houston\nrealizes he's forgotten his USB stick and thinks \"I really need to\nmake my files live online.\" Lots of people heard about the Altair.\nLots forgot USB sticks.  The reason those stimuli caused those\nfounders to start companies was that their experiences had prepared\nthem to notice the opportunities they represented.The verb you want to be using with respect to startup ideas is not\n\"think up\" but \"notice.\" At YC we call ideas that grow naturally\nout of the founders' own experiences \"organic\" startup ideas.  The\nmost successful startups almost all begin this way.That may not have been what you wanted to hear.  You may have\nexpected recipes for coming up with startup ideas, and instead I'm\ntelling you that the key is to have a mind that's prepared in the\nright way.  But disappointing though it may be, this is the truth.\nAnd it is a recipe of a sort, just one that in the worst case takes\na year rather than a weekend.If you're not at the leading edge of some rapidly changing field,\nyou can get to one.  For example, anyone reasonably smart can\nprobably get to an edge of programming (e.g. building mobile apps)\nin a year.  Since a successful startup will consume at least 3-5\nyears of your life, a year's preparation would be a reasonable\ninvestment.  Especially if you're also looking for a cofounder.\n[4]You don't have to learn programming to be at the leading edge of a\ndomain that's changing fast.  Other domains change fast.  But while\nlearning to hack is not necessary, it is for the forseeable future\nsufficient. As Marc Andreessen put it, software is eating the world,\nand this trend has decades left to run.Knowing how to hack also means that when you have ideas, you'll be\nable to implement them.  That's not absolutely necessary (Jeff Bezos\ncouldn't) but it's an advantage.",
        "start_char_idx": 6845,
        "end_char_idx": 10969,
        "text_template": "{metadata_str}\n\n{content}",
        "metadata_template": "{key}: {value}",
        "metadata_seperator": "\n",
        "class_name": "TextNode"
      },
      "__type__": "1"
    },
    "5a7596ba-6a4a-46e7-ab1c-5e0e2f963249": {
      "__data__": {
        "id_": "5a7596ba-6a4a-46e7-ab1c-5e0e2f963249",
        "embedding": null,
        "metadata": {
          "source": "https://paulgraham.com/startupideas.html",
          "title": "How to Get Startup Ideas",
          "language": null
        },
        "excluded_embed_metadata_keys": [],
        "excluded_llm_metadata_keys": [],
        "relationships": {
          "1": {
            "node_id": "24ef60e9-a5fe-4906-b98d-9620e68c7ea4",
            "node_type": "4",
            "metadata": {
              "source": "https://paulgraham.com/startupideas.html",
              "title": "How to Get Startup Ideas",
              "language": null
            },
            "hash": "a6c920acd415f8b0d407151a9884f4da76e3ef6eb45c55fd5b28874684ab194c",
            "class_name": "RelatedNodeInfo"
          },
          "2": {
            "node_id": "a2c42716-321f-4c84-87dd-19c89c083703",
            "node_type": "1",
            "metadata": {
              "source": "https://paulgraham.com/startupideas.html",
              "title": "How to Get Startup Ideas",
              "language": null
            },
            "hash": "d8289392c3c06976bcc05c151f5e690f4d26cefb1be10aeb84354ee3e99e1fac",
            "class_name": "RelatedNodeInfo"
          },
          "3": {
            "node_id": "ae746f1f-317d-424a-92a4-598c1de17f3c",
            "node_type": "1",
            "metadata": {},
            "hash": "7573d83699b7659183b7bee425743ec24ebb3c3d242b89514a8029e96cfec99b",
            "class_name": "RelatedNodeInfo"
          }
        },
        "text": "For example, anyone reasonably smart can\nprobably get to an edge of programming (e.g. building mobile apps)\nin a year.  Since a successful startup will consume at least 3-5\nyears of your life, a year's preparation would be a reasonable\ninvestment.  Especially if you're also looking for a cofounder.\n[4]You don't have to learn programming to be at the leading edge of a\ndomain that's changing fast.  Other domains change fast.  But while\nlearning to hack is not necessary, it is for the forseeable future\nsufficient. As Marc Andreessen put it, software is eating the world,\nand this trend has decades left to run.Knowing how to hack also means that when you have ideas, you'll be\nable to implement them.  That's not absolutely necessary (Jeff Bezos\ncouldn't) but it's an advantage.  It's a big advantage, when you're\nconsidering an idea like putting a college facebook online, if\ninstead of merely thinking \"That's an interesting idea,\" you can\nthink instead \"That's an interesting idea.  I'll try building an\ninitial version tonight.\"  It's even better when you're both a\nprogrammer and the target user, because then the cycle of generating\nnew versions and testing them on users can happen inside one head.\nNoticingOnce you're living in the future in some respect, the way to notice\nstartup ideas is to look for things that seem to be missing.  If\nyou're really at the leading edge of a rapidly changing field, there\nwill be things that are obviously missing.  What won't be obvious\nis that they're startup ideas.  So if you want to find startup\nideas, don't merely turn on the filter \"What's missing?\" Also turn\noff every other filter, particularly \"Could this be a big company?\"\nThere's plenty of time to apply that test later.  But if you're\nthinking about that initially, it may not only filter out lots\nof good ideas, but also cause you to focus on bad ones.Most things that are missing will take some time to see.  You almost\nhave to trick yourself into seeing the ideas around you.But you know the ideas are out there.  This is not one of those\nproblems where there might not be an answer.  It's impossibly\nunlikely that this is the exact moment when technological progress\nstops.  You can be sure people are going to build things in the\nnext few years that will make you think \"What did I do before x?\"And when these problems get solved, they will probably seem flamingly\nobvious in retrospect.  What you need to do is turn off the filters\nthat usually prevent you from seeing them.  The most powerful is\nsimply taking the current state of the world for granted.  Even the\nmost radically open-minded of us mostly do that.  You couldn't get\nfrom your bed to the front door if you stopped to question everything.But if you're looking for startup ideas you can sacrifice some of\nthe efficiency of taking the status quo for granted and start to\nquestion things.  Why is your inbox overflowing?  Because you get\na lot of email, or because it's hard to get email out of your inbox?\nWhy do you get so much email?  What problems are people trying to\nsolve by sending you email?  Are there better ways to solve them?\nAnd why is it hard to get emails out of your inbox?  Why do you\nkeep emails around after you've read them?  Is an inbox the optimal\ntool for that?Pay particular attention to things that chafe you.  The advantage\nof taking the status quo for granted is not just that it makes life\n(locally) more efficient, but also that it makes life more tolerable.\nIf you knew about all the things we'll get in the next 50 years but\ndon't have yet, you'd find present day life pretty constraining,\njust as someone from the present would if they were sent back 50\nyears in a time machine.  When something annoys you, it could be\nbecause you're living in the future.When you find the right sort of problem, you should probably be\nable to describe it as obvious, at least to you.  When we started\nViaweb, all the online stores were built by hand, by web designers\nmaking individual HTML pages.  It was obvious to us as programmers\nthat these sites would have to be generated by software.\n[5]Which means, strangely enough, that coming up with startup ideas\nis a question of seeing the obvious.",
        "start_char_idx": 10188,
        "end_char_idx": 14380,
        "text_template": "{metadata_str}\n\n{content}",
        "metadata_template": "{key}: {value}",
        "metadata_seperator": "\n",
        "class_name": "TextNode"
      },
      "__type__": "1"
    },
    "ae746f1f-317d-424a-92a4-598c1de17f3c": {
      "__data__": {
        "id_": "ae746f1f-317d-424a-92a4-598c1de17f3c",
        "embedding": null,
        "metadata": {
          "source": "https://paulgraham.com/startupideas.html",
          "title": "How to Get Startup Ideas",
          "language": null
        },
        "excluded_embed_metadata_keys": [],
        "excluded_llm_metadata_keys": [],
        "relationships": {
          "1": {
            "node_id": "24ef60e9-a5fe-4906-b98d-9620e68c7ea4",
            "node_type": "4",
            "metadata": {
              "source": "https://paulgraham.com/startupideas.html",
              "title": "How to Get Startup Ideas",
              "language": null
            },
            "hash": "a6c920acd415f8b0d407151a9884f4da76e3ef6eb45c55fd5b28874684ab194c",
            "class_name": "RelatedNodeInfo"
          },
          "2": {
            "node_id": "5a7596ba-6a4a-46e7-ab1c-5e0e2f963249",
            "node_type": "1",
            "metadata": {
              "source": "https://paulgraham.com/startupideas.html",
              "title": "How to Get Startup Ideas",
              "language": null
            },
            "hash": "27fa7eb40d685964d0671b3aa64a400fb4c57c468f62969d2feb175b014f6a38",
            "class_name": "RelatedNodeInfo"
          },
          "3": {
            "node_id": "45a9f428-c0b6-4b03-870b-d72e209dd4c4",
            "node_type": "1",
            "metadata": {},
            "hash": "0cceda678a630e991f95a04b1b380009d6e7f2032431fd8f01d72fe0db81fe17",
            "class_name": "RelatedNodeInfo"
          }
        },
        "text": "If you knew about all the things we'll get in the next 50 years but\ndon't have yet, you'd find present day life pretty constraining,\njust as someone from the present would if they were sent back 50\nyears in a time machine.  When something annoys you, it could be\nbecause you're living in the future.When you find the right sort of problem, you should probably be\nable to describe it as obvious, at least to you.  When we started\nViaweb, all the online stores were built by hand, by web designers\nmaking individual HTML pages.  It was obvious to us as programmers\nthat these sites would have to be generated by software.\n[5]Which means, strangely enough, that coming up with startup ideas\nis a question of seeing the obvious.  That suggests how weird this\nprocess is: you're trying to see things that are obvious, and yet\nthat you hadn't seen.Since what you need to do here is loosen up your own mind, it may\nbe best not to make too much of a direct frontal attack on the\nproblem \u2014 i.e. to sit down and try to think of ideas.  The best\nplan may be just to keep a background process running, looking for\nthings that seem to be missing.  Work on hard problems, driven\nmainly by curiosity, but have a second self watching over your\nshoulder, taking note of gaps and anomalies.  \n[6]Give yourself some time.  You have a lot of control over the rate\nat which you turn yours into a prepared mind, but you have less\ncontrol over the stimuli that spark ideas when they hit it.  If\nBill Gates and Paul Allen had constrained themselves to come up\nwith a startup idea in one month, what if they'd chosen a month\nbefore the Altair appeared?  They probably would have worked on a\nless promising idea.  Drew Houston did work on a less promising\nidea before Dropbox: an SAT prep startup.  But Dropbox was a much\nbetter idea, both in the absolute sense and also as a match for his\nskills.\n[7]A good way to trick yourself into noticing ideas is to work on\nprojects that seem like they'd be cool.  If you do that, you'll\nnaturally tend to build things that are missing.  It wouldn't seem\nas interesting to build something that already existed.Just as trying to think up startup ideas tends to produce bad ones,\nworking on things that could be dismissed as \"toys\" often produces\ngood ones.  When something is described as a toy, that means it has\neverything an idea needs except being important.  It's cool; users\nlove it; it just doesn't matter.  But if you're living in the future\nand you build something cool that users love, it may matter more\nthan outsiders think.  Microcomputers seemed like toys when Apple\nand Microsoft started working on them.  I'm old enough to remember\nthat era; the usual term for people with their own microcomputers\nwas \"hobbyists.\"  BackRub seemed like an inconsequential science\nproject.  The Facebook was just a way for undergrads to stalk one\nanother.At YC we're excited when we meet startups working on things that\nwe could imagine know-it-alls on forums dismissing as toys.  To us\nthat's positive evidence an idea is good.If you can afford to take a long view (and arguably you can't afford\nnot to), you can turn \"Live in the future and build what's missing\"\ninto something even better:\n\n  Live in the future and build what seems interesting.\n\nSchoolThat's what I'd advise college students to do, rather than trying\nto learn about \"entrepreneurship.\"  \"Entrepreneurship\" is something\nyou learn best by doing it.  The examples of the most successful\nfounders make that clear.  What you should be spending your time\non in college is ratcheting yourself into the future.  College is\nan incomparable opportunity to do that.  What a waste to sacrifice\nan opportunity to solve the hard part of starting a startup \u2014 becoming \nthe sort of person who can have organic startup ideas \u2014 by \nspending time learning about the easy part.  Especially since\nyou won't even really learn about it, any more than you'd learn\nabout sex in a class.  All you'll learn is the words for things.The clash of domains is a particularly fruitful source of ideas.\nIf you know a lot about programming and you start learning about\nsome other field, you'll probably see problems that software could\nsolve.",
        "start_char_idx": 13656,
        "end_char_idx": 17845,
        "text_template": "{metadata_str}\n\n{content}",
        "metadata_template": "{key}: {value}",
        "metadata_seperator": "\n",
        "class_name": "TextNode"
      },
      "__type__": "1"
    },
    "45a9f428-c0b6-4b03-870b-d72e209dd4c4": {
      "__data__": {
        "id_": "45a9f428-c0b6-4b03-870b-d72e209dd4c4",
        "embedding": null,
        "metadata": {
          "source": "https://paulgraham.com/startupideas.html",
          "title": "How to Get Startup Ideas",
          "language": null
        },
        "excluded_embed_metadata_keys": [],
        "excluded_llm_metadata_keys": [],
        "relationships": {
          "1": {
            "node_id": "24ef60e9-a5fe-4906-b98d-9620e68c7ea4",
            "node_type": "4",
            "metadata": {
              "source": "https://paulgraham.com/startupideas.html",
              "title": "How to Get Startup Ideas",
              "language": null
            },
            "hash": "a6c920acd415f8b0d407151a9884f4da76e3ef6eb45c55fd5b28874684ab194c",
            "class_name": "RelatedNodeInfo"
          },
          "2": {
            "node_id": "ae746f1f-317d-424a-92a4-598c1de17f3c",
            "node_type": "1",
            "metadata": {
              "source": "https://paulgraham.com/startupideas.html",
              "title": "How to Get Startup Ideas",
              "language": null
            },
            "hash": "86fe06420e9a594b3e4dde3316220094b168d6fc4ad9da9d07eb05d3983c6288",
            "class_name": "RelatedNodeInfo"
          },
          "3": {
            "node_id": "5a840a70-1afe-4617-afd2-870c6c3a0b00",
            "node_type": "1",
            "metadata": {},
            "hash": "0db51c3c333034509bc0637ac5015f673b49c4c9895810cc5b073304c86ae85d",
            "class_name": "RelatedNodeInfo"
          }
        },
        "text": "\"Entrepreneurship\" is something\nyou learn best by doing it.  The examples of the most successful\nfounders make that clear.  What you should be spending your time\non in college is ratcheting yourself into the future.  College is\nan incomparable opportunity to do that.  What a waste to sacrifice\nan opportunity to solve the hard part of starting a startup \u2014 becoming \nthe sort of person who can have organic startup ideas \u2014 by \nspending time learning about the easy part.  Especially since\nyou won't even really learn about it, any more than you'd learn\nabout sex in a class.  All you'll learn is the words for things.The clash of domains is a particularly fruitful source of ideas.\nIf you know a lot about programming and you start learning about\nsome other field, you'll probably see problems that software could\nsolve.  In fact, you're doubly likely to find good problems in\nanother domain: (a) the inhabitants of that domain are not as likely\nas software people to have already solved their problems with\nsoftware, and (b) since you come into the new domain totally ignorant,\nyou don't even know what the status quo is to take it for granted.So if you're a CS major and you want to start a startup, instead\nof taking a class on entrepreneurship you're better off taking a\nclass on, say, genetics.  Or better still, go work for a biotech\ncompany.  CS majors normally get summer jobs at computer hardware\nor software companies.  But if you want to find startup ideas, you\nmight do better to get a summer job in some unrelated field. \n[8]Or don't take any extra classes, and just build things.  It's no\ncoincidence that Microsoft and Facebook both got started in January.\nAt Harvard that is (or was) Reading Period, when students have no\nclasses to attend because they're supposed to be studying for finals.\n[9]But don't feel like you have to build things that will become startups.  That's\npremature optimization. Just build things.  Preferably with other\nstudents.  It's not just the classes that make a university such a\ngood place to crank oneself into the future.  You're also surrounded\nby other people trying to do the same thing.  If you work together\nwith them on projects, you'll end up producing not just organic\nideas, but organic ideas with organic founding teams \u2014 and that,\nempirically, is the best combination.Beware of research.  If an undergrad writes something all his friends\nstart using, it's quite likely to represent a good startup idea.\nWhereas a PhD dissertation is extremely unlikely to.  For some\nreason, the more a project has to count as research, the less likely\nit is to be something that could be turned into a startup.\n[10]\nI think the reason is that the subset of ideas that count as research\nis so narrow that it's unlikely that a project that satisfied that\nconstraint would also satisfy the orthogonal constraint of solving\nusers' problems.  Whereas when students (or professors) build\nsomething as a side-project, they automatically gravitate toward\nsolving users' problems \u2014 perhaps even with an additional energy\nthat comes from being freed from the constraints of research.\nCompetitionBecause a good idea should seem obvious, when you have one you'll\ntend to feel that you're late.  Don't let that deter you.  Worrying\nthat you're late is one of the signs of a good idea.  Ten minutes\nof searching the web will usually settle the question.  Even if you\nfind someone else working on the same thing, you're probably not\ntoo late.  It's exceptionally rare for startups to be killed by\ncompetitors \u2014 so rare that you can almost discount the possibility.\nSo unless you discover a competitor with the sort of lock-in that\nwould prevent users from choosing you, don't discard the idea.If you're uncertain, ask users.  The question of whether you're too\nlate is subsumed by the question of whether anyone urgently needs\nwhat you plan to make.  If you have something that no competitor\ndoes and that some subset of users urgently need, you have a\nbeachhead.  \n[11]The question then is whether that beachhead is big enough. Or more\nimportantly, who's in it: if the beachhead consists of people doing\nsomething lots more people will be doing in the future, then it's\nprobably big enough no matter how small it is.",
        "start_char_idx": 17025,
        "end_char_idx": 21268,
        "text_template": "{metadata_str}\n\n{content}",
        "metadata_template": "{key}: {value}",
        "metadata_seperator": "\n",
        "class_name": "TextNode"
      },
      "__type__": "1"
    },
    "5a840a70-1afe-4617-afd2-870c6c3a0b00": {
      "__data__": {
        "id_": "5a840a70-1afe-4617-afd2-870c6c3a0b00",
        "embedding": null,
        "metadata": {
          "source": "https://paulgraham.com/startupideas.html",
          "title": "How to Get Startup Ideas",
          "language": null
        },
        "excluded_embed_metadata_keys": [],
        "excluded_llm_metadata_keys": [],
        "relationships": {
          "1": {
            "node_id": "24ef60e9-a5fe-4906-b98d-9620e68c7ea4",
            "node_type": "4",
            "metadata": {
              "source": "https://paulgraham.com/startupideas.html",
              "title": "How to Get Startup Ideas",
              "language": null
            },
            "hash": "a6c920acd415f8b0d407151a9884f4da76e3ef6eb45c55fd5b28874684ab194c",
            "class_name": "RelatedNodeInfo"
          },
          "2": {
            "node_id": "45a9f428-c0b6-4b03-870b-d72e209dd4c4",
            "node_type": "1",
            "metadata": {
              "source": "https://paulgraham.com/startupideas.html",
              "title": "How to Get Startup Ideas",
              "language": null
            },
            "hash": "f901f9d4ba2d52fdfc426e7502c7ac836f81a4ff402aa7538f19db0aba7672f4",
            "class_name": "RelatedNodeInfo"
          },
          "3": {
            "node_id": "9d6c9af5-3d60-4bc4-91fc-abd243e4d539",
            "node_type": "1",
            "metadata": {},
            "hash": "25702d8643fcdd7bee50450a3896a0a5bc4420f7f1b869cf3856026e26c33442",
            "class_name": "RelatedNodeInfo"
          }
        },
        "text": "Even if you\nfind someone else working on the same thing, you're probably not\ntoo late.  It's exceptionally rare for startups to be killed by\ncompetitors \u2014 so rare that you can almost discount the possibility.\nSo unless you discover a competitor with the sort of lock-in that\nwould prevent users from choosing you, don't discard the idea.If you're uncertain, ask users.  The question of whether you're too\nlate is subsumed by the question of whether anyone urgently needs\nwhat you plan to make.  If you have something that no competitor\ndoes and that some subset of users urgently need, you have a\nbeachhead.  \n[11]The question then is whether that beachhead is big enough. Or more\nimportantly, who's in it: if the beachhead consists of people doing\nsomething lots more people will be doing in the future, then it's\nprobably big enough no matter how small it is.  For example, if\nyou're building something differentiated from competitors by the\nfact that it works on phones, but it only works on the newest phones,\nthat's probably a big enough beachhead.Err on the side of doing things where you'll face competitors.\nInexperienced founders usually give competitors more credit than\nthey deserve.  Whether you succeed depends far more on you than on\nyour competitors.  So better a good idea with competitors than a\nbad one without.You don't need to worry about entering a \"crowded market\" so long\nas you have a thesis about what everyone else in it is overlooking.\nIn fact that's a very promising starting point.  Google was that\ntype of idea.  Your thesis has to be more precise than \"we're going\nto make an x that doesn't suck\" though. You have to be able to\nphrase it in terms of something the incumbents are overlooking.\nBest of all is when you can say that they didn't have the courage\nof their convictions, and that your plan is what they'd have done\nif they'd followed through on their own insights.  Google was that\ntype of idea too.  The search engines that preceded them shied away\nfrom the most radical implications of what they were doing \u2014 particularly \nthat the better a job they did, the faster users would\nleave.A crowded market is actually a good sign, because it means both\nthat there's demand and that none of the existing solutions are\ngood enough.  A startup can't hope to enter a market that's obviously\nbig and yet in which they have no competitors.  So any startup that\nsucceeds is either going to be entering a market with existing\ncompetitors, but armed with some secret weapon that will get them\nall the users (like Google), or entering a market that looks small\nbut which will turn out to be big (like Microsoft).  \n[12]\nFiltersThere are two more filters you'll need to turn off if you want to\nnotice startup ideas: the unsexy filter and the schlep filter.Most programmers wish they could start a startup by just writing\nsome brilliant code, pushing it to a server, and having users pay\nthem lots of money.  They'd prefer not to deal with tedious problems\nor get involved in messy ways with the real world.  Which is a\nreasonable preference, because such things slow you down.  But this\npreference is so widespread that the space of convenient startup\nideas has been stripped pretty clean.  If you let your mind wander\na few blocks down the street to the messy, tedious ideas, you'll\nfind valuable ones just sitting there waiting to be implemented.The schlep filter is so dangerous that I wrote a separate essay\nabout the condition it induces, which I called \nschlep blindness.\nI gave Stripe as an example of a startup that benefited from turning\noff this filter, and a pretty striking example it is.  Thousands\nof programmers were in a position to see this idea; thousands of\nprogrammers knew how painful it was to process payments before\nStripe.  But when they looked for startup ideas they didn't see\nthis one, because unconsciously they shrank from having to deal\nwith payments.  And dealing with payments is a schlep for Stripe,\nbut not an intolerable one.  In fact they might have had net less\npain; because the fear of dealing with payments kept most people\naway from this idea, Stripe has had comparatively smooth sailing\nin other areas that are sometimes painful, like user acquisition.\nThey didn't have to try very hard to make themselves heard by users,\nbecause users were desperately waiting for what they were building.The unsexy filter is similar to the schlep filter, except it keeps\nyou from working on problems you despise rather than ones you fear.",
        "start_char_idx": 20407,
        "end_char_idx": 24899,
        "text_template": "{metadata_str}\n\n{content}",
        "metadata_template": "{key}: {value}",
        "metadata_seperator": "\n",
        "class_name": "TextNode"
      },
      "__type__": "1"
    },
    "9d6c9af5-3d60-4bc4-91fc-abd243e4d539": {
      "__data__": {
        "id_": "9d6c9af5-3d60-4bc4-91fc-abd243e4d539",
        "embedding": null,
        "metadata": {
          "source": "https://paulgraham.com/startupideas.html",
          "title": "How to Get Startup Ideas",
          "language": null
        },
        "excluded_embed_metadata_keys": [],
        "excluded_llm_metadata_keys": [],
        "relationships": {
          "1": {
            "node_id": "24ef60e9-a5fe-4906-b98d-9620e68c7ea4",
            "node_type": "4",
            "metadata": {
              "source": "https://paulgraham.com/startupideas.html",
              "title": "How to Get Startup Ideas",
              "language": null
            },
            "hash": "a6c920acd415f8b0d407151a9884f4da76e3ef6eb45c55fd5b28874684ab194c",
            "class_name": "RelatedNodeInfo"
          },
          "2": {
            "node_id": "5a840a70-1afe-4617-afd2-870c6c3a0b00",
            "node_type": "1",
            "metadata": {
              "source": "https://paulgraham.com/startupideas.html",
              "title": "How to Get Startup Ideas",
              "language": null
            },
            "hash": "ca0c49c0eea7a08f8f7fd560a0cdda6644d9424bdc349f32a3aad91709701f67",
            "class_name": "RelatedNodeInfo"
          },
          "3": {
            "node_id": "e9100a29-120c-43df-bdb6-23417f4352eb",
            "node_type": "1",
            "metadata": {},
            "hash": "2ee069eced457541c6eeacc37121a534a2f880896d080fc8dc89ec21d984c139",
            "class_name": "RelatedNodeInfo"
          }
        },
        "text": "Thousands\nof programmers were in a position to see this idea; thousands of\nprogrammers knew how painful it was to process payments before\nStripe.  But when they looked for startup ideas they didn't see\nthis one, because unconsciously they shrank from having to deal\nwith payments.  And dealing with payments is a schlep for Stripe,\nbut not an intolerable one.  In fact they might have had net less\npain; because the fear of dealing with payments kept most people\naway from this idea, Stripe has had comparatively smooth sailing\nin other areas that are sometimes painful, like user acquisition.\nThey didn't have to try very hard to make themselves heard by users,\nbecause users were desperately waiting for what they were building.The unsexy filter is similar to the schlep filter, except it keeps\nyou from working on problems you despise rather than ones you fear.\nWe overcame this one to work on Viaweb. There were interesting\nthings about the architecture of our software, but we weren't\ninterested in ecommerce per se.  We could see the problem was one\nthat needed to be solved though.Turning off the schlep filter is more important than turning off\nthe unsexy filter, because the schlep filter is more likely to be\nan illusion.  And even to the degree it isn't, it's a worse form\nof self-indulgence.  Starting a successful startup is going to be\nfairly laborious no matter what.  Even if the product doesn't entail\na lot of schleps, you'll still have plenty dealing with investors,\nhiring and firing people, and so on.  So if there's some idea you\nthink would be cool but you're kept away from by fear of the schleps\ninvolved, don't worry: any sufficiently good idea will have as many.The unsexy filter, while still a source of error, is not as entirely\nuseless as the schlep filter.  If you're at the leading edge of a\nfield that's changing rapidly, your ideas about what's sexy will\nbe somewhat correlated with what's valuable in practice.  Particularly\nas you get older and more experienced.  Plus if you find an idea\nsexy, you'll work on it more enthusiastically. \n[13]\nRecipesWhile the best way to discover startup ideas is to become the sort\nof person who has them and then build whatever interests you,\nsometimes you don't have that luxury.  Sometimes you need an idea\nnow.  For example, if you're working on a startup and your initial\nidea turns out to be bad.For the rest of this essay I'll talk about tricks for coming up\nwith startup ideas on demand.  Although empirically you're better\noff using the organic strategy, you could succeed this way. You\njust have to be more disciplined.  When you use the organic method,\nyou don't even notice an idea unless it's evidence that something\nis truly missing.  But when you make a conscious effort to think\nof startup ideas, you have to replace this natural constraint with\nself-discipline.  You'll see a lot more ideas, most of them bad,\nso you need to be able to filter them.One of the biggest dangers of not using the organic method is the\nexample of the organic method.  Organic ideas feel like inspirations.\nThere are a lot of stories about successful startups that began\nwhen the founders had what seemed a crazy idea but \"just knew\" it\nwas promising.  When you feel that about an idea you've had while\ntrying to come up with startup ideas, you're probably mistaken.When searching for ideas, look in areas where you have some expertise.\nIf you're a database expert, don't build a chat app for teenagers\n(unless you're also a teenager).  Maybe it's a good idea, but you\ncan't trust your judgment about that, so ignore it.  There have to\nbe other ideas that involve databases, and whose quality you can\njudge.  Do you find it hard to come up with good ideas involving\ndatabases?  That's because your expertise raises your standards.\nYour ideas about chat apps are just as bad, but you're giving\nyourself a Dunning-Kruger pass in that domain.The place to start looking for ideas is things you need.  There\nmust be things you need.\n[14]One good trick is to ask yourself whether in your previous job you\never found yourself saying \"Why doesn't someone make x?  If someone\nmade x we'd buy it in a second.\" If you can think of any x people\nsaid that about, you probably have an idea.",
        "start_char_idx": 24035,
        "end_char_idx": 28275,
        "text_template": "{metadata_str}\n\n{content}",
        "metadata_template": "{key}: {value}",
        "metadata_seperator": "\n",
        "class_name": "TextNode"
      },
      "__type__": "1"
    },
    "e9100a29-120c-43df-bdb6-23417f4352eb": {
      "__data__": {
        "id_": "e9100a29-120c-43df-bdb6-23417f4352eb",
        "embedding": null,
        "metadata": {
          "source": "https://paulgraham.com/startupideas.html",
          "title": "How to Get Startup Ideas",
          "language": null
        },
        "excluded_embed_metadata_keys": [],
        "excluded_llm_metadata_keys": [],
        "relationships": {
          "1": {
            "node_id": "24ef60e9-a5fe-4906-b98d-9620e68c7ea4",
            "node_type": "4",
            "metadata": {
              "source": "https://paulgraham.com/startupideas.html",
              "title": "How to Get Startup Ideas",
              "language": null
            },
            "hash": "a6c920acd415f8b0d407151a9884f4da76e3ef6eb45c55fd5b28874684ab194c",
            "class_name": "RelatedNodeInfo"
          },
          "2": {
            "node_id": "9d6c9af5-3d60-4bc4-91fc-abd243e4d539",
            "node_type": "1",
            "metadata": {
              "source": "https://paulgraham.com/startupideas.html",
              "title": "How to Get Startup Ideas",
              "language": null
            },
            "hash": "9898ac948019cb8d28a4b194767580f276a25dadb840d4035af3aeea315e2eaa",
            "class_name": "RelatedNodeInfo"
          },
          "3": {
            "node_id": "6b29c435-3cad-4536-95c2-b913d6a80e3a",
            "node_type": "1",
            "metadata": {},
            "hash": "01f6522fdb282d19f0583d2a879c44809227bd0592c1736000a33c8aaf8aec6b",
            "class_name": "RelatedNodeInfo"
          }
        },
        "text": "Maybe it's a good idea, but you\ncan't trust your judgment about that, so ignore it.  There have to\nbe other ideas that involve databases, and whose quality you can\njudge.  Do you find it hard to come up with good ideas involving\ndatabases?  That's because your expertise raises your standards.\nYour ideas about chat apps are just as bad, but you're giving\nyourself a Dunning-Kruger pass in that domain.The place to start looking for ideas is things you need.  There\nmust be things you need.\n[14]One good trick is to ask yourself whether in your previous job you\never found yourself saying \"Why doesn't someone make x?  If someone\nmade x we'd buy it in a second.\" If you can think of any x people\nsaid that about, you probably have an idea.  You know there's demand,\nand people don't say that about things that are impossible to build.More generally, try asking yourself whether there's something unusual\nabout you that makes your needs different from most other people's.\nYou're probably not the only one.  It's especially good if you're\ndifferent in a way people will increasingly be.If you're changing ideas, one unusual thing about you is the idea\nyou'd previously been working on.  Did you discover any needs while\nworking on it?  Several well-known startups began this way.  Hotmail\nbegan as something its founders wrote to talk about their previous\nstartup idea while they were working at their day jobs. \n[15]A particularly promising way to be unusual is to be young.  Some\nof the most valuable new ideas take root first among people in their\nteens and early twenties.  And while young founders are at a\ndisadvantage in some respects, they're the only ones who really\nunderstand their peers.  It would have been very hard for someone\nwho wasn't a college student to start Facebook.  So if you're a\nyoung founder (under 23 say), are there things you and your friends\nwould like to do that current technology won't let you?The next best thing to an unmet need of your own is an unmet need\nof someone else.  Try talking to everyone you can about the gaps\nthey find in the world.  What's missing?  What would they like to\ndo that they can't?  What's tedious or annoying, particularly in\ntheir work?  Let the conversation get general; don't be trying too\nhard to find startup ideas.  You're just looking for something to\nspark a thought.  Maybe you'll notice a problem they didn't consciously\nrealize they had, because you know how to solve it.When you find an unmet need that isn't your own, it may be somewhat\nblurry at first.  The person who needs something may not know exactly\nwhat they need.  In that case I often recommend that founders act\nlike consultants \u2014 that they do what they'd do if they'd been\nretained to solve the problems of this one user.  People's problems\nare similar enough that nearly all the code you write this way will\nbe reusable, and whatever isn't will be a small price to start out\ncertain that you've reached the bottom of the well.\n[16]One way to ensure you do a good job solving other people's problems\nis to make them your own.  When Rajat Suri of E la Carte decided\nto write software for restaurants, he got a job as a waiter to learn\nhow restaurants worked.  That may seem like taking things to extremes,\nbut startups are extreme.  We love it when founders do such things.In fact, one strategy I recommend to people who need a new idea is\nnot merely to turn off their schlep and unsexy filters, but to seek\nout ideas that are unsexy or involve schleps.  Don't try to start\nTwitter.  Those ideas are so rare that you can't find them by looking\nfor them.  Make something unsexy that people will pay you for.A good trick for bypassing the schlep and to some extent the unsexy\nfilter is to ask what you wish someone else would build, so that\nyou could use it.  What would you pay for right now?Since startups often garbage-collect broken companies and industries,\nit can be a good trick to look for those that are dying, or deserve\nto, and try to imagine what kind of company would profit from their\ndemise.  For example, journalism is in free fall at the moment.\nBut there may still be money to be made from something like journalism.",
        "start_char_idx": 27536,
        "end_char_idx": 31706,
        "text_template": "{metadata_str}\n\n{content}",
        "metadata_template": "{key}: {value}",
        "metadata_seperator": "\n",
        "class_name": "TextNode"
      },
      "__type__": "1"
    },
    "6b29c435-3cad-4536-95c2-b913d6a80e3a": {
      "__data__": {
        "id_": "6b29c435-3cad-4536-95c2-b913d6a80e3a",
        "embedding": null,
        "metadata": {
          "source": "https://paulgraham.com/startupideas.html",
          "title": "How to Get Startup Ideas",
          "language": null
        },
        "excluded_embed_metadata_keys": [],
        "excluded_llm_metadata_keys": [],
        "relationships": {
          "1": {
            "node_id": "24ef60e9-a5fe-4906-b98d-9620e68c7ea4",
            "node_type": "4",
            "metadata": {
              "source": "https://paulgraham.com/startupideas.html",
              "title": "How to Get Startup Ideas",
              "language": null
            },
            "hash": "a6c920acd415f8b0d407151a9884f4da76e3ef6eb45c55fd5b28874684ab194c",
            "class_name": "RelatedNodeInfo"
          },
          "2": {
            "node_id": "e9100a29-120c-43df-bdb6-23417f4352eb",
            "node_type": "1",
            "metadata": {
              "source": "https://paulgraham.com/startupideas.html",
              "title": "How to Get Startup Ideas",
              "language": null
            },
            "hash": "5dd7e1c945d51f10759c7a058c1201154ab1050a1e0d10bef7f609579e7b0011",
            "class_name": "RelatedNodeInfo"
          },
          "3": {
            "node_id": "e15d877d-7876-4d2d-9626-86ca743e596a",
            "node_type": "1",
            "metadata": {},
            "hash": "c9667dcfb0b4b480d800949107ff5124d69da823fc763e15cea43596e8a9ae80",
            "class_name": "RelatedNodeInfo"
          }
        },
        "text": "Don't try to start\nTwitter.  Those ideas are so rare that you can't find them by looking\nfor them.  Make something unsexy that people will pay you for.A good trick for bypassing the schlep and to some extent the unsexy\nfilter is to ask what you wish someone else would build, so that\nyou could use it.  What would you pay for right now?Since startups often garbage-collect broken companies and industries,\nit can be a good trick to look for those that are dying, or deserve\nto, and try to imagine what kind of company would profit from their\ndemise.  For example, journalism is in free fall at the moment.\nBut there may still be money to be made from something like journalism.\nWhat sort of company might cause people in the future to say \"this\nreplaced journalism\" on some axis?But imagine asking that in the future, not now.  When one company\nor industry replaces another, it usually comes in from the side.\nSo don't look for a replacement for x; look for something that\npeople will later say turned out to be a replacement for x.  And\nbe imaginative about the axis along which the replacement occurs.\nTraditional journalism, for example, is a way for readers to get\ninformation and to kill time, a way for writers to make money and\nto get attention, and a vehicle for several different types of\nadvertising.  It could be replaced on any of these axes (it has\nalready started to be on most).When startups consume incumbents, they usually start by serving\nsome small but important market that the big players ignore.  It's\nparticularly good if there's an admixture of disdain in the big\nplayers' attitude, because that often misleads them.  For example,\nafter Steve Wozniak built the computer that became the Apple I, he\nfelt obliged to give his then-employer Hewlett-Packard the option\nto produce it.  Fortunately for him, they turned it down, and one\nof the reasons they did was that it used a TV for a monitor, which\nseemed intolerably d\u00e9class\u00e9 to a high-end hardware company like HP\nwas at the time. \n[17]Are there groups of \nscruffy \nbut sophisticated users like the early\nmicrocomputer \"hobbyists\" that are currently being ignored by the\nbig players?  A startup with its sights set on bigger things can\noften capture a small market easily by expending an effort that\nwouldn't be justified by that market alone.Similarly, since the most successful startups generally ride some\nwave bigger than themselves, it could be a good trick to look for\nwaves and ask how one could benefit from them.  The prices of gene\nsequencing and 3D printing are both experiencing Moore's Law-like\ndeclines.  What new things will we be able to do in the new world\nwe'll have in a few years?  What are we unconsciously ruling out\nas impossible that will soon be possible?\nOrganicBut talking about looking explicitly for waves makes it clear that\nsuch recipes are plan B for getting startup ideas.  Looking for\nwaves is essentially a way to simulate the organic method.  If\nyou're at the leading edge of some rapidly changing field, you don't\nhave to look for waves; you are the wave.Finding startup ideas is a subtle business, and that's why most\npeople who try fail so miserably.  It doesn't work well simply to\ntry to think of startup ideas.  If you do that, you get bad ones\nthat sound dangerously plausible.  The best approach is more indirect:\nif you have the right sort of background, good startup ideas will\nseem obvious to you.  But even then, not immediately.  It takes\ntime to come across situations where you notice something missing.\nAnd often these gaps won't seem to be ideas for companies, just\nthings that would be interesting to build.  Which is why it's good\nto have the time and the inclination to build things just because\nthey're interesting.Live in the future and build what seems interesting.  Strange as\nit sounds, that's the real recipe.\nNotes[1]\nThis form of bad idea has been around as long as the web.  It\nwas common in the 1990s, except then people who had it used to say\nthey were going to create a portal for x instead of a social network\nfor x.  Structurally the idea is stone soup: you post a sign saying\n\"this is the place for people interested in x,\" and all those people\nshow up and you make money from them.",
        "start_char_idx": 31029,
        "end_char_idx": 35256,
        "text_template": "{metadata_str}\n\n{content}",
        "metadata_template": "{key}: {value}",
        "metadata_seperator": "\n",
        "class_name": "TextNode"
      },
      "__type__": "1"
    },
    "e15d877d-7876-4d2d-9626-86ca743e596a": {
      "__data__": {
        "id_": "e15d877d-7876-4d2d-9626-86ca743e596a",
        "embedding": null,
        "metadata": {
          "source": "https://paulgraham.com/startupideas.html",
          "title": "How to Get Startup Ideas",
          "language": null
        },
        "excluded_embed_metadata_keys": [],
        "excluded_llm_metadata_keys": [],
        "relationships": {
          "1": {
            "node_id": "24ef60e9-a5fe-4906-b98d-9620e68c7ea4",
            "node_type": "4",
            "metadata": {
              "source": "https://paulgraham.com/startupideas.html",
              "title": "How to Get Startup Ideas",
              "language": null
            },
            "hash": "a6c920acd415f8b0d407151a9884f4da76e3ef6eb45c55fd5b28874684ab194c",
            "class_name": "RelatedNodeInfo"
          },
          "2": {
            "node_id": "6b29c435-3cad-4536-95c2-b913d6a80e3a",
            "node_type": "1",
            "metadata": {
              "source": "https://paulgraham.com/startupideas.html",
              "title": "How to Get Startup Ideas",
              "language": null
            },
            "hash": "7c1dee42092ba58cc1cf5cc84d21b3cd1207565490fed35aa0d61ec871655d4f",
            "class_name": "RelatedNodeInfo"
          },
          "3": {
            "node_id": "06ee97eb-67f6-4909-b50d-539e9d85e31c",
            "node_type": "1",
            "metadata": {},
            "hash": "c188d621c54d9555a9da0dd3f7e3b8e26a60d1aded45d26f7d5f370d67432f20",
            "class_name": "RelatedNodeInfo"
          }
        },
        "text": "But even then, not immediately.  It takes\ntime to come across situations where you notice something missing.\nAnd often these gaps won't seem to be ideas for companies, just\nthings that would be interesting to build.  Which is why it's good\nto have the time and the inclination to build things just because\nthey're interesting.Live in the future and build what seems interesting.  Strange as\nit sounds, that's the real recipe.\nNotes[1]\nThis form of bad idea has been around as long as the web.  It\nwas common in the 1990s, except then people who had it used to say\nthey were going to create a portal for x instead of a social network\nfor x.  Structurally the idea is stone soup: you post a sign saying\n\"this is the place for people interested in x,\" and all those people\nshow up and you make money from them.  What lures founders into\nthis sort of idea are statistics about the millions of people who\nmight be interested in each type of x.  What they forget is that\nany given person might have 20 affinities by this standard, and no\none is going to visit 20 different communities regularly.[2]\nI'm not saying, incidentally, that I know for sure a social\nnetwork for pet owners is a bad idea.  I know it's a bad idea the\nway I know randomly generated DNA would not produce a viable organism.\nThe set of plausible sounding startup ideas is many times larger\nthan the set of good ones, and many of the good ones don't even\nsound that plausible.  So if all you know about a startup idea is\nthat it sounds plausible, you have to assume it's bad.[3]\nMore precisely, the users' need has to give them sufficient\nactivation energy to start using whatever you make, which can vary\na lot.  For example, the activation energy for enterprise software\nsold through traditional channels is very high, so you'd have to\nbe a lot better to get users to switch.  Whereas the activation\nenergy required to switch to a new search engine is low.  Which in\nturn is why search engines are so much better than enterprise\nsoftware.[4]\nThis gets harder as you get older.  While the space of ideas\ndoesn't have dangerous local maxima, the space of careers does.\nThere are fairly high walls between most of the paths people take\nthrough life, and the older you get, the higher the walls become.[5]\nIt was also obvious to us that the web was going to be a big\ndeal.  Few non-programmers grasped that in 1995, but the programmers\nhad seen what GUIs had done for desktop computers.[6]\nMaybe it would work to have this second self keep a journal,\nand each night to make a brief entry listing the gaps and anomalies\nyou'd noticed that day.  Not startup ideas, just the raw gaps and\nanomalies.[7]\nSam Altman points out that taking time to come up with an\nidea is not merely a better strategy in an absolute sense, but also\nlike an undervalued stock in that so few founders do it.There's comparatively little competition for the best ideas, because\nfew founders are willing to put in the time required to notice them.\nWhereas there is a great deal of competition for mediocre ideas,\nbecause when people make up startup ideas, they tend to make up the\nsame ones.[8]\nFor the computer hardware and software companies, summer jobs\nare the first phase of the recruiting funnel.  But if you're good\nyou can skip the first phase.  If you're good you'll have no trouble\ngetting hired by these companies when you graduate, regardless of\nhow you spent your summers.[9]\nThe empirical evidence suggests that if colleges want to help\ntheir students start startups, the best thing they can do is leave\nthem alone in the right way.[10]\nI'm speaking here of IT startups; in biotech things are different.[11]\nThis is an instance of a more general rule: focus on users,\nnot competitors.  The most important information about competitors\nis what you learn via users anyway.[12]\nIn practice most successful startups have elements of both.\nAnd you can describe each strategy in terms of the other by adjusting\nthe boundaries of what you call the market.  But it's useful to\nconsider these two ideas separately.[13]\nI almost hesitate to raise that point though.  Startups are\nbusinesses; the point of a business is to make money; and with that\nadditional constraint, you can't expect you'll be able to spend all\nyour time working on what interests you most.",
        "start_char_idx": 34449,
        "end_char_idx": 38747,
        "text_template": "{metadata_str}\n\n{content}",
        "metadata_template": "{key}: {value}",
        "metadata_seperator": "\n",
        "class_name": "TextNode"
      },
      "__type__": "1"
    },
    "06ee97eb-67f6-4909-b50d-539e9d85e31c": {
      "__data__": {
        "id_": "06ee97eb-67f6-4909-b50d-539e9d85e31c",
        "embedding": null,
        "metadata": {
          "source": "https://paulgraham.com/startupideas.html",
          "title": "How to Get Startup Ideas",
          "language": null
        },
        "excluded_embed_metadata_keys": [],
        "excluded_llm_metadata_keys": [],
        "relationships": {
          "1": {
            "node_id": "24ef60e9-a5fe-4906-b98d-9620e68c7ea4",
            "node_type": "4",
            "metadata": {
              "source": "https://paulgraham.com/startupideas.html",
              "title": "How to Get Startup Ideas",
              "language": null
            },
            "hash": "a6c920acd415f8b0d407151a9884f4da76e3ef6eb45c55fd5b28874684ab194c",
            "class_name": "RelatedNodeInfo"
          },
          "2": {
            "node_id": "e15d877d-7876-4d2d-9626-86ca743e596a",
            "node_type": "1",
            "metadata": {
              "source": "https://paulgraham.com/startupideas.html",
              "title": "How to Get Startup Ideas",
              "language": null
            },
            "hash": "eb41afa3e69c499e7c5768508301a07caae4265b2e0ae79e7d9b40800b027b4a",
            "class_name": "RelatedNodeInfo"
          },
          "3": {
            "node_id": "9ba9d8e4-1d36-4b01-bf3c-5ab205556bd0",
            "node_type": "1",
            "metadata": {},
            "hash": "9e522cc46838dc420fb958d05575be7fecc8aa534a1ba39d1652b618136b4ca0",
            "class_name": "RelatedNodeInfo"
          }
        },
        "text": "[9]\nThe empirical evidence suggests that if colleges want to help\ntheir students start startups, the best thing they can do is leave\nthem alone in the right way.[10]\nI'm speaking here of IT startups; in biotech things are different.[11]\nThis is an instance of a more general rule: focus on users,\nnot competitors.  The most important information about competitors\nis what you learn via users anyway.[12]\nIn practice most successful startups have elements of both.\nAnd you can describe each strategy in terms of the other by adjusting\nthe boundaries of what you call the market.  But it's useful to\nconsider these two ideas separately.[13]\nI almost hesitate to raise that point though.  Startups are\nbusinesses; the point of a business is to make money; and with that\nadditional constraint, you can't expect you'll be able to spend all\nyour time working on what interests you most.[14]\nThe need has to be a strong one.  You can retroactively\ndescribe any made-up idea as something you need.  But do you really\nneed that recipe site or local event aggregator as much as Drew\nHouston needed Dropbox, or Brian Chesky and Joe Gebbia needed Airbnb?Quite often at YC I find myself asking founders \"Would you use this\nthing yourself, if you hadn't written it?\" and you'd be surprised\nhow often the answer is no.[15]\nPaul Buchheit points out that trying to sell something bad\ncan be a source of better ideas:\"The best technique I've found for dealing with YC companies that\nhave bad ideas is to tell them to go sell the product ASAP (before\nwasting time building it). Not only do they learn that nobody\nwants what they are building, they very often come back with a\nreal idea that they discovered in the process of trying to sell\nthe bad idea.\"[16]\nHere's a recipe that might produce the next Facebook, if\nyou're college students.  If you have a connection to one of the\nmore powerful sororities at your school, approach the queen bees\nthereof and offer to be their personal IT consultants, building\nanything they could imagine needing in their social lives that\ndidn't already exist.  Anything that got built this way would be\nvery promising, because such users are not just the most demanding\nbut also the perfect point to spread from.I have no idea whether this would work.[17]\nAnd the reason it used a TV for a monitor is that Steve Wozniak\nstarted out by solving his own problems.  He, like most of his\npeers, couldn't afford a monitor.Thanks to Sam Altman, Mike Arrington, Paul Buchheit, John Collison,\nPatrick Collison, Garry Tan, and Harj Taggar for reading drafts of\nthis, and Marc Andreessen, Joe Gebbia, Reid Hoffman, Shel Kaphan,\nMike Moritz and Kevin Systrom for answering my questions about\nstartup history.Japanese TranslationItalian TranslationSpanish Translation",
        "start_char_idx": 37867,
        "end_char_idx": 40637,
        "text_template": "{metadata_str}\n\n{content}",
        "metadata_template": "{key}: {value}",
        "metadata_seperator": "\n",
        "class_name": "TextNode"
      },
      "__type__": "1"
    },
    "9ba9d8e4-1d36-4b01-bf3c-5ab205556bd0": {
      "__data__": {
        "id_": "9ba9d8e4-1d36-4b01-bf3c-5ab205556bd0",
        "embedding": null,
        "metadata": {
          "source": "https://paulgraham.com/ind.html",
          "title": "Paul Graham Index",
          "language": null
        },
        "excluded_embed_metadata_keys": [],
        "excluded_llm_metadata_keys": [],
        "relationships": {
          "1": {
            "node_id": "93ccc7a7-6629-4b22-a86d-f45c045d69dd",
            "node_type": "4",
            "metadata": {
              "source": "https://paulgraham.com/ind.html",
              "title": "Paul Graham Index",
              "language": null
            },
            "hash": "214e2f0ad7d1be000f08d664e882a212e114468cb105dab9ac6ec98bc91df763",
            "class_name": "RelatedNodeInfo"
          },
          "2": {
            "node_id": "06ee97eb-67f6-4909-b50d-539e9d85e31c",
            "node_type": "1",
            "metadata": {
              "source": "https://paulgraham.com/startupideas.html",
              "title": "How to Get Startup Ideas",
              "language": null
            },
            "hash": "671e4a085c92aa09f1edd4215a09a052b159a0b6140f045f6422bdd6ef59f0e8",
            "class_name": "RelatedNodeInfo"
          },
          "3": {
            "node_id": "70acd3a6-f0b2-4158-8544-ea8c6fb686cb",
            "node_type": "1",
            "metadata": {},
            "hash": "53dd1968f8da30c866f9c107ffead40c5d3e1629bd471f375840d8bcb83c597f",
            "class_name": "RelatedNodeInfo"
          }
        },
        "text": "Paul Graham Index\n\n\"I can be tricked by anyone who looks like Mark Zuckerberg.\"12 August 1995: It Works1959 Cadillac Eldorado1974 Porsche 911 Models1975 Cadillac Eldorado1976 AMC Matador Coupe2004 Dodge Magnum2005 Summer Founders6,631,372A Firefox in IE's HenhouseA Fundraising Survival GuideA Local Revolution?A New Venture AnimalA Plan for SpamA Project of One's OwnA Reply to Ezra KleinA Reply to Russell OkungA Student's Guide to StartupsA Unified Theory of VC SuckageA Version 1.0A Way to Detect BiasA Word to the ResourcefulAaron, Steve, Zak with PowerbooksPrev \u00a0 | \u00a0 Next",
        "start_char_idx": 2,
        "end_char_idx": 580,
        "text_template": "{metadata_str}\n\n{content}",
        "metadata_template": "{key}: {value}",
        "metadata_seperator": "\n",
        "class_name": "TextNode"
      },
      "__type__": "1"
    },
    "70acd3a6-f0b2-4158-8544-ea8c6fb686cb": {
      "__data__": {
        "id_": "70acd3a6-f0b2-4158-8544-ea8c6fb686cb",
        "embedding": null,
        "metadata": {
          "source": "https://paulgraham.com/word.html",
          "title": "A Word to the Resourceful",
          "language": null
        },
        "excluded_embed_metadata_keys": [],
        "excluded_llm_metadata_keys": [],
        "relationships": {
          "1": {
            "node_id": "d900b4c4-d458-49a3-8141-7a0ef3bb1da2",
            "node_type": "4",
            "metadata": {
              "source": "https://paulgraham.com/word.html",
              "title": "A Word to the Resourceful",
              "language": null
            },
            "hash": "012e4db91ad7405298d101714181ef3d3d04111b417b482935dc7bf33d05f7b1",
            "class_name": "RelatedNodeInfo"
          },
          "2": {
            "node_id": "9ba9d8e4-1d36-4b01-bf3c-5ab205556bd0",
            "node_type": "1",
            "metadata": {
              "source": "https://paulgraham.com/ind.html",
              "title": "Paul Graham Index",
              "language": null
            },
            "hash": "5fb437f81125d95c643350dbc11434cf121ffbbd2e396595f75ab19b0a713ed7",
            "class_name": "RelatedNodeInfo"
          },
          "3": {
            "node_id": "ec4d0811-20d1-4b78-a3c4-d9e90397961c",
            "node_type": "1",
            "metadata": {},
            "hash": "69e9c14dc6a95c0428b2c8e00200e090cdba9eebcb2ad64bfe8ac6797776e6be",
            "class_name": "RelatedNodeInfo"
          }
        },
        "text": "A Word to the Resourceful\n\n\n\nWant to start a startup?  Get funded by\nY Combinator.\n\n\n\n\nJanuary 2012A year ago I noticed a pattern in the least successful startups\nwe'd funded: they all seemed hard to talk to.  It felt as if there\nwas some kind of wall between us.  I could never quite tell if they\nunderstood what I was saying.This caught my attention because earlier we'd noticed a pattern\namong the most successful startups, and it seemed to hinge on a\ndifferent quality.  We found the startups that did best were the\nones with the sort of founders about whom we'd say \"they can take\ncare of themselves.\"  The startups that do best are fire-and-forget\nin the sense that all you have to do is give them a lead, and they'll\nclose it, whatever type of lead it is.  When they're raising money,\nfor example, you can do the initial intros knowing that if you\nwanted to you could stop thinking about it at that point.  You won't\nhave to babysit the round to make sure it happens.  That type of\nfounder is going to come back with the money; the only question is\nhow much on what terms.It seemed odd that the outliers at the two ends of the spectrum\ncould be detected by what appeared to be unrelated tests.  You'd\nexpect that if the founders at one end were distinguished by the\npresence of quality x, at the other end they'd be distinguished by\nlack of x.  Was there some kind of inverse relation between\nresourcefulness and being hard to talk to?It turns out there is, and the key to the mystery is the old adage\n\"a word to the wise is sufficient.\"   Because this phrase is not\nonly overused, but overused in an indirect way (by prepending the\nsubject to some advice), most people who've heard it don't know\nwhat it means.  What it means is that if someone is wise, all you\nhave to do is say one word to them, and they'll understand immediately.\nYou don't have to explain in detail; they'll chase down all the\nimplications.In much the same way that all you have to do is give the right sort\nof founder a one line intro to a VC, and he'll chase down the money.\nThat's the connection.  Understanding all the implications \u2014 even the\ninconvenient implications \u2014 of what someone tells you is a subset of\nresourcefulness.  It's conversational resourcefulness.Like real world resourcefulness, conversational resourcefulness\noften means doing things you don't want to.  Chasing down all the\nimplications of what's said to you can sometimes lead to uncomfortable\nconclusions.  The best word to describe the failure to do so is\nprobably \"denial,\" though that seems a bit too narrow.  A better\nway to describe the situation would be to say that the unsuccessful\nfounders had the sort of conservatism that comes from weakness.\nThey traversed idea space as gingerly as a very old person\ntraverses the physical world.\n[1]The unsuccessful founders weren't stupid.  Intellectually they\nwere as capable as\nthe successful founders of following all the implications of what\none said to them.  They just weren't eager to.So being hard to talk to was not what was killing the\nunsuccessful startups.  It\nwas a sign of an underlying lack of resourcefulness.  That's what\nwas killing them.  As well as\nfailing to chase down the implications of what was said to them,\nthe unsuccessful founders would also fail to chase down funding,\nand users, and sources of new ideas.  But the most immediate evidence\nI had that something was amiss was that I couldn't talk to them.Notes[1]\nA YC partner wrote:My feeling with the bad groups is that coming into office hours,\nthey've already decided what they're going to do and everything I\nsay is being put through an internal process in their heads, which\neither desperately tries to munge what I've said into something\nthat conforms with their decision or just outright dismisses it and\ncreates a rationalization for doing so. They may not even be conscious\nof this process but that's what I think is happening when you say\nsomething to bad groups and they have that glazed over look. I don't\nthink it's confusion or lack of understanding per se, it's this\ninternal process at work.With the good groups, you can tell that everything you say is being\nlooked at with fresh eyes and even if it's dismissed, it's because\nof some logical reason e.g.",
        "start_char_idx": 0,
        "end_char_idx": 4253,
        "text_template": "{metadata_str}\n\n{content}",
        "metadata_template": "{key}: {value}",
        "metadata_seperator": "\n",
        "class_name": "TextNode"
      },
      "__type__": "1"
    },
    "ec4d0811-20d1-4b78-a3c4-d9e90397961c": {
      "__data__": {
        "id_": "ec4d0811-20d1-4b78-a3c4-d9e90397961c",
        "embedding": null,
        "metadata": {
          "source": "https://paulgraham.com/word.html",
          "title": "A Word to the Resourceful",
          "language": null
        },
        "excluded_embed_metadata_keys": [],
        "excluded_llm_metadata_keys": [],
        "relationships": {
          "1": {
            "node_id": "d900b4c4-d458-49a3-8141-7a0ef3bb1da2",
            "node_type": "4",
            "metadata": {
              "source": "https://paulgraham.com/word.html",
              "title": "A Word to the Resourceful",
              "language": null
            },
            "hash": "012e4db91ad7405298d101714181ef3d3d04111b417b482935dc7bf33d05f7b1",
            "class_name": "RelatedNodeInfo"
          },
          "2": {
            "node_id": "70acd3a6-f0b2-4158-8544-ea8c6fb686cb",
            "node_type": "1",
            "metadata": {
              "source": "https://paulgraham.com/word.html",
              "title": "A Word to the Resourceful",
              "language": null
            },
            "hash": "639ed64a2fb8ac69ae0995a10c1a5785ec815f58a8ff76aa8aeebd573c9d093c",
            "class_name": "RelatedNodeInfo"
          },
          "3": {
            "node_id": "c83c805a-1e82-4ded-b92f-a487a2ff66a9",
            "node_type": "1",
            "metadata": {},
            "hash": "412e15bc6bb69d3772817dca9dac10bfbebea4b3030b605aa2547022a71db926",
            "class_name": "RelatedNodeInfo"
          }
        },
        "text": "They may not even be conscious\nof this process but that's what I think is happening when you say\nsomething to bad groups and they have that glazed over look. I don't\nthink it's confusion or lack of understanding per se, it's this\ninternal process at work.With the good groups, you can tell that everything you say is being\nlooked at with fresh eyes and even if it's dismissed, it's because\nof some logical reason e.g. \"we already tried that\" or \"from speaking\nto our users that isn't what they'd like,\" etc. Those groups never\nhave that glazed over look.Thanks to Sam Altman, Patrick Collison, Aaron Iba, Jessica Livingston,\nRobert Morris, Harj Taggar, and Garry Tan for reading drafts of\nthis.",
        "start_char_idx": 3836,
        "end_char_idx": 4530,
        "text_template": "{metadata_str}\n\n{content}",
        "metadata_template": "{key}: {value}",
        "metadata_seperator": "\n",
        "class_name": "TextNode"
      },
      "__type__": "1"
    },
    "c83c805a-1e82-4ded-b92f-a487a2ff66a9": {
      "__data__": {
        "id_": "c83c805a-1e82-4ded-b92f-a487a2ff66a9",
        "embedding": null,
        "metadata": {
          "source": "https://paulgraham.com/aarstevzakwi.html",
          "title": "Aaron, Steve, Zak with Powerbooks",
          "language": null
        },
        "excluded_embed_metadata_keys": [],
        "excluded_llm_metadata_keys": [],
        "relationships": {
          "1": {
            "node_id": "5e676915-5512-4fc1-bcb6-dec5818071d0",
            "node_type": "4",
            "metadata": {
              "source": "https://paulgraham.com/aarstevzakwi.html",
              "title": "Aaron, Steve, Zak with Powerbooks",
              "language": null
            },
            "hash": "81c1e1ec9966f4a732594aa3b2d31ee3d9f85b5fe2d9d49ab1aa839f5ad21341",
            "class_name": "RelatedNodeInfo"
          },
          "2": {
            "node_id": "ec4d0811-20d1-4b78-a3c4-d9e90397961c",
            "node_type": "1",
            "metadata": {
              "source": "https://paulgraham.com/word.html",
              "title": "A Word to the Resourceful",
              "language": null
            },
            "hash": "6f69f85c43e8651cadd637b8fdf65813f00fcaf1c67becfa4a528b719fcf1cfb",
            "class_name": "RelatedNodeInfo"
          },
          "3": {
            "node_id": "ea16f1d0-82d6-4050-9a02-71b4ed07903a",
            "node_type": "1",
            "metadata": {},
            "hash": "be63b7b1a935e8c809406e66a2d17cceee631296ebe0635f2b4b1d10b61d2aa4",
            "class_name": "RelatedNodeInfo"
          }
        },
        "text": "Aaron, Steve, Zak with Powerbooks",
        "start_char_idx": 0,
        "end_char_idx": 33,
        "text_template": "{metadata_str}\n\n{content}",
        "metadata_template": "{key}: {value}",
        "metadata_seperator": "\n",
        "class_name": "TextNode"
      },
      "__type__": "1"
    },
    "ea16f1d0-82d6-4050-9a02-71b4ed07903a": {
      "__data__": {
        "id_": "ea16f1d0-82d6-4050-9a02-71b4ed07903a",
        "embedding": null,
        "metadata": {
          "source": "https://paulgraham.com/59eldorado.html",
          "title": "1959 Cadillac Eldorado",
          "language": null
        },
        "excluded_embed_metadata_keys": [],
        "excluded_llm_metadata_keys": [],
        "relationships": {
          "1": {
            "node_id": "f1da73bb-4483-4e5f-9678-0832489b4100",
            "node_type": "4",
            "metadata": {
              "source": "https://paulgraham.com/59eldorado.html",
              "title": "1959 Cadillac Eldorado",
              "language": null
            },
            "hash": "03e84b066cf0caf4a5a80741a687ec58327ce31fd8449d415aa43ae001e34add",
            "class_name": "RelatedNodeInfo"
          },
          "2": {
            "node_id": "c83c805a-1e82-4ded-b92f-a487a2ff66a9",
            "node_type": "1",
            "metadata": {
              "source": "https://paulgraham.com/aarstevzakwi.html",
              "title": "Aaron, Steve, Zak with Powerbooks",
              "language": null
            },
            "hash": "e4b6f97aa98283488f617c0cf652096b65a070d67fcbc28d013d768f45979b22",
            "class_name": "RelatedNodeInfo"
          },
          "3": {
            "node_id": "a831fe36-b333-413f-b3bf-381d66b70cb0",
            "node_type": "1",
            "metadata": {},
            "hash": "61fa14338337ef156d32aae08aee09c4b04647b25a238d019ec75aa0f830e1e1",
            "class_name": "RelatedNodeInfo"
          }
        },
        "text": "1959 Cadillac Eldorado",
        "start_char_idx": 0,
        "end_char_idx": 22,
        "text_template": "{metadata_str}\n\n{content}",
        "metadata_template": "{key}: {value}",
        "metadata_seperator": "\n",
        "class_name": "TextNode"
      },
      "__type__": "1"
    },
    "a831fe36-b333-413f-b3bf-381d66b70cb0": {
      "__data__": {
        "id_": "a831fe36-b333-413f-b3bf-381d66b70cb0",
        "embedding": null,
        "metadata": {
          "source": "https://paulgraham.com/fundraising.html",
          "title": "A Fundraising Survival Guide",
          "language": null
        },
        "excluded_embed_metadata_keys": [],
        "excluded_llm_metadata_keys": [],
        "relationships": {
          "1": {
            "node_id": "f09998f0-322a-489e-92c7-82363ddc7e7c",
            "node_type": "4",
            "metadata": {
              "source": "https://paulgraham.com/fundraising.html",
              "title": "A Fundraising Survival Guide",
              "language": null
            },
            "hash": "646eaf8fdfa7e11ca2fe7bf76f711ca054e11d114744eae0e9717ca1197cdfce",
            "class_name": "RelatedNodeInfo"
          },
          "2": {
            "node_id": "ea16f1d0-82d6-4050-9a02-71b4ed07903a",
            "node_type": "1",
            "metadata": {
              "source": "https://paulgraham.com/59eldorado.html",
              "title": "1959 Cadillac Eldorado",
              "language": null
            },
            "hash": "e0c9879f09537e45e17d6e44caa800a034a5d2f24857ba229b88fa1e8642de17",
            "class_name": "RelatedNodeInfo"
          },
          "3": {
            "node_id": "0a0bda39-be3b-4651-baae-9bbae484b08b",
            "node_type": "1",
            "metadata": {},
            "hash": "1af4e97f0eb0c9b8a5aa0fb09a035c5674b2f0b50e353e3423313c25de3df62f",
            "class_name": "RelatedNodeInfo"
          }
        },
        "text": "A Fundraising Survival Guide\n\n\n\nWant to start a startup?  Get funded by\nY Combinator.\n\n\n\n\nAugust 2008Raising money is the second hardest part of starting a startup.\nThe hardest part is making something people want: most startups\nthat die, die because they didn't do that.  But the second biggest\ncause of death is probably the difficulty of raising money.\nFundraising is brutal.One reason it's so brutal is simply the brutality of markets.  People\nwho've spent most of their lives in schools or big companies may\nnot have been exposed to that.  Professors and bosses usually feel\nsome sense of responsibility toward you; if you make a valiant\neffort and fail, they'll cut you a break.  Markets are less forgiving.\nCustomers don't care how hard you worked, only whether you solved\ntheir problems.Investors evaluate startups the way customers evaluate products,\nnot the way bosses evaluate employees.  If you're making a valiant\neffort and failing, maybe they'll invest in your next startup, but\nnot this one.But raising money from investors is harder than selling to\ncustomers, because there are so few of them.  There's\nnothing like an efficient market.  You're unlikely to have more\nthan 10 who are interested; it's difficult to talk to more.  So the\nrandomness of any one investor's behavior can really affect you.Problem number 3: investors are very random.  All investors, including\nus, are by ordinary standards incompetent.  We constantly have to\nmake decisions about things we don't understand, and more often\nthan not we're wrong.And yet a lot is at stake.  The amounts invested by different types\nof investors vary from five thousand dollars to fifty million, but\nthe amount usually seems large for whatever type of investor it is.\nInvestment decisions are big decisions.That combination\u2014making big decisions about things they don't\nunderstand\u2014tends to make investors very skittish.  VCs are notorious\nfor leading founders on.  Some of the more unscrupulous do it\ndeliberately.  But even the most well-intentioned investors can\nbehave in a way that would seem crazy in everyday life.  One day\nthey're full of enthusiasm and seem ready to write you a check on\nthe spot; the next they won't return your phone calls.  They're not\nplaying games with you.  They just can't make up their minds.\n[1]If that weren't bad enough, these wildly fluctuating nodes are all\nlinked together.  Startup investors all know one another, and (though\nthey hate to admit it) the biggest factor in their opinion of you\nis the opinion of other investors.  \n[2]\nTalk about a recipe for\nan unstable system.  You get the opposite of the damping that the\nfear/greed balance usually produces in markets.  No one is interested\nin a startup that's a \"bargain\" because everyone else hates it.So the inefficient market you get because there are so few players\nis exacerbated by the fact that they act less than independently.\nThe result is a system like some kind of primitive, multi-celled\nsea creature, where you irritate one extremity and the whole thing\ncontracts violently.Y Combinator is working to fix this.  We're trying to increase the\nnumber of investors just as we're increasing the number of startups.\nWe hope that as the number of both increases we'll get something\nmore like an efficient market.  As t approaches infinity, Demo Day\napproaches an auction.Unfortunately, t is still very far from infinity.  What does a\nstartup do now, in the imperfect world we currently inhabit? The\nmost important thing is not to let fundraising get you down.  Startups\nlive or die on morale.  If you let the difficulty of raising money\ndestroy your morale, it will become a self-fulfilling prophecy.\nBootstrapping (= Consulting)Some would-be founders may by now be thinking, why deal with investors\nat all?  If raising money is so painful, why do it?One answer to that is obvious: because you need money to live on.\nIt's a fine idea in principle to finance your startup with its own\nrevenues, but you can't create instant customers.  Whatever you\nmake, you have to sell a certain amount to break even.  It will\ntake time to grow your sales to that point, and it's hard to predict,\ntill you try, how long it will take.We could not have bootstrapped Viaweb, for example.",
        "start_char_idx": 0,
        "end_char_idx": 4241,
        "text_template": "{metadata_str}\n\n{content}",
        "metadata_template": "{key}: {value}",
        "metadata_seperator": "\n",
        "class_name": "TextNode"
      },
      "__type__": "1"
    },
    "0a0bda39-be3b-4651-baae-9bbae484b08b": {
      "__data__": {
        "id_": "0a0bda39-be3b-4651-baae-9bbae484b08b",
        "embedding": null,
        "metadata": {
          "source": "https://paulgraham.com/fundraising.html",
          "title": "A Fundraising Survival Guide",
          "language": null
        },
        "excluded_embed_metadata_keys": [],
        "excluded_llm_metadata_keys": [],
        "relationships": {
          "1": {
            "node_id": "f09998f0-322a-489e-92c7-82363ddc7e7c",
            "node_type": "4",
            "metadata": {
              "source": "https://paulgraham.com/fundraising.html",
              "title": "A Fundraising Survival Guide",
              "language": null
            },
            "hash": "646eaf8fdfa7e11ca2fe7bf76f711ca054e11d114744eae0e9717ca1197cdfce",
            "class_name": "RelatedNodeInfo"
          },
          "2": {
            "node_id": "a831fe36-b333-413f-b3bf-381d66b70cb0",
            "node_type": "1",
            "metadata": {
              "source": "https://paulgraham.com/fundraising.html",
              "title": "A Fundraising Survival Guide",
              "language": null
            },
            "hash": "ea3e80d3e7ac3260c57becc913f0d8119e22b73631bf838cbdf170f9ff489a3e",
            "class_name": "RelatedNodeInfo"
          },
          "3": {
            "node_id": "43031e2b-2954-4bd9-b4e4-4d8ffb0479a7",
            "node_type": "1",
            "metadata": {},
            "hash": "90c633731f7c844ac6ff3956d52beaa7a2632dbe43898c06116a5aac52d222af",
            "class_name": "RelatedNodeInfo"
          }
        },
        "text": "The\nmost important thing is not to let fundraising get you down.  Startups\nlive or die on morale.  If you let the difficulty of raising money\ndestroy your morale, it will become a self-fulfilling prophecy.\nBootstrapping (= Consulting)Some would-be founders may by now be thinking, why deal with investors\nat all?  If raising money is so painful, why do it?One answer to that is obvious: because you need money to live on.\nIt's a fine idea in principle to finance your startup with its own\nrevenues, but you can't create instant customers.  Whatever you\nmake, you have to sell a certain amount to break even.  It will\ntake time to grow your sales to that point, and it's hard to predict,\ntill you try, how long it will take.We could not have bootstrapped Viaweb, for example.  We charged\nquite a lot for our software\u2014about $140 per user per month\u2014but\nit was at least a year before our revenues would have covered even\nour paltry costs.  We didn't have enough saved to live on for a\nyear.If you factor out the \"bootstrapped\" companies that were actually\nfunded by their founders through savings or a day job, the remainder\neither (a) got really lucky, which is hard to do on demand, or (b)\nbegan life as consulting companies and gradually transformed\nthemselves into product companies.Consulting is the only option you can count on.  But consulting is\nfar from free money.  It's not as painful as raising money from\ninvestors, perhaps, but the pain is spread over a longer period.\nYears, probably.  And for many types of startup, that delay could\nbe fatal.  If you're working on something so unusual that no one\nelse is likely to think of it, you can take your time.  Joshua\nSchachter gradually built Delicious on the side while working on\nWall Street.  He got away with it because no one else realized it\nwas a good idea.  But if you were building something as obviously\nnecessary as online store software at about the same time as Viaweb,\nand you were working on it on the side while spending most of your\ntime on client work, you were not in a good position.Bootstrapping sounds great in principle, but this apparently verdant\nterritory is one from which few startups emerge alive.  The mere\nfact that bootstrapped startups tend to be famous on that account\nshould set off alarm bells.  If it worked so well, it would be the\nnorm.\n[3]\nBootstrapping may get easier, because starting a company is getting\ncheaper.  But I don't think we'll ever reach the point where most\nstartups can do without outside funding.  Technology tends to\nget dramatically cheaper, but living expenses don't.The upshot is, you can choose your pain: either the short, sharp\npain of raising money, or the chronic ache of consulting.  For a\ngiven total amount of pain, raising money is the better choice,\nbecause new technology is usually more valuable now than later.But although for most startups raising money will be the lesser\nevil, it's still a pretty big evil\u2014so big that it can easily kill\nyou.  Not merely in the obvious sense that if you fail to raise\nmoney you might have to shut the company down, but because the\nprocess of raising money itself can kill you.To survive it you need a set of techniques mostly\northogonal to the ones used in convincing investors, just as mountain\nclimbers need to know survival techniques that are mostly orthogonal\nto those used in physically getting up and down mountains.\n1. Have low expectations.The reason raising money destroys so many startups' morale is not\nsimply that it's hard, but that it's so much harder than they\nexpected.  What kills you is the disappointment.  And the lower\nyour expectations, the harder it is to be disappointed.Startup founders tend to be optimistic.  This can work well in\ntechnology, at least some of the time, but it's the wrong way to\napproach raising money.  Better to assume investors will always let\nyou down.  Acquirers too, while we're at it.  At YC one of our\nsecondary mantras is \"Deals fall through.\"  No matter what deal\nyou have going on, assume it will fall through.  The predictive\npower of this simple rule is amazing.There will be a tendency, as a deal progresses, to start to believe\nit will happen, and then to depend on it happening.  You must resist\nthis.  Tie yourself to the mast.",
        "start_char_idx": 3467,
        "end_char_idx": 7723,
        "text_template": "{metadata_str}\n\n{content}",
        "metadata_template": "{key}: {value}",
        "metadata_seperator": "\n",
        "class_name": "TextNode"
      },
      "__type__": "1"
    },
    "43031e2b-2954-4bd9-b4e4-4d8ffb0479a7": {
      "__data__": {
        "id_": "43031e2b-2954-4bd9-b4e4-4d8ffb0479a7",
        "embedding": null,
        "metadata": {
          "source": "https://paulgraham.com/fundraising.html",
          "title": "A Fundraising Survival Guide",
          "language": null
        },
        "excluded_embed_metadata_keys": [],
        "excluded_llm_metadata_keys": [],
        "relationships": {
          "1": {
            "node_id": "f09998f0-322a-489e-92c7-82363ddc7e7c",
            "node_type": "4",
            "metadata": {
              "source": "https://paulgraham.com/fundraising.html",
              "title": "A Fundraising Survival Guide",
              "language": null
            },
            "hash": "646eaf8fdfa7e11ca2fe7bf76f711ca054e11d114744eae0e9717ca1197cdfce",
            "class_name": "RelatedNodeInfo"
          },
          "2": {
            "node_id": "0a0bda39-be3b-4651-baae-9bbae484b08b",
            "node_type": "1",
            "metadata": {
              "source": "https://paulgraham.com/fundraising.html",
              "title": "A Fundraising Survival Guide",
              "language": null
            },
            "hash": "493f08ed5cebaabe4866126be490fa3b50ca3b7a6135242793fe80cafbfe4106",
            "class_name": "RelatedNodeInfo"
          },
          "3": {
            "node_id": "cd53566e-098a-45a4-bdd9-7426609b5e7b",
            "node_type": "1",
            "metadata": {},
            "hash": "c87cbe84cc34351539921bf293a9f2e86d1846d725c3004235f7b0e653e767e1",
            "class_name": "RelatedNodeInfo"
          }
        },
        "text": "What kills you is the disappointment.  And the lower\nyour expectations, the harder it is to be disappointed.Startup founders tend to be optimistic.  This can work well in\ntechnology, at least some of the time, but it's the wrong way to\napproach raising money.  Better to assume investors will always let\nyou down.  Acquirers too, while we're at it.  At YC one of our\nsecondary mantras is \"Deals fall through.\"  No matter what deal\nyou have going on, assume it will fall through.  The predictive\npower of this simple rule is amazing.There will be a tendency, as a deal progresses, to start to believe\nit will happen, and then to depend on it happening.  You must resist\nthis.  Tie yourself to the mast.  This is what kills you.  Deals\ndo not have a trajectory like most other human interactions, where\nshared plans solidify linearly over time.  Deals often fall through\nat the last moment.  Often the other party doesn't really think\nabout what they want till the last moment.  So you can't use your\neveryday intuitions about shared plans as a guide.  When it comes\nto deals, you have to consciously turn them off and become\npathologically cynical.This is harder to do than it sounds.  It's very flattering when\neminent investors seem interested in funding you.  It's easy to\nstart to believe that raising money will be quick and straightforward.\nBut it hardly ever is.\n2. Keep working on your startup.It sounds obvious to say that you should keep working on your startup\nwhile raising money.  Actually this is hard to do.  Most startups\ndon't manage to.Raising money has a mysterious capacity to suck up all your attention.\nEven if you only have one meeting a day with investors, somehow\nthat one meeting will burn up your whole day.  It costs not just\nthe time of the actual meeting, but the time getting there and back,\nand the time preparing for it beforehand and thinking about it\nafterward.The best way to survive the distraction of meeting with investors\nis probably to partition the company: to pick one founder to deal\nwith investors while the others keep the company going.  This works\nbetter when a startup has 3 founders than 2, and better when the\nleader of the company is not also the lead developer.  In the best\ncase, the company keeps moving forward at about half speed.That's the best case, though.  More often than not the company comes\nto a standstill while raising money.  And that is dangerous for so\nmany reasons.  Raising money always takes longer than you expect.\nWhat seems like it's going to be a 2 week interruption turns into\na 4 month interruption.  That can be very demoralizing.  And worse\nstill, it can make you less attractive to investors.  They want to\ninvest in companies that are dynamic.  A company that hasn't done\nanything new in 4 months doesn't seem dynamic, so they start to\nlose interest.  Investors rarely grasp this, but much of what\nthey're responding to when they lose interest in a startup is the\ndamage done by their own indecision.The solution: put the startup first.  Fit meetings with investors\ninto the spare moments in your development schedule, rather than\ndoing development in the spare moments between meetings with\ninvestors.  If you keep the company moving forward\u2014releasing new\nfeatures, increasing traffic, doing deals, getting written \nabout\u2014those investor meetings are more likely to be productive.  Not just\nbecause your startup will seem more alive, but also because it will\nbe better for your own morale, which is one of the main ways investors\njudge you.\n3. Be conservative.As conditions get worse, the optimal strategy becomes more conservative.\nWhen things go well you can take risks; when things are bad you\nwant to play it safe.I advise approaching fundraising as if it were always going badly.\nThe reason is that between your ability to delude yourself and the\nwildly unstable nature of the system you're dealing with, things\nprobably either already are or could easily become much worse than\nthey seem.What I tell most startups we fund is that if someone reputable\noffers you funding on reasonable terms, take it.  There have been\nstartups that ignored this advice and got away with it\u2014startups\nthat ignored a good offer in the hope of getting a better one, and\nactually did.  But in the same position I'd give the same advice\nagain.",
        "start_char_idx": 7022,
        "end_char_idx": 11329,
        "text_template": "{metadata_str}\n\n{content}",
        "metadata_template": "{key}: {value}",
        "metadata_seperator": "\n",
        "class_name": "TextNode"
      },
      "__type__": "1"
    },
    "cd53566e-098a-45a4-bdd9-7426609b5e7b": {
      "__data__": {
        "id_": "cd53566e-098a-45a4-bdd9-7426609b5e7b",
        "embedding": null,
        "metadata": {
          "source": "https://paulgraham.com/fundraising.html",
          "title": "A Fundraising Survival Guide",
          "language": null
        },
        "excluded_embed_metadata_keys": [],
        "excluded_llm_metadata_keys": [],
        "relationships": {
          "1": {
            "node_id": "f09998f0-322a-489e-92c7-82363ddc7e7c",
            "node_type": "4",
            "metadata": {
              "source": "https://paulgraham.com/fundraising.html",
              "title": "A Fundraising Survival Guide",
              "language": null
            },
            "hash": "646eaf8fdfa7e11ca2fe7bf76f711ca054e11d114744eae0e9717ca1197cdfce",
            "class_name": "RelatedNodeInfo"
          },
          "2": {
            "node_id": "43031e2b-2954-4bd9-b4e4-4d8ffb0479a7",
            "node_type": "1",
            "metadata": {
              "source": "https://paulgraham.com/fundraising.html",
              "title": "A Fundraising Survival Guide",
              "language": null
            },
            "hash": "2d529ee32ee0c7e3345726449106c9dafb1699c2095cf07695deda1512a9fa41",
            "class_name": "RelatedNodeInfo"
          },
          "3": {
            "node_id": "cb1b26e0-eca8-4753-950d-aa822c6c3948",
            "node_type": "1",
            "metadata": {},
            "hash": "e4180cf43c4a53ad420e08e537214f1fec94d8601c1335861897d4d711cc344b",
            "class_name": "RelatedNodeInfo"
          }
        },
        "text": "3. Be conservative.As conditions get worse, the optimal strategy becomes more conservative.\nWhen things go well you can take risks; when things are bad you\nwant to play it safe.I advise approaching fundraising as if it were always going badly.\nThe reason is that between your ability to delude yourself and the\nwildly unstable nature of the system you're dealing with, things\nprobably either already are or could easily become much worse than\nthey seem.What I tell most startups we fund is that if someone reputable\noffers you funding on reasonable terms, take it.  There have been\nstartups that ignored this advice and got away with it\u2014startups\nthat ignored a good offer in the hope of getting a better one, and\nactually did.  But in the same position I'd give the same advice\nagain.  Who knows how many bullets were in the gun they were playing\nRussian roulette with?Corollary: if an investor seems interested, don't just let them\nsit. You can't assume someone interested in investing will stay\ninterested.  In fact, you can't even tell (they can't even tell)\nif they're really interested till you try to convert that interest\ninto money.  So if you have hot prospect, either close them now or\nwrite them off.  And unless you already have enough funding, that\nreduces to: close them now.Startups don't win by getting great funding rounds, but by making\ngreat products.  So finish raising money and get\nback to work.\n4. Be flexible.There are two questions VCs ask that you shouldn't answer: \"Who\nelse are you talking to?\" and \"How much are you trying to raise?\"VCs don't expect you to answer the first question. They ask it just\nin case. \n[4]\nThey do seem to expect an answer to the second.  But\nI don't think you should just tell them a number.  Not as a way to\nplay games with them, but because you shouldn't have a fixed\namount you need to raise.The custom of a startup needing a fixed amount of funding is an\nobsolete one left over from the days when startups were more\nexpensive.  A company that needed to build a factory or hire 50\npeople obviously needed to raise a certain minimum amount.  But few\ntechnology startups are in that position today.We advise startups to tell investors there are several different\nroutes they could take depending on how much they raised.  As little\nas $50k could pay for food and rent for the founders for a year.\nA couple hundred thousand would let them get office space and hire\nsome smart people they know from school.  A couple million would\nlet them really blow this thing out.  The message (and not just the\nmessage, but the fact) should be: we're going to succeed no matter\nwhat.  Raising more money just lets us do it faster.If you're raising an angel round, the size of the round can even\nchange on the fly.  In fact, it's just as well to make the round\nsmall initially, then expand as needed, rather than trying to raise\na large round and risk losing the investors you already have if you\ncan't raise the full amount.  You may even want to do a \"rolling\nclose,\" where the round has no predetermined size, but instead you\nsell stock to investors one at a time as they say yes.  That helps\nbreak deadlocks, because you can start as soon as the first one\nis ready to buy. \n[5]\n5. Be independent.A startup with a couple founders in their early twenties can have\nexpenses so low that they could be profitable on\nas little as $2000 per month.  That's negligible as corporate\nrevenues go, but the effect on your morale and your bargaining\nposition is anything but.  At YC we use the phrase \"ramen profitable\"\nto describe the situation where you're making just enough to pay\nyour living expenses.  Once you cross into ramen profitable,\neverything changes.  You may still need investment to make it big,\nbut you don't need it this month.You can't plan when you start a startup how long\nit will take to become profitable.  But if you find yourself in a\nposition where a little more effort expended on sales would carry\nyou over the threshold of ramen profitable, do it.Investors like it when you're ramen profitable.",
        "start_char_idx": 10545,
        "end_char_idx": 14600,
        "text_template": "{metadata_str}\n\n{content}",
        "metadata_template": "{key}: {value}",
        "metadata_seperator": "\n",
        "class_name": "TextNode"
      },
      "__type__": "1"
    },
    "cb1b26e0-eca8-4753-950d-aa822c6c3948": {
      "__data__": {
        "id_": "cb1b26e0-eca8-4753-950d-aa822c6c3948",
        "embedding": null,
        "metadata": {
          "source": "https://paulgraham.com/fundraising.html",
          "title": "A Fundraising Survival Guide",
          "language": null
        },
        "excluded_embed_metadata_keys": [],
        "excluded_llm_metadata_keys": [],
        "relationships": {
          "1": {
            "node_id": "f09998f0-322a-489e-92c7-82363ddc7e7c",
            "node_type": "4",
            "metadata": {
              "source": "https://paulgraham.com/fundraising.html",
              "title": "A Fundraising Survival Guide",
              "language": null
            },
            "hash": "646eaf8fdfa7e11ca2fe7bf76f711ca054e11d114744eae0e9717ca1197cdfce",
            "class_name": "RelatedNodeInfo"
          },
          "2": {
            "node_id": "cd53566e-098a-45a4-bdd9-7426609b5e7b",
            "node_type": "1",
            "metadata": {
              "source": "https://paulgraham.com/fundraising.html",
              "title": "A Fundraising Survival Guide",
              "language": null
            },
            "hash": "16c7b41552ebb91b31be1353403397534bf8991bf45a558e828dfdfc62971b33",
            "class_name": "RelatedNodeInfo"
          },
          "3": {
            "node_id": "c3838f41-3cad-4f29-8fcf-90185558d3b4",
            "node_type": "1",
            "metadata": {},
            "hash": "8a085f630214988fb463466dec51b09808197cd3634dcfee73239419053f4af1",
            "class_name": "RelatedNodeInfo"
          }
        },
        "text": "[5]\n5. Be independent.A startup with a couple founders in their early twenties can have\nexpenses so low that they could be profitable on\nas little as $2000 per month.  That's negligible as corporate\nrevenues go, but the effect on your morale and your bargaining\nposition is anything but.  At YC we use the phrase \"ramen profitable\"\nto describe the situation where you're making just enough to pay\nyour living expenses.  Once you cross into ramen profitable,\neverything changes.  You may still need investment to make it big,\nbut you don't need it this month.You can't plan when you start a startup how long\nit will take to become profitable.  But if you find yourself in a\nposition where a little more effort expended on sales would carry\nyou over the threshold of ramen profitable, do it.Investors like it when you're ramen profitable.  It shows you've\nthought about making money, instead of just working on amusing\ntechnical problems; it shows you have the discipline to keep your\nexpenses low; but above all, it means you don't need them.There is nothing investors like more than a startup that seems like\nit's going to succeed even without them.  Investors like it when\nthey can help a startup, but they don't like startups that would\ndie without that help.At YC we spend a lot of time trying to predict how the startups we've\nfunded will do, because we're trying to learn how to pick winners.\nWe've now watched the trajectories of so many startups that we're\ngetting better at predicting them.  And when we're talking\nabout startups we think are likely to succeed, what we find ourselves\nsaying is things like \"Oh, those guys can take care of themselves.\nThey'll be fine.\" Not \"those guys are really smart\" or\n\"those guys are working on a great idea.\"\n[6]\nWhen we predict good outcomes for startups, the qualities\nthat come up in the supporting arguments are toughness, adaptability,\ndetermination.  Which means to the extent we're correct, those are\nthe qualities you need to win.Investors know this, at least unconsciously.   The reason they like\nit when you don't need them is not simply that they like what they\ncan't have, but because that quality is what makes founders succeed.Sam Altman \nhas it.  You could parachute him into an island full of\ncannibals and come back in 5 years and he'd be the king.  If you're\nSam Altman, you don't have to be profitable to convey to investors\nthat you'll succeed with or without them.  (He wasn't, and he did.)\nNot everyone has Sam's deal-making ability.  I myself don't.  But\nif you don't, you can let the numbers speak for you.\n6. Don't take rejection personally.Getting rejected by investors can make you start to doubt yourself.\nAfter all, they're more experienced than you.  If they think your\nstartup is lame, aren't they probably right?Maybe, maybe not.  The way to handle rejection is with precision.\nYou shouldn't simply ignore rejection.  It might mean something.\nBut you shouldn't automatically get demoralized either.To understand what rejection means, you have to understand first\nof all how common it is.  Statistically, the average VC is a rejection\nmachine.  David Hornik, a partner at August, told me:\n\n  The numbers for me ended up being something like 500 to 800 plans\n  received and read, somewhere between 50 and 100 initial 1 hour\n  meetings held, about 20 companies that I got interested in, about\n  5 that I got serious about and did a bunch of work, 1 to 2 deals\n  done in a year.  So the odds are against you.  You\n  may be a great entrepreneur, working on interesting stuff, etc.\n  but it is still incredibly unlikely that you get funded.\n\nThis is less true with angels, but VCs reject practically everyone.\nThe structure of their business means a partner does at most 2 new\ninvestments a year, no matter how many good startups approach him.In addition to the odds being terrible, the average investor is,\nas I mentioned, a pretty bad judge of startups.  It's harder to\njudge startups than most other things, because great startup ideas\ntend to seem wrong. A good startup idea has to be not just good but\nnovel.",
        "start_char_idx": 13764,
        "end_char_idx": 17851,
        "text_template": "{metadata_str}\n\n{content}",
        "metadata_template": "{key}: {value}",
        "metadata_seperator": "\n",
        "class_name": "TextNode"
      },
      "__type__": "1"
    },
    "c3838f41-3cad-4f29-8fcf-90185558d3b4": {
      "__data__": {
        "id_": "c3838f41-3cad-4f29-8fcf-90185558d3b4",
        "embedding": null,
        "metadata": {
          "source": "https://paulgraham.com/fundraising.html",
          "title": "A Fundraising Survival Guide",
          "language": null
        },
        "excluded_embed_metadata_keys": [],
        "excluded_llm_metadata_keys": [],
        "relationships": {
          "1": {
            "node_id": "f09998f0-322a-489e-92c7-82363ddc7e7c",
            "node_type": "4",
            "metadata": {
              "source": "https://paulgraham.com/fundraising.html",
              "title": "A Fundraising Survival Guide",
              "language": null
            },
            "hash": "646eaf8fdfa7e11ca2fe7bf76f711ca054e11d114744eae0e9717ca1197cdfce",
            "class_name": "RelatedNodeInfo"
          },
          "2": {
            "node_id": "cb1b26e0-eca8-4753-950d-aa822c6c3948",
            "node_type": "1",
            "metadata": {
              "source": "https://paulgraham.com/fundraising.html",
              "title": "A Fundraising Survival Guide",
              "language": null
            },
            "hash": "af51c25373b3e72e3514a135bcc09d61947dc270846c95f3dd481f553a4757f7",
            "class_name": "RelatedNodeInfo"
          },
          "3": {
            "node_id": "13568fa7-93fb-430e-8b53-99d8fdcdc77b",
            "node_type": "1",
            "metadata": {},
            "hash": "fe1f7c599c20c116ef67ea812e2f8432268b8f0acf8db9256c0040773bf0c6de",
            "class_name": "RelatedNodeInfo"
          }
        },
        "text": "So the odds are against you.  You\n  may be a great entrepreneur, working on interesting stuff, etc.\n  but it is still incredibly unlikely that you get funded.\n\nThis is less true with angels, but VCs reject practically everyone.\nThe structure of their business means a partner does at most 2 new\ninvestments a year, no matter how many good startups approach him.In addition to the odds being terrible, the average investor is,\nas I mentioned, a pretty bad judge of startups.  It's harder to\njudge startups than most other things, because great startup ideas\ntend to seem wrong. A good startup idea has to be not just good but\nnovel.  And to be both good and novel, an idea probably has to seem\nbad to most people, or someone would already be doing it and it\nwouldn't be novel.That makes judging startups harder than most other things one judges.\nYou have to be an intellectual contrarian to be a good startup\ninvestor.  That's a problem for VCs, most of whom are not particularly\nimaginative.  VCs are mostly money guys, not people who make things.\n[7]\nAngels are better at appreciating novel ideas, because most\nwere founders themselves.So when you get a rejection, use the data that's in it, and not what's\nnot.  If an investor gives you specific reasons for not investing,\nlook at your startup and ask if they're right.  If they're real\nproblems, fix them.  But don't just take their word for it.  You're\nsupposed to be the domain expert; you have to decide.Though a rejection doesn't necessarily tell you anything about your\nstartup, it does suggest your pitch could be improved.  Figure out\nwhat's not working and change it.  Don't just think \"investors are\nstupid.\"  Often they are, but figure out precisely where you lose\nthem.Don't let rejections pile up as a depressing, undifferentiated heap.\nSort them and analyze them, and then instead of thinking \"no one\nlikes us,\" you'll know precisely how big a problem you have, and\nwhat to do about it.\n7. Be able to downshift into consulting (if appropriate).Consulting, as I mentioned, is a dangerous way to finance a startup.\nBut it's better than dying.  It's a bit like anaerobic respiration:\nnot the optimum solution for the long term, but it can save you\nfrom an immediate threat.  If you're having trouble raising money\nfrom investors at all, it could save you to be able to shift\ntoward consulting.This works better for some startups than others.  It wouldn't have\nbeen a natural fit for, say, Google, but if your company was making\nsoftware for building web sites, you could degrade fairly gracefully\ninto consulting by building sites for clients with it.So long as you were careful not to get sucked permanently into\nconsulting, this could even have advantages.  You'd understand your\nusers well if you were using the software for them.  Plus as a\nconsulting company you might be able to get big-name users using\nyour software that you wouldn't have gotten as a product company.At Viaweb we were forced to operate like a consulting company\ninitially, because we were so desperate for users that we'd offer\nto build merchants' sites for them if they'd sign up. \nBut we never charged for such work, because we didn't want them to\nstart treating us like actual consultants, and calling us every\ntime they wanted something changed on their site.  We knew we had\nto stay a product company, because only\nthat scales.\n8. Avoid inexperienced investors.Though novice investors seem unthreatening they can be the most\ndangerous sort, because they're so nervous.  Especially in\nproportion to the amount they invest.  Raising $20,000 from a first-time\nangel investor can be as much work as raising $2 million from\na VC fund.Their lawyers are generally inexperienced too.  But while the\ninvestors can admit they don't know what they're doing, their lawyers\ncan't.  One YC startup negotiated terms for a tiny round with\nan angel, only to receive a 70-page agreement from his lawyer.  And\nsince the lawyer could never admit, in front of his client, that\nhe'd screwed up, he instead had to insist on retaining all the\ndraconian terms in it, so the deal fell through.Of course, someone has to take money from novice investors, or there\nwould never be any experienced ones.",
        "start_char_idx": 17220,
        "end_char_idx": 21435,
        "text_template": "{metadata_str}\n\n{content}",
        "metadata_template": "{key}: {value}",
        "metadata_seperator": "\n",
        "class_name": "TextNode"
      },
      "__type__": "1"
    },
    "13568fa7-93fb-430e-8b53-99d8fdcdc77b": {
      "__data__": {
        "id_": "13568fa7-93fb-430e-8b53-99d8fdcdc77b",
        "embedding": null,
        "metadata": {
          "source": "https://paulgraham.com/fundraising.html",
          "title": "A Fundraising Survival Guide",
          "language": null
        },
        "excluded_embed_metadata_keys": [],
        "excluded_llm_metadata_keys": [],
        "relationships": {
          "1": {
            "node_id": "f09998f0-322a-489e-92c7-82363ddc7e7c",
            "node_type": "4",
            "metadata": {
              "source": "https://paulgraham.com/fundraising.html",
              "title": "A Fundraising Survival Guide",
              "language": null
            },
            "hash": "646eaf8fdfa7e11ca2fe7bf76f711ca054e11d114744eae0e9717ca1197cdfce",
            "class_name": "RelatedNodeInfo"
          },
          "2": {
            "node_id": "c3838f41-3cad-4f29-8fcf-90185558d3b4",
            "node_type": "1",
            "metadata": {
              "source": "https://paulgraham.com/fundraising.html",
              "title": "A Fundraising Survival Guide",
              "language": null
            },
            "hash": "62f1c36b5941635863bd9f861d10efc52d1147fee82e04cc8e077c8a59c10a49",
            "class_name": "RelatedNodeInfo"
          },
          "3": {
            "node_id": "0203fb4b-d32c-4988-9246-c2efb8d8ff53",
            "node_type": "1",
            "metadata": {},
            "hash": "fda14f30c739881108d7edc84ad2c3a638a932b49fe659237682e2a6179555ee",
            "class_name": "RelatedNodeInfo"
          }
        },
        "text": "8. Avoid inexperienced investors.Though novice investors seem unthreatening they can be the most\ndangerous sort, because they're so nervous.  Especially in\nproportion to the amount they invest.  Raising $20,000 from a first-time\nangel investor can be as much work as raising $2 million from\na VC fund.Their lawyers are generally inexperienced too.  But while the\ninvestors can admit they don't know what they're doing, their lawyers\ncan't.  One YC startup negotiated terms for a tiny round with\nan angel, only to receive a 70-page agreement from his lawyer.  And\nsince the lawyer could never admit, in front of his client, that\nhe'd screwed up, he instead had to insist on retaining all the\ndraconian terms in it, so the deal fell through.Of course, someone has to take money from novice investors, or there\nwould never be any experienced ones.  But if you do, either (a)\ndrive the process yourself, including supplying the \npaperwork, or\n(b) use them only to fill up a larger round led by someone else.\n9. Know where you stand.The most dangerous thing about investors is their indecisiveness.\nThe worst case scenario is the long no, the no that comes after\nmonths of meetings.  Rejections from investors are like design\nflaws: inevitable, but much less costly if you discover them early.So while you're talking to investors, constantly look for signs of\nwhere you stand.  How likely are they to offer you a term sheet?\nWhat do they have to be convinced of first?  You shouldn't necessarily\nalways be asking these questions outright\u2014that could get \nannoying\u2014but you should always be collecting data about them.Investors tend to resist committing except to the extent you push\nthem to.  It's in their interest to collect the maximum amount of\ninformation while making the minimum number of decisions.  The best\nway to force them to act is, of course, competing investors.  But\nyou can also apply some force by focusing the discussion:\nby asking what specific questions they need answered to make\nup their minds, and then answering them.  If you get through several\nobstacles and they keep raising new ones, assume that ultimately\nthey're going to flake.You have to be disciplined when collecting data about investors'\nintentions.  Otherwise their desire to lead you on will combine\nwith your own desire to be led on to produce completely inaccurate\nimpressions.Use the data to weight your strategy.\nYou'll probably be talking to several investors.  Focus on the ones\nthat are most likely to say yes.  The value of a potential investor\nis a combination of how good it would be if they said yes, and how\nlikely they are to say it.  Put the most weight on the second factor.\nPartly because the most important quality in an investor is simply\ninvesting.  But also because, as I mentioned, the biggest factor\nin investors' opinion of you is other investors' opinion of you.\nIf you're talking to several investors and you manage to get one\nover the threshold of saying yes, it will make the others much more\ninterested.  So you're not sacrificing the lukewarm investors if\nyou focus on the hot ones; convincing the hot investors is the best\nway to convince the lukewarm ones.\nFutureI'm hopeful things won't always be so awkward. I hope that as startups\nget cheaper and the number of investors increases, raising money\nwill become, if not easy, at least straightforward.In the meantime, the brokenness of the funding process offers a big\nopportunity.  Most investors have no idea how dangerous they are.\nThey'd be surprised to hear that raising money from them is something\nthat has to be treated as a threat to a company's survival.  They\njust think they need a little more information to make up their\nminds.  They don't get that there are 10 other investors who also\nwant a little more information, and that the process of talking to\nthem all can bring a startup to a standstill for months.Because investors don't understand the cost of dealing with them,\nthey don't realize how much room there is for a potential competitor\nto undercut them.  I know from my own experience how much faster\ninvestors could decide, because we've brought our own time down to\n20 minutes (5 minutes of reading an application plus a 10 minute\ninterview plus 5 minutes of discussion).  If you were investing\nmore money you'd want to take longer, of course.",
        "start_char_idx": 20591,
        "end_char_idx": 24920,
        "text_template": "{metadata_str}\n\n{content}",
        "metadata_template": "{key}: {value}",
        "metadata_seperator": "\n",
        "class_name": "TextNode"
      },
      "__type__": "1"
    },
    "0203fb4b-d32c-4988-9246-c2efb8d8ff53": {
      "__data__": {
        "id_": "0203fb4b-d32c-4988-9246-c2efb8d8ff53",
        "embedding": null,
        "metadata": {
          "source": "https://paulgraham.com/fundraising.html",
          "title": "A Fundraising Survival Guide",
          "language": null
        },
        "excluded_embed_metadata_keys": [],
        "excluded_llm_metadata_keys": [],
        "relationships": {
          "1": {
            "node_id": "f09998f0-322a-489e-92c7-82363ddc7e7c",
            "node_type": "4",
            "metadata": {
              "source": "https://paulgraham.com/fundraising.html",
              "title": "A Fundraising Survival Guide",
              "language": null
            },
            "hash": "646eaf8fdfa7e11ca2fe7bf76f711ca054e11d114744eae0e9717ca1197cdfce",
            "class_name": "RelatedNodeInfo"
          },
          "2": {
            "node_id": "13568fa7-93fb-430e-8b53-99d8fdcdc77b",
            "node_type": "1",
            "metadata": {
              "source": "https://paulgraham.com/fundraising.html",
              "title": "A Fundraising Survival Guide",
              "language": null
            },
            "hash": "a406cc562d69cb96adea8970b99971c395d7eeff23f98bb824b19997d6d22fa7",
            "class_name": "RelatedNodeInfo"
          },
          "3": {
            "node_id": "7505963f-f930-4e08-9d29-d657eeffde2e",
            "node_type": "1",
            "metadata": {},
            "hash": "a4fa7010729b152c4c649b2b507db96044bc40bb7c6e8cc945c5409b26dc5a68",
            "class_name": "RelatedNodeInfo"
          }
        },
        "text": "Most investors have no idea how dangerous they are.\nThey'd be surprised to hear that raising money from them is something\nthat has to be treated as a threat to a company's survival.  They\njust think they need a little more information to make up their\nminds.  They don't get that there are 10 other investors who also\nwant a little more information, and that the process of talking to\nthem all can bring a startup to a standstill for months.Because investors don't understand the cost of dealing with them,\nthey don't realize how much room there is for a potential competitor\nto undercut them.  I know from my own experience how much faster\ninvestors could decide, because we've brought our own time down to\n20 minutes (5 minutes of reading an application plus a 10 minute\ninterview plus 5 minutes of discussion).  If you were investing\nmore money you'd want to take longer, of course.  But if we can\ndecide in 20 minutes, should it take anyone longer than a couple\ndays?Opportunities like this don't sit unexploited forever, even in an\nindustry as conservative as venture capital.  So\neither existing investors will start to make up their minds faster,\nor new investors will emerge who do.In the meantime founders have to treat raising money as a dangerous\nprocess.  Fortunately, I can fix the biggest danger right here.\nThe biggest danger is surprise.  It's that startups will underestimate\nthe difficulty of raising money\u2014that they'll cruise through all\nthe initial steps, but when they turn to raising money they'll find\nit surprisingly hard, get demoralized, and give up. So I'm telling\nyou in advance: raising money is hard.Notes[1]\nWhen investors can't make up their minds, they sometimes\ndescribe it as if it were a property of the startup.  \"You're too\nearly for us,\" they sometimes say.  But which of them, if they were\ntaken back in a time machine to the hour Google was founded, wouldn't\noffer to invest at any valuation the founders chose?  An hour old\nis not too early if it's the right startup.  What \"you're too early\"\nreally means is \"we can't figure out yet whether you'll succeed.\"\n[2]\nInvestors influence one another both directly and indirectly.\nThey influence one another directly through the \"buzz\" that surrounds\na hot startup.  But they also influence one another indirectly\nthrough the founders.  When a lot of investors are interested in\nyou, it increases your confidence in a way that makes you much more\nattractive to investors.No VC will admit they're influenced by buzz.  Some genuinely aren't.\nBut there are few who can say they're not influenced by confidence.[3]\nOne VC who read this essay wrote:\"We try to avoid companies that got bootstrapped with consulting. \nIt creates very bad behaviors/instincts that are hard to erase \nfrom a company's culture.\"[4]\nThe optimal way to answer the first question is to say that\nit would be improper to name names, while simultaneously implying\nthat you're talking to a bunch of other VCs who are all about to\ngive you term sheets.  If you're the sort of person who understands\nhow to do that, go ahead.  If not, don't even try.  Nothing annoys\nVCs more than clumsy efforts to manipulate them.[5]\nThe disadvantage of expanding a round on the fly is that the\nvaluation is fixed at the start, so if you get a sudden rush of\ninterest, you may have to decide between turning some investors\naway and selling more of the company than you meant to.  That's a\ngood problem to have, however.[6]\nI wouldn't say that intelligence doesn't matter in startups.\nWe're only comparing YC startups, who've already made it over a\ncertain threshold.[7]\nBut not all are.  Though most VCs are suits at heart,\nthe most successful ones tend not to be.  Oddly enough,\nthe best VCs tend to be the least VC-like.\nThanks to Trevor Blackwell, David Hornik, Jessica Livingston,\nRobert Morris, and Fred Wilson for reading drafts of this.Russian Translation",
        "start_char_idx": 24035,
        "end_char_idx": 27932,
        "text_template": "{metadata_str}\n\n{content}",
        "metadata_template": "{key}: {value}",
        "metadata_seperator": "\n",
        "class_name": "TextNode"
      },
      "__type__": "1"
    },
    "7505963f-f930-4e08-9d29-d657eeffde2e": {
      "__data__": {
        "id_": "7505963f-f930-4e08-9d29-d657eeffde2e",
        "embedding": null,
        "metadata": {
          "source": "https://paulgraham.com/revolution.html",
          "title": "A Local Revolution?",
          "language": null
        },
        "excluded_embed_metadata_keys": [],
        "excluded_llm_metadata_keys": [],
        "relationships": {
          "1": {
            "node_id": "f53eff25-b0df-4569-a4dd-285ec231f4cb",
            "node_type": "4",
            "metadata": {
              "source": "https://paulgraham.com/revolution.html",
              "title": "A Local Revolution?",
              "language": null
            },
            "hash": "2979787a746e07feda3faa33ff260cb2cd0d4539ea7358a1e58ef8a99d07676c",
            "class_name": "RelatedNodeInfo"
          },
          "2": {
            "node_id": "0203fb4b-d32c-4988-9246-c2efb8d8ff53",
            "node_type": "1",
            "metadata": {
              "source": "https://paulgraham.com/fundraising.html",
              "title": "A Fundraising Survival Guide",
              "language": null
            },
            "hash": "cd9ca9e73ff6e90883f56b7c03181b035df14675b6701a6d8200c8ef748521c7",
            "class_name": "RelatedNodeInfo"
          },
          "3": {
            "node_id": "69b88068-ebaa-40a0-8ac6-5ec2681a2ab1",
            "node_type": "1",
            "metadata": {},
            "hash": "8123320b8becb2cbd3505a01f3eab6e3b4992871b8cc1e185a64d9528378de06",
            "class_name": "RelatedNodeInfo"
          }
        },
        "text": "A Local Revolution?\n\nApril 2009Recently I realized I'd been holding two ideas in my head that would explode if combined.The first is that startups may represent a new economic phase, on the scale of the Industrial Revolution. I'm not sure of this, but there seems a decent chance it's true.  People are dramatically more \nproductive as founders or early employees of startups\u2014imagine how much less Larry and Sergey would have achieved if they'd gone to work for a big company\u2014and that scale of improvement can change social customs.The second idea is that startups are a type of business that flourishes in certain places that specialize in it\u2014that Silicon Valley specializes in startups in the same way Los Angeles specializes in movies, or New York in finance. [1]What if both are true?  What if startups are both a new economic phase and also a type of business that only flourishes in certain centers?If so, this revolution is going to be particularly revolutionary. All previous revolutions have spread.  Agriculture, cities, and industrialization all spread widely. If startups end up being like the movie business, with just a handful of centers and one dominant one, that's going to have novel consequences.There are already signs that startups may not spread particularly well.  The spread of startups seems to be proceeding slower than the spread of the Industrial Revolution, despite the fact that communication is so much faster now.Within a few decades of the founding of Boulton & Watt there were steam engines scattered over northern Europe and North America.  Industrialization didn't spread much beyond those regions for a while. It only spread to places where there was a strong middle class\u2014countries where a private citizen could make a fortune without having it confiscated. Otherwise it wasn't worth investing in factories.  But in a country with a strong middle class it was easy for industrial techniques to take root.  An individual mine or factory owner could decide to install a steam engine, and within a few years he could probably find someone local to make him one.  So steam engines spread fast.  And they spread widely, because the locations of mines and factories were determined by features like rivers, harbors, and sources of raw materials. \n [2]Startups don't seem to spread so well, partly because they're more a social than a technical phenomenon, and partly because they're not tied to geography.  An individual European manufacturer could import industrial techniques and they'd work fine.  This doesn't seem to work so well with startups: you need a community of expertise, as you do in the movie business.  [3]\n Plus there aren't the same forces driving startups to spread.  Once railroads or electric power grids were invented, every region had to have them.  An area without railroads or power was a rich potential market.  But this isn't true with startups.  There's no need for a Microsoft of France or Google of Germany.Governments may decide they want to encourage startups locally, but government policy can't call them into being the way a genuine need could.How will this all play out?  If I had to predict now, I'd say that startups will spread, but very slowly, because their spread will be driven not by government policies (which won't work) or by market need (which doesn't exist) but, to the extent that it happens at all, by the same random factors that have caused startup culture to spread thus far.  And such random factors will increasingly be outweighed by the pull of existing startup hubs.Silicon Valley is where it is because William Shockley wanted to move back to Palo Alto, where he grew up, and the experts he lured west to work with him liked it so much they stayed.  Seattle owes much of its position as a tech center to the same cause: Gates and Allen wanted to move home.  Otherwise Albuquerque might have Seattle's place in the rankings.  Boston is a tech center because it's the intellectual capital of the US and probably the world.  And if Battery Ventures hadn't turned down Facebook, Boston would be significantly bigger now on the startup radar screen.But of course it's not a coincidence that Facebook got funded in the Valley and not Boston.  There are more and bolder investors in Silicon Valley than in Boston, and even undergrads know it.Boston's case illustrates the difficulty you'd have establishing a new startup hub this late in the game.  If you wanted to create a startup hub by reproducing the way existing ones happened, the \nway to do it would be to establish a first-rate research university in a place so nice that rich people wanted to live there.  Then the town would be hospitable to both groups you need: both founders and investors.  That's the combination that yielded Silicon Valley.  But Silicon Valley didn't have Silicon Valley to compete with.",
        "start_char_idx": 0,
        "end_char_idx": 4854,
        "text_template": "{metadata_str}\n\n{content}",
        "metadata_template": "{key}: {value}",
        "metadata_seperator": "\n",
        "class_name": "TextNode"
      },
      "__type__": "1"
    },
    "69b88068-ebaa-40a0-8ac6-5ec2681a2ab1": {
      "__data__": {
        "id_": "69b88068-ebaa-40a0-8ac6-5ec2681a2ab1",
        "embedding": null,
        "metadata": {
          "source": "https://paulgraham.com/revolution.html",
          "title": "A Local Revolution?",
          "language": null
        },
        "excluded_embed_metadata_keys": [],
        "excluded_llm_metadata_keys": [],
        "relationships": {
          "1": {
            "node_id": "f53eff25-b0df-4569-a4dd-285ec231f4cb",
            "node_type": "4",
            "metadata": {
              "source": "https://paulgraham.com/revolution.html",
              "title": "A Local Revolution?",
              "language": null
            },
            "hash": "2979787a746e07feda3faa33ff260cb2cd0d4539ea7358a1e58ef8a99d07676c",
            "class_name": "RelatedNodeInfo"
          },
          "2": {
            "node_id": "7505963f-f930-4e08-9d29-d657eeffde2e",
            "node_type": "1",
            "metadata": {
              "source": "https://paulgraham.com/revolution.html",
              "title": "A Local Revolution?",
              "language": null
            },
            "hash": "b4193f923120d8ed264e5297ee11152433c61290fbb5105d649ca5fbedc6dc0c",
            "class_name": "RelatedNodeInfo"
          },
          "3": {
            "node_id": "941b9651-96c8-4cc3-9cfa-cd68b14a9910",
            "node_type": "1",
            "metadata": {},
            "hash": "b58f40f63ede9eb17ed3eeae7f41c7fb98afd648f65a6099452f2f19aa19e4a1",
            "class_name": "RelatedNodeInfo"
          }
        },
        "text": "Boston is a tech center because it's the intellectual capital of the US and probably the world.  And if Battery Ventures hadn't turned down Facebook, Boston would be significantly bigger now on the startup radar screen.But of course it's not a coincidence that Facebook got funded in the Valley and not Boston.  There are more and bolder investors in Silicon Valley than in Boston, and even undergrads know it.Boston's case illustrates the difficulty you'd have establishing a new startup hub this late in the game.  If you wanted to create a startup hub by reproducing the way existing ones happened, the \nway to do it would be to establish a first-rate research university in a place so nice that rich people wanted to live there.  Then the town would be hospitable to both groups you need: both founders and investors.  That's the combination that yielded Silicon Valley.  But Silicon Valley didn't have Silicon Valley to compete with.  If you tried now to create a startup hub by planting a great university in a nice place, it would have a harder time getting started, because many of the best startups it produced would be sucked away to existing startup hubs.Recently I suggested a potential shortcut: \npay startups to move.  Once you had enough good startups in one place, it would create a self-sustaining chain reaction.  Founders would start to move there without being paid, because that was where their peers were, and investors would appear too, because that was where the deals were.In practice I doubt any government would have the balls to try this, or the brains to do it right.  I didn't mean it as a practical suggestion, but more as an exploration of the lower bound of what it would take to create a startup hub deliberately.The most likely scenario is (1) that no government will successfully establish a startup hub, and (2) that the spread of startup culture will thus be driven by the random factors that have driven it so far, but (3) that these factors will be increasingly outweighed by the pull of existing startup hubs.  Result: this revolution, if it is one, will be unusually localized.\nNotes[1]\nThere are two very different types of startup: one kind that evolves naturally, and one kind that's called into being to \"commercialize\" a scientific discovery.  Most computer/software startups are now the first type, and most pharmaceutical startups the second.  When I talk about startups in this essay, I mean type I startups.  There is no difficulty making type II startups spread: all you have to do is fund medical research labs; commercializing whatever new discoveries the boffins throw off is as straightforward as building a new airport.  Type II startups neither require nor produce startup culture. But that means having type II startups won't get you type I startups.  Philadelphia is a case in point: lots of type II startups, but hardly any type I.Incidentally, Google may appear to be an instance of a type II startup, but it wasn't.  Google is not pagerank commercialized.  They could have used another algorithm and everything would have turned out the same.  What made Google Google is that they cared about doing search well at a critical point in the evolution of the web.[2]\n Watt didn't invent the steam engine.  His critical invention was a refinement that made steam engines dramatically more efficient: the separate condenser.  But that oversimplifies his role.  He had such a different attitude to the problem and approached it with such energy that he transformed the field.  Perhaps the most accurate way to put it would be to say that Watt reinvented the steam engine.[3]\nThe biggest counterexample here is Skype.  If you're doing\nsomething that would get shut down in the US, it becomes an \nadvantage to be located elsewhere.  That's why Kazaa took\nthe place of Napster.  And the expertise and connections the \nfounders gained from running Kazaa helped ensure the success\nof Skype.Thanks to Patrick Collison, Jessica Livingston, and Fred Wilson for reading drafts of this.",
        "start_char_idx": 3916,
        "end_char_idx": 7948,
        "text_template": "{metadata_str}\n\n{content}",
        "metadata_template": "{key}: {value}",
        "metadata_seperator": "\n",
        "class_name": "TextNode"
      },
      "__type__": "1"
    },
    "941b9651-96c8-4cc3-9cfa-cd68b14a9910": {
      "__data__": {
        "id_": "941b9651-96c8-4cc3-9cfa-cd68b14a9910",
        "embedding": null,
        "metadata": {
          "source": "https://paulgraham.com/bias.html",
          "title": "A Way to Detect Bias",
          "language": null
        },
        "excluded_embed_metadata_keys": [],
        "excluded_llm_metadata_keys": [],
        "relationships": {
          "1": {
            "node_id": "26604887-0847-45aa-aea2-bdc17b6461ff",
            "node_type": "4",
            "metadata": {
              "source": "https://paulgraham.com/bias.html",
              "title": "A Way to Detect Bias",
              "language": null
            },
            "hash": "0da60c96d3be317a69486e3230f470058f7eb967ffd8c41a4e645cb99edf5c99",
            "class_name": "RelatedNodeInfo"
          },
          "2": {
            "node_id": "69b88068-ebaa-40a0-8ac6-5ec2681a2ab1",
            "node_type": "1",
            "metadata": {
              "source": "https://paulgraham.com/revolution.html",
              "title": "A Local Revolution?",
              "language": null
            },
            "hash": "ae8f66ecac9fa1bc18261f619b8e79a1102d847e3882425437b3aa625c10970f",
            "class_name": "RelatedNodeInfo"
          },
          "3": {
            "node_id": "b2a9c38a-4134-4afc-8208-19f354cd3e67",
            "node_type": "1",
            "metadata": {},
            "hash": "62baffad336f6387bce68b7e76242fec5f5988b81e85a87423af8f97ddf5415b",
            "class_name": "RelatedNodeInfo"
          }
        },
        "text": "A Way to Detect Bias\n\nOctober 2015This will come as a surprise to a lot of people, but in some cases\nit's possible to detect bias in a selection process without knowing\nanything about the applicant pool.  Which is exciting because among\nother things it means third parties can use this technique to detect\nbias whether those doing the selecting want them to or not.You can use this technique whenever (a) you have at least\na random sample of the applicants that were selected, (b) their\nsubsequent performance is measured, and (c) the groups of\napplicants you're comparing have roughly equal distribution of ability.How does it work?  Think about what it means to be biased.  What\nit means for a selection process to be biased against applicants\nof type x is that it's harder for them to make it through.  Which\nmeans applicants of type x have to be better to get selected than\napplicants not of type x.\n[1]\nWhich means applicants of type x\nwho do make it through the selection process will outperform other\nsuccessful applicants.  And if the performance of all the successful\napplicants is measured, you'll know if they do.Of course, the test you use to measure performance must be a valid\none.  And in particular it must not be invalidated by the bias you're\ntrying to measure.\nBut there are some domains where performance can be measured, and\nin those detecting bias is straightforward. Want to know if the\nselection process was biased against some type of applicant?  Check\nwhether they outperform the others.  This is not just a heuristic\nfor detecting bias.  It's what bias means.For example, many suspect that venture capital firms are biased\nagainst female founders. This would be easy to detect: among their\nportfolio companies, do startups with female founders outperform\nthose without?  A couple months ago, one VC firm (almost certainly\nunintentionally) published a study showing bias of this type. First\nRound Capital found that among its portfolio companies, startups\nwith female founders outperformed\nthose without by 63%. \n[2]The reason I began by saying that this technique would come as a\nsurprise to many people is that we so rarely see analyses of this\ntype.  I'm sure it will come as a surprise to First Round that they\nperformed one. I doubt anyone there realized that by limiting their\nsample to their own portfolio, they were producing a study not of\nstartup trends but of their own biases when selecting companies.I predict we'll see this technique used more in the future.  The\ninformation needed to conduct such studies is increasingly available.\nData about who applies for things is usually closely guarded by the\norganizations selecting them, but nowadays data about who gets\nselected is often publicly available to anyone who takes the trouble\nto aggregate it.\nNotes[1]\nThis technique wouldn't work if the selection process looked\nfor different things from different types of applicants\u2014for\nexample, if an employer hired men based on their ability but women\nbased on their appearance.[2]\nAs Paul Buchheit points out, First Round excluded their most \nsuccessful investment, Uber, from the study.  And while it \nmakes sense to exclude outliers from some types of studies, \nstudies of returns from startup investing, which is all about \nhitting outliers, are not one of them.\nThanks to Sam Altman, Jessica Livingston, and Geoff Ralston for reading\ndrafts of this.Arabic TranslationSwedish Translation",
        "start_char_idx": 0,
        "end_char_idx": 3427,
        "text_template": "{metadata_str}\n\n{content}",
        "metadata_template": "{key}: {value}",
        "metadata_seperator": "\n",
        "class_name": "TextNode"
      },
      "__type__": "1"
    },
    "b2a9c38a-4134-4afc-8208-19f354cd3e67": {
      "__data__": {
        "id_": "b2a9c38a-4134-4afc-8208-19f354cd3e67",
        "embedding": null,
        "metadata": {
          "source": "https://paulgraham.com/klein.html",
          "title": "A Reply to Ezra Klein",
          "language": null
        },
        "excluded_embed_metadata_keys": [],
        "excluded_llm_metadata_keys": [],
        "relationships": {
          "1": {
            "node_id": "b3eaa467-6b24-495d-92c4-5a7b0713c147",
            "node_type": "4",
            "metadata": {
              "source": "https://paulgraham.com/klein.html",
              "title": "A Reply to Ezra Klein",
              "language": null
            },
            "hash": "84fbdf033eea8464adbe2e3eef82318f45006f6844ec9cf9469b53d9c3bf313d",
            "class_name": "RelatedNodeInfo"
          },
          "2": {
            "node_id": "941b9651-96c8-4cc3-9cfa-cd68b14a9910",
            "node_type": "1",
            "metadata": {
              "source": "https://paulgraham.com/bias.html",
              "title": "A Way to Detect Bias",
              "language": null
            },
            "hash": "53dddf9b5409553235f3d8f0d7080dae4043976acebefd97e0897439bc3efeed",
            "class_name": "RelatedNodeInfo"
          },
          "3": {
            "node_id": "b40a01ef-d941-48cc-b7d7-177cbffe3304",
            "node_type": "1",
            "metadata": {},
            "hash": "f8d8b57dc92386246ef7738bd1a2fcf57d2ec7dc512f5c558ad21cae3d821313",
            "class_name": "RelatedNodeInfo"
          }
        },
        "text": "A Reply to Ezra Klein\n\nJanuary 2016I thought perhaps it would be worthwhile to reply to \nwhat \nEzra Klein\nwrote about Economic Inequality. It's an \nimportant topic, and his seemed to be among the most thoughtful of \nthe responses.This is my best shot at a complete list of his points. As far as I\ncan tell, all 9 seem to be mistaken, in the sense of either being\nfalse or not affecting my argument.  But decide for yourself.1. He says I think startups are responsible for most economic\ninequality in the US. I don't think that. He thinks I do because\nI said \"startups are almost entirely a product of [the] period\"\nsince about 1980.  I don't see how saying startups are limited\nto some period implies I think they're responsible for most\nof the growth in inequality during it. \n[1]What I do think is that startups are responsible for a significant\nfraction of economic inequality. Anyone who wants to can see that\nfor themselves by looking at the Forbes 400.\n[2](I also think, though Ezra didn't talk about this, that startups\nwill be responsible for more inequality if other ways of getting\nrich are closed off.)2. He says the number of startups has been declining. In support\nof this he includes a graph with a line going down.  But though the\ngraph has the word \"startups\" on it, it is not a graph of the number\nof startups, but of all new businesses.As I've explained many times, startups are a tiny\nfraction of businesses. Most businesses are barber shops, gas\nstations, restaurants, and so on.  What his graph shows is that\nfewer of these are being started.  If you want to see the trend in\nstartups, one way to see it is by looking at the \ntrend in VC deals.Any graph of VC deals will show the trend has\nnot been downward. And most such graphs understate the\ngrowth in startups, because in the last 10 years the traditional VC\nseries A round has become a later stage investment.3. He says there is no observable relationship between startup\nformation and inequality.  The Economist\ndisagrees, saying founders and early employees of\nstartups \"represent the most significant concentration of business\nwealth in the world.\"Again, anyone can see this for themselves by looking at the Forbes\n400.4. He says it's not people who get rich from startups that are the\nproblem, but people who get rich from finance. It is the latter\n\"that this conversation is really about.\"But that is my point: that the public conversation\nabout this topic is way too sloppy, and that we should\nfocus not on crude statistical measures like economic inequality\nbut on the specific underlying components.  If you're angry that\npeople are making so much money in finance, then attack that,\nnot economic inequality.  Imagine how much more alarmed those who benefit from\nthe carried interest loophole would be if public attention were\nfocused specifically on that, rather than the harmlessly broad\ntarget of economic inequality.Though indeed Ezra is mistaken when he says the conversation is\nreally about finance.  Many of the most influential people who have\nwritten about the topic recently have been talking about economic\ninequality overall, not merely that caused by finance.  Piketty\nfor example clearly thinks great variation in wealth is in itself a problem.5. He says I'm attacking a strawman when I say that ending economic\ninequality would mean ending startups.  Other people have tried to\nclaim that too, so I replaced that sentence with:\n\n  Eliminating great variations in wealth would mean eliminating\n  startups.\n\nThis is not backpedalling, incidentally; this is a stronger claim\nthan I had in the original.  The median household net worth in the US is about 80k. It is common\nfor the stock of a successful startup founder to be worth a hundred\ntimes that, and not unheard of for it to be worth ten thousand times\nthat.The goals of eliminating great wealth disparities in your country\nand having startups in your country are fundamentally incompatible.\nIt might be possible to cram together these two very differently\nshaped jigsaw puzzle pieces, but it would require hacks as messy\nas have ever been tried in the history of taxation, and even then\nit probably wouldn't work.6. He says that Sweden has more startups than the US despite having\nlower economic inequality.  Though the article he links to is about\nnew businesses generally,\nnot startups, it is true that Sweden has a lot of actual startups per\ncapita.",
        "start_char_idx": 0,
        "end_char_idx": 4405,
        "text_template": "{metadata_str}\n\n{content}",
        "metadata_template": "{key}: {value}",
        "metadata_seperator": "\n",
        "class_name": "TextNode"
      },
      "__type__": "1"
    },
    "b40a01ef-d941-48cc-b7d7-177cbffe3304": {
      "__data__": {
        "id_": "b40a01ef-d941-48cc-b7d7-177cbffe3304",
        "embedding": null,
        "metadata": {
          "source": "https://paulgraham.com/klein.html",
          "title": "A Reply to Ezra Klein",
          "language": null
        },
        "excluded_embed_metadata_keys": [],
        "excluded_llm_metadata_keys": [],
        "relationships": {
          "1": {
            "node_id": "b3eaa467-6b24-495d-92c4-5a7b0713c147",
            "node_type": "4",
            "metadata": {
              "source": "https://paulgraham.com/klein.html",
              "title": "A Reply to Ezra Klein",
              "language": null
            },
            "hash": "84fbdf033eea8464adbe2e3eef82318f45006f6844ec9cf9469b53d9c3bf313d",
            "class_name": "RelatedNodeInfo"
          },
          "2": {
            "node_id": "b2a9c38a-4134-4afc-8208-19f354cd3e67",
            "node_type": "1",
            "metadata": {
              "source": "https://paulgraham.com/klein.html",
              "title": "A Reply to Ezra Klein",
              "language": null
            },
            "hash": "19be0a20cfecf5f0f655e2969c1d5e5827bc4173e4449a3746968ee860721a45",
            "class_name": "RelatedNodeInfo"
          },
          "3": {
            "node_id": "d0e5473f-48c9-4fd0-a8de-18a4c0f070d4",
            "node_type": "1",
            "metadata": {},
            "hash": "24901dca0dc9ea52c6e31e7225052b33e30374168fdadb6dcf827d947eb76836",
            "class_name": "RelatedNodeInfo"
          }
        },
        "text": "This is not backpedalling, incidentally; this is a stronger claim\nthan I had in the original.  The median household net worth in the US is about 80k. It is common\nfor the stock of a successful startup founder to be worth a hundred\ntimes that, and not unheard of for it to be worth ten thousand times\nthat.The goals of eliminating great wealth disparities in your country\nand having startups in your country are fundamentally incompatible.\nIt might be possible to cram together these two very differently\nshaped jigsaw puzzle pieces, but it would require hacks as messy\nas have ever been tried in the history of taxation, and even then\nit probably wouldn't work.6. He says that Sweden has more startups than the US despite having\nlower economic inequality.  Though the article he links to is about\nnew businesses generally,\nnot startups, it is true that Sweden has a lot of actual startups per\ncapita. That means they're willing to tolerate great variations in\nwealth, which seems the smart choice.People trying to use Sweden as a counterexample seem to be implying\nthat I think economic inequality is a prerequisite for startups.\nActually the prerequisite is not high current economic inequality\nbut the willingness to tolerate it in the future.  7. He seems to disagree with my claim that the growth of technology\nwill cause increasing economic inequality.  \nHis argument is that since governments have figured\nout how to deal with increasing variation in productivity in the\npast, they will in the future. But (a) governments have in fact\nmade some truly disastrous decisions in this department in the past,\nand (b) when something grows exponentially, the past is not much\nuse as a guide.Plus, as I explained in The Refragmentation, \nwe got a free pass for\na big chunk of the 20th century because a unique combination of\ncircumstances suppressed the effects of increasing variation in\nproductivity.Ezra says the Silicon Valley elite pay higher taxes now than in the\n18th century and yet still invent things.  But this doesn't support\nthe idea that no degree of inequality is inevitable: the fortunes\nof the Silicon Valley elite represent enormous wealth disparities.\n[3]8.  He says I think modest changes to the tax code will derail\ntechnical progress. But I don't think that.  Larry Page's Google\nstock is worth billions of dollars.  It would take way more than\nmodest changes in the tax code to change that fact.  If you made\nthose kinds of changes, it would decrease the number of\nstartups in your country\u2014and break God knows what else.9. He says I am being pessimistic.  But I don't think it's pessimistic\nto think growth in technology will increase economic\ninequality, precisely for the reasons I gave in the essay.  Economic\ninequality per se doesn't seem nearly as much of a problem as\nadjacent ones like poverty or the conversion of money into political\npower.  If we had a society with no poverty and perfect social\nmobility, and economic inequality didn't translate into social or\npolitical inequality, would it be that bad if there was also great\nvariation in wealth?  It might still bother some people, but I'd\ntake that over what any country has now.\n[4]That's the sort of society I think we should work toward.  And\nthat's why I don't think we should focus on economic inequality per\nse, but the real underlying problems like poverty and lack of social\nmobility.Decreasing poverty is not identical with decreasing economic\ninequality.  Some measures for decreasing\npoverty could well increase economic inequality. For example, if\nyou gave every child in America the same quality of education\nBill Gates had, that would surely decrease poverty.\n[5]\nBut you\nwould then create a lot of new Bill Gateses as well.  These kids\nwouldn't all stop short at middle class.  The more ambitious ones\nwould shoot right out the other side.That would be a great problem to have, you say?  I think so too.\nNotes[1]\nThis is so puzzling that I wonder if he didn't simply misread\nwhat I wrote\u2014that he read the statement that startups were a\nproduct of this period as if I'd written that the period (in the\nsense of the trends therein) was a product of startups.[2]\nIncidentally, the numbers in the Forbes 400 are nonsense.\nBut it will do for a test like whether people are getting rich from\nstartups or not.[3]\nAs anyone who\nhas studied the history of taxation knows, there is a big difference\nbetween saying that tax rates were higher and that people paid more\nin taxes.",
        "start_char_idx": 3505,
        "end_char_idx": 7973,
        "text_template": "{metadata_str}\n\n{content}",
        "metadata_template": "{key}: {value}",
        "metadata_seperator": "\n",
        "class_name": "TextNode"
      },
      "__type__": "1"
    },
    "d0e5473f-48c9-4fd0-a8de-18a4c0f070d4": {
      "__data__": {
        "id_": "d0e5473f-48c9-4fd0-a8de-18a4c0f070d4",
        "embedding": null,
        "metadata": {
          "source": "https://paulgraham.com/klein.html",
          "title": "A Reply to Ezra Klein",
          "language": null
        },
        "excluded_embed_metadata_keys": [],
        "excluded_llm_metadata_keys": [],
        "relationships": {
          "1": {
            "node_id": "b3eaa467-6b24-495d-92c4-5a7b0713c147",
            "node_type": "4",
            "metadata": {
              "source": "https://paulgraham.com/klein.html",
              "title": "A Reply to Ezra Klein",
              "language": null
            },
            "hash": "84fbdf033eea8464adbe2e3eef82318f45006f6844ec9cf9469b53d9c3bf313d",
            "class_name": "RelatedNodeInfo"
          },
          "2": {
            "node_id": "b40a01ef-d941-48cc-b7d7-177cbffe3304",
            "node_type": "1",
            "metadata": {
              "source": "https://paulgraham.com/klein.html",
              "title": "A Reply to Ezra Klein",
              "language": null
            },
            "hash": "6345e4a68b48cd43acd51fcef0bb4f72a120b213ccd035c839d6daea6dd16be4",
            "class_name": "RelatedNodeInfo"
          },
          "3": {
            "node_id": "7afd5431-8387-427c-9569-0a23b1b41ea2",
            "node_type": "1",
            "metadata": {},
            "hash": "e85997e488b90c6e7f18c849ff2a5fbc3e99a2e8ac52ae787adf5e42c505e592",
            "class_name": "RelatedNodeInfo"
          }
        },
        "text": "[5]\nBut you\nwould then create a lot of new Bill Gateses as well.  These kids\nwouldn't all stop short at middle class.  The more ambitious ones\nwould shoot right out the other side.That would be a great problem to have, you say?  I think so too.\nNotes[1]\nThis is so puzzling that I wonder if he didn't simply misread\nwhat I wrote\u2014that he read the statement that startups were a\nproduct of this period as if I'd written that the period (in the\nsense of the trends therein) was a product of startups.[2]\nIncidentally, the numbers in the Forbes 400 are nonsense.\nBut it will do for a test like whether people are getting rich from\nstartups or not.[3]\nAs anyone who\nhas studied the history of taxation knows, there is a big difference\nbetween saying that tax rates were higher and that people paid more\nin taxes.[4]\nBy definition perfect social mobility would seem unfair to\nanyone with a mistakenly high opinion of their abilities.  Indeed,\nI suspect this phenomenon is already a factor in people's opinions\nabout economic inequality even with the imperfect social mobility\nwe have now.[5]\nI know Bill Gates had many other advantages besides his\neducation. I'm not saying this would level the playing field\ncompletely, just that it would help.Thanks to Sam Altman and Jessica Livingston for reading\ndrafts of this.",
        "start_char_idx": 7166,
        "end_char_idx": 8476,
        "text_template": "{metadata_str}\n\n{content}",
        "metadata_template": "{key}: {value}",
        "metadata_seperator": "\n",
        "class_name": "TextNode"
      },
      "__type__": "1"
    },
    "7afd5431-8387-427c-9569-0a23b1b41ea2": {
      "__data__": {
        "id_": "7afd5431-8387-427c-9569-0a23b1b41ea2",
        "embedding": null,
        "metadata": {
          "source": "https://paulgraham.com/75eldorado.html",
          "title": "1975 Cadillac Eldorado",
          "language": null
        },
        "excluded_embed_metadata_keys": [],
        "excluded_llm_metadata_keys": [],
        "relationships": {
          "1": {
            "node_id": "26b2192d-413a-426a-90b0-7be83cc7661e",
            "node_type": "4",
            "metadata": {
              "source": "https://paulgraham.com/75eldorado.html",
              "title": "1975 Cadillac Eldorado",
              "language": null
            },
            "hash": "6fdfa8d48b3e695dd01564b9c5105367f1ed4e305fd793cbc9484b4123dd1cef",
            "class_name": "RelatedNodeInfo"
          },
          "2": {
            "node_id": "d0e5473f-48c9-4fd0-a8de-18a4c0f070d4",
            "node_type": "1",
            "metadata": {
              "source": "https://paulgraham.com/klein.html",
              "title": "A Reply to Ezra Klein",
              "language": null
            },
            "hash": "69a63a326fa38ba84007322da83319e0e52e1ea59f12b48c9cf57dd0da2ee8aa",
            "class_name": "RelatedNodeInfo"
          },
          "3": {
            "node_id": "e9df8bf6-e94d-4889-98f2-af2d6abb2e4d",
            "node_type": "1",
            "metadata": {},
            "hash": "98700c0e309a9ab29e87dc3f09cdefca437e7afffb47e347a5f9444e8b3ca539",
            "class_name": "RelatedNodeInfo"
          }
        },
        "text": "1975 Cadillac Eldorado",
        "start_char_idx": 0,
        "end_char_idx": 22,
        "text_template": "{metadata_str}\n\n{content}",
        "metadata_template": "{key}: {value}",
        "metadata_seperator": "\n",
        "class_name": "TextNode"
      },
      "__type__": "1"
    },
    "e9df8bf6-e94d-4889-98f2-af2d6abb2e4d": {
      "__data__": {
        "id_": "e9df8bf6-e94d-4889-98f2-af2d6abb2e4d",
        "embedding": null,
        "metadata": {
          "source": "https://paulgraham.com/venturecapital.html",
          "title": "A Unified Theory of VC Suckage",
          "language": null
        },
        "excluded_embed_metadata_keys": [],
        "excluded_llm_metadata_keys": [],
        "relationships": {
          "1": {
            "node_id": "e96b71db-d4f3-48f5-ab28-6e5ae24398b8",
            "node_type": "4",
            "metadata": {
              "source": "https://paulgraham.com/venturecapital.html",
              "title": "A Unified Theory of VC Suckage",
              "language": null
            },
            "hash": "173ea365a603a03c8af2248d4c590a46cee207e642ce05c1834659171dd3be77",
            "class_name": "RelatedNodeInfo"
          },
          "2": {
            "node_id": "7afd5431-8387-427c-9569-0a23b1b41ea2",
            "node_type": "1",
            "metadata": {
              "source": "https://paulgraham.com/75eldorado.html",
              "title": "1975 Cadillac Eldorado",
              "language": null
            },
            "hash": "bff80e1d7a9a1c699dcb230ec83bcf0e14ce53756b7543806f2c3b10c343a803",
            "class_name": "RelatedNodeInfo"
          },
          "3": {
            "node_id": "5308930d-8750-4199-adac-9619a3068efb",
            "node_type": "1",
            "metadata": {},
            "hash": "2539035fee04003a34b3c9b32482918f21c170612b7f38deaa46fb2078295429",
            "class_name": "RelatedNodeInfo"
          }
        },
        "text": "A Unified Theory of VC Suckage\n\nMarch 2005A couple months ago I got an email from a recruiter asking if I was\ninterested in being a \"technologist in residence\" at a new venture\ncapital fund.  I think the idea was to play Karl Rove to the VCs'\nGeorge Bush.I considered it for about four seconds.  Work for a VC fund?  Ick.One of my most vivid memories from our startup is going to visit\nGreylock, the famous Boston VCs. They were the most arrogant\npeople I've met in my life.  And I've met a lot of arrogant people.\n[1]I'm not alone in feeling this way, of course.  Even a VC friend of\nmine dislikes VCs.  \"Assholes,\" he says.But lately I've been learning more about how the VC world works,\n\nand a few days ago it hit me that there's a reason VCs are the way\nthey are.  It's not so much that the business attracts jerks, or\neven that the power they wield corrupts them.  The real problem is\nthe way they're paid.The problem with VC funds is that they're funds.  Like the\nmanagers of mutual funds or hedge funds, VCs get paid a percentage\nof the money they manage: about 2% a year in management fees,\nplus a percentage of the gains.  So they want\nthe fund to be huge-- hundreds of millions of dollars, if possible.\nBut that means each partner ends up being responsible for investing\na lot of money.  And since one person can only manage so many deals,\neach deal has to be for multiple millions of dollars.This turns out to explain nearly all the characteristics of VCs\nthat founders hate.It explains why VCs take so agonizingly long to make up their minds,\nand why their due diligence feels like a body cavity search. [2]\nWith so much at stake, they have to be paranoid.It explains why they steal your ideas.  Every founder knows that\nVCs will tell your secrets to your competitors if they end up\ninvesting in them.  It's not unheard of for VCs to meet you when\nthey have no intention of funding you, just to pick your brain for\na competitor.  This prospect makes naive founders clumsily secretive.\nExperienced founders treat it as a cost of doing business.  Either\nway it sucks.  But again, the only reason VCs are so sneaky is the\ngiant deals they do.  With so much at stake, they have to be devious.It explains why VCs tend to interfere in the companies they invest\nin.  They want to be on your board not just so that they can advise\nyou, but so that they can watch you.  Often they even install a new\nCEO.  Yes, he may have extensive business experience.  But he's\nalso their man: these newly installed CEOs always play something  \nof the role of a political commissar in a Red Army unit.  With\nso much at stake, VCs can't resist micromanaging you.The huge investments themselves are something founders would dislike,\nif they realized how damaging they can be.  VCs don't invest $x\nmillion because that's the amount you need, but because that's the\namount the structure of their business requires them to invest.  \nLike steroids, these sudden huge investments can do more harm than \ngood.  Google survived enormous VC funding because it could\nlegitimately absorb large amounts of money.  They had to buy a lot\nof servers and a lot of bandwidth to crawl the whole Web.  Less\nfortunate startups just end up hiring armies of people to sit around\nhaving meetings.In principle you could take a huge VC investment, put it in treasury\nbills, and continue to operate frugally.  You just try it.And of course giant investments mean giant valuations.  They have\nto, or there's not enough stock left to keep the founders interested.\nYou might think a high valuation is a great thing.  Many founders \ndo.  But you can't eat paper.  You can't benefit from a high valuation\nunless you can somehow achieve what those in the business \n\ncall a \"liquidity event,\" and the higher   \nyour valuation, the narrower your options for doing that.  Many a   \nfounder would be happy to sell his company for $15 million, but VCs\nwho've just invested at a pre-money valuation of $8 million won't\nhear of that.  You're rolling the dice again, whether you like it\nor not.Back in 1997, one of our competitors raised $20 million in a single \nround of VC funding.",
        "start_char_idx": 0,
        "end_char_idx": 4131,
        "text_template": "{metadata_str}\n\n{content}",
        "metadata_template": "{key}: {value}",
        "metadata_seperator": "\n",
        "class_name": "TextNode"
      },
      "__type__": "1"
    },
    "5308930d-8750-4199-adac-9619a3068efb": {
      "__data__": {
        "id_": "5308930d-8750-4199-adac-9619a3068efb",
        "embedding": null,
        "metadata": {
          "source": "https://paulgraham.com/venturecapital.html",
          "title": "A Unified Theory of VC Suckage",
          "language": null
        },
        "excluded_embed_metadata_keys": [],
        "excluded_llm_metadata_keys": [],
        "relationships": {
          "1": {
            "node_id": "e96b71db-d4f3-48f5-ab28-6e5ae24398b8",
            "node_type": "4",
            "metadata": {
              "source": "https://paulgraham.com/venturecapital.html",
              "title": "A Unified Theory of VC Suckage",
              "language": null
            },
            "hash": "173ea365a603a03c8af2248d4c590a46cee207e642ce05c1834659171dd3be77",
            "class_name": "RelatedNodeInfo"
          },
          "2": {
            "node_id": "e9df8bf6-e94d-4889-98f2-af2d6abb2e4d",
            "node_type": "1",
            "metadata": {
              "source": "https://paulgraham.com/venturecapital.html",
              "title": "A Unified Theory of VC Suckage",
              "language": null
            },
            "hash": "25e452ebb921107047c35d5fa2670726a2d22b6e7d81896259b8850daaab1dec",
            "class_name": "RelatedNodeInfo"
          },
          "3": {
            "node_id": "ff4fa664-10fb-4ecd-8490-7a415aaaf691",
            "node_type": "1",
            "metadata": {},
            "hash": "58b0918414bd9ad2c41a411c4ff406f2bdefed52e8e1dda102f6378699945719",
            "class_name": "RelatedNodeInfo"
          }
        },
        "text": "You just try it.And of course giant investments mean giant valuations.  They have\nto, or there's not enough stock left to keep the founders interested.\nYou might think a high valuation is a great thing.  Many founders \ndo.  But you can't eat paper.  You can't benefit from a high valuation\nunless you can somehow achieve what those in the business \n\ncall a \"liquidity event,\" and the higher   \nyour valuation, the narrower your options for doing that.  Many a   \nfounder would be happy to sell his company for $15 million, but VCs\nwho've just invested at a pre-money valuation of $8 million won't\nhear of that.  You're rolling the dice again, whether you like it\nor not.Back in 1997, one of our competitors raised $20 million in a single \nround of VC funding.  This was at the time more than the valuation\nof our entire company.  Was I worried?  Not at all: I was delighted.\nIt was like watching a car you're chasing turn down a street that\nyou know has no outlet.Their smartest move at that point would have been to take every \npenny of the $20 million and use it to buy us.  We would have sold.\nTheir investors would have been furious of course.  But I think the  \nmain reason they never considered this was that they never imagined\nwe could be had so cheap.  They probably assumed we were on the\nsame VC gravy train they were.In fact we only spent about $2 million in our entire existence.   \nAnd that gave us flexibility.  We could sell ourselves to Yahoo for\n$50 million, and everyone was delighted.  If our competitor had\ndone that, the last round of investors would presumably have lost\nmoney.  I assume they could have vetoed such a deal.  But no one  \nthose days was paying a lot more than Yahoo.  So unless their\nfounders could pull off an IPO (which would be difficult with Yahoo\nas a competitor), they had no choice but to ride the thing down.The puffed-up companies that went public during the Bubble didn't\ndo it just because they were pulled into it by unscrupulous investment \nbankers.  Most were pushed just as hard from the other side by VCs\nwho'd invested at high valuations, leaving an IPO as the only way  \nout.  The only people dumber were retail investors.  So it was\nliterally IPO or bust.  Or rather, IPO then bust, or just bust.Add up all the evidence of VCs' behavior, and the resulting personality\nis not attractive.  In fact, it's the classic villain: alternately\ncowardly, greedy, sneaky, and overbearing.I used to take it for granted that VCs were like this. Complaining  \nthat VCs were jerks used to seem as naive to me as complaining that\nusers didn't read the reference manual.  Of course VCs were jerks.\nHow could it be otherwise?But I realize now that they're not intrinsically jerks.  VCs are  \nlike car salesmen or bureaucrats: the nature of their work\nturns them into jerks.I've met a few VCs I like.  Mike Moritz seems a good guy.  He even \nhas a sense of humor, which is almost unheard of among VCs.  From  \nwhat I've read about John Doerr, he sounds like a good guy too,  \nalmost a hacker.  But they work for the very best VC funds.  And \nmy theory explains why they'd tend to be different: just as the\nvery most popular kids don't have to persecute \nnerds, the very best\nVCs don't have to act like VCs.  They get the pick of all the best  \ndeals.  So they don't have to be so paranoid and sneaky, and they \ncan choose those rare companies, like Google, that will actually\nbenefit from the giant sums they're compelled to invest.VCs often complain that in their business there's too much money\nchasing too few deals.  Few realize that this also describes a flaw\nin the way funding works at the level of individual firms.Perhaps this was the sort of strategic insight I was supposed to   \ncome up with as a \"technologist in residence.\"  If so, the good\nnews is that they're getting it for free.",
        "start_char_idx": 3372,
        "end_char_idx": 7207,
        "text_template": "{metadata_str}\n\n{content}",
        "metadata_template": "{key}: {value}",
        "metadata_seperator": "\n",
        "class_name": "TextNode"
      },
      "__type__": "1"
    },
    "ff4fa664-10fb-4ecd-8490-7a415aaaf691": {
      "__data__": {
        "id_": "ff4fa664-10fb-4ecd-8490-7a415aaaf691",
        "embedding": null,
        "metadata": {
          "source": "https://paulgraham.com/venturecapital.html",
          "title": "A Unified Theory of VC Suckage",
          "language": null
        },
        "excluded_embed_metadata_keys": [],
        "excluded_llm_metadata_keys": [],
        "relationships": {
          "1": {
            "node_id": "e96b71db-d4f3-48f5-ab28-6e5ae24398b8",
            "node_type": "4",
            "metadata": {
              "source": "https://paulgraham.com/venturecapital.html",
              "title": "A Unified Theory of VC Suckage",
              "language": null
            },
            "hash": "173ea365a603a03c8af2248d4c590a46cee207e642ce05c1834659171dd3be77",
            "class_name": "RelatedNodeInfo"
          },
          "2": {
            "node_id": "5308930d-8750-4199-adac-9619a3068efb",
            "node_type": "1",
            "metadata": {
              "source": "https://paulgraham.com/venturecapital.html",
              "title": "A Unified Theory of VC Suckage",
              "language": null
            },
            "hash": "586fce6cd4283cd0e7188aecac826cd4337f2949009ada5eca76067beeb63525",
            "class_name": "RelatedNodeInfo"
          },
          "3": {
            "node_id": "16b6a56a-1502-4b09-8faf-538ce4f087fe",
            "node_type": "1",
            "metadata": {},
            "hash": "ae601e54ae294a1c8392ccf2b90226b83e327e04df9b7f663d4969ac472654e9",
            "class_name": "RelatedNodeInfo"
          }
        },
        "text": "But they work for the very best VC funds.  And \nmy theory explains why they'd tend to be different: just as the\nvery most popular kids don't have to persecute \nnerds, the very best\nVCs don't have to act like VCs.  They get the pick of all the best  \ndeals.  So they don't have to be so paranoid and sneaky, and they \ncan choose those rare companies, like Google, that will actually\nbenefit from the giant sums they're compelled to invest.VCs often complain that in their business there's too much money\nchasing too few deals.  Few realize that this also describes a flaw\nin the way funding works at the level of individual firms.Perhaps this was the sort of strategic insight I was supposed to   \ncome up with as a \"technologist in residence.\"  If so, the good\nnews is that they're getting it for free.  The bad news is it\nmeans that if you're not one of the very top funds, you're \ncondemned to be the bad guys.Notes[1] After Greylock booted founder Philip Greenspun out of ArsDigita,\nhe wrote a hilarious but also very informative\nessay about it.\n[2] Since most VCs aren't tech guys, the technology side of their\ndue diligence tends to be like a body cavity search by someone with\na faulty knowledge of human anatomy.  After a while we were quite\nsore from VCs attempting to probe our nonexistent database orifice.No, we don't use Oracle.  We just store the data in files.  Our\nsecret is to use an OS that doesn't lose our data.  Which OS?\nFreeBSD.  Why do you use that instead of Windows NT?  Because it's\nbetter and it doesn't cost anything.  What, you're using a\nfreeware OS?How many times that conversation was repeated.\nThen when we got to Yahoo, we found they used FreeBSD and stored\ntheir data in files too.Chinese TranslationJapanese Translation",
        "start_char_idx": 6405,
        "end_char_idx": 8160,
        "text_template": "{metadata_str}\n\n{content}",
        "metadata_template": "{key}: {value}",
        "metadata_seperator": "\n",
        "class_name": "TextNode"
      },
      "__type__": "1"
    },
    "16b6a56a-1502-4b09-8faf-538ce4f087fe": {
      "__data__": {
        "id_": "16b6a56a-1502-4b09-8faf-538ce4f087fe",
        "embedding": null,
        "metadata": {
          "source": "https://paulgraham.com/ind_1.html",
          "title": "Paul Graham Index",
          "language": null
        },
        "excluded_embed_metadata_keys": [],
        "excluded_llm_metadata_keys": [],
        "relationships": {
          "1": {
            "node_id": "74eb5f6d-42d2-44b7-a555-3d0b4372542c",
            "node_type": "4",
            "metadata": {
              "source": "https://paulgraham.com/ind_1.html",
              "title": "Paul Graham Index",
              "language": null
            },
            "hash": "5337342cdf363adecc8b96e3e1ea6217f57ad6e3d68e508605666966c94d16dc",
            "class_name": "RelatedNodeInfo"
          },
          "2": {
            "node_id": "ff4fa664-10fb-4ecd-8490-7a415aaaf691",
            "node_type": "1",
            "metadata": {
              "source": "https://paulgraham.com/venturecapital.html",
              "title": "A Unified Theory of VC Suckage",
              "language": null
            },
            "hash": "d19f793f1d30b8d51cdd791b1cc393077bb4bde34d91f2091398e5cec3e774e9",
            "class_name": "RelatedNodeInfo"
          },
          "3": {
            "node_id": "c96ec641-e4b5-4d3e-b59e-a273422d313f",
            "node_type": "1",
            "metadata": {},
            "hash": "4de208bf08cd4baca4e9a0359ca066e334ac71eb71c2a868b1263d807406f072",
            "class_name": "RelatedNodeInfo"
          }
        },
        "text": "Paul Graham Index\n\nAccumulator GeneratorAfter CredentialsAfter the LadderAlien TruthAmerican GothicAmerican GothicAn Alternative Theory of UnionsAn Interview by a Seventh GraderAn NFT That Saves LivesAn OO ExampleAnother SBL StoryANSI Common LispApple GarageApple's MistakeApplicationsPrev \u00a0 | \u00a0 Next",
        "start_char_idx": 2,
        "end_char_idx": 302,
        "text_template": "{metadata_str}\n\n{content}",
        "metadata_template": "{key}: {value}",
        "metadata_seperator": "\n",
        "class_name": "TextNode"
      },
      "__type__": "1"
    },
    "c96ec641-e4b5-4d3e-b59e-a273422d313f": {
      "__data__": {
        "id_": "c96ec641-e4b5-4d3e-b59e-a273422d313f",
        "embedding": null,
        "metadata": {
          "source": "https://paulgraham.com/okung.html",
          "title": "A Reply to Russell Okung",
          "language": null
        },
        "excluded_embed_metadata_keys": [],
        "excluded_llm_metadata_keys": [],
        "relationships": {
          "1": {
            "node_id": "b2f47d6c-6224-4cab-95ce-da038ac94744",
            "node_type": "4",
            "metadata": {
              "source": "https://paulgraham.com/okung.html",
              "title": "A Reply to Russell Okung",
              "language": null
            },
            "hash": "0b06a888060519c408b2668055427d9b144ba0d3686c0a609f8f563bba70f7c9",
            "class_name": "RelatedNodeInfo"
          },
          "2": {
            "node_id": "16b6a56a-1502-4b09-8faf-538ce4f087fe",
            "node_type": "1",
            "metadata": {
              "source": "https://paulgraham.com/ind_1.html",
              "title": "Paul Graham Index",
              "language": null
            },
            "hash": "7e589949f7fb79b08c4311921b089755011f2da442d7b5cf9021d2d82925c627",
            "class_name": "RelatedNodeInfo"
          },
          "3": {
            "node_id": "61fce21b-e69e-4d52-8806-d271d98c93dc",
            "node_type": "1",
            "metadata": {},
            "hash": "8419f96fa2f7343c25a0363662cf3101cd5a6362329c6c38701ee788b002a38d",
            "class_name": "RelatedNodeInfo"
          }
        },
        "text": "A Reply to Russell Okung\n\nJanuary 2016Recently I tried something I usually avoid and replied to Ezra Klein's criticisms of\nEconomic Inequality.  It was a strange\nsort of writing, easier than writing an essay but also less\ninteresting.  But I'll give it another shot. A lot of people\nare talking about\nRussell\nOkung's response to what I wrote, so I'll try\nreplying to that.1. He says I say economic inequality is \"a good thing.\"  I didn't\nsay that.  What I said is that it has multiple causes, some bad\n(lack of social mobility) and some good (Larry and Sergey starting\nGoogle).If you attack economic inequality, you're indiscriminately attacking\nboth the good and bad causes.  So instead attack specific bad causes.\nTo fix lack of social mobility, for example, attack that specifically.\nThen you not only avoid throwing out the babies with the bathwater,\nbut you'll also be more likely to actually fix the problem, because\nyou'll focus on all the contributing factors, including those which\nare only peripherally economic.2. He says \"economic inequality isn't the symptom; it's the virus\nthat attacks.\"  I'm guessing from the sentences that follow that\nwhat he means by \"economic inequality\" is some combination of poverty\nand lack of social mobility.  And those are certainly bad, but that\nis not what the term \"economic inequality\" means.  It means the\nvariation\nbetween different quantiles' wealth or income.So you could for example have no poverty and perfect social mobility,\nand still have great economic inequality.If he thinks what \"economic inequality\" means is poverty and lack\nof social mobility, it's not surprising he was upset enough\nto write a reply to my essay.  In fact I suspect much if not most\nof the angry reaction to it was a result of people not understanding\nwhat the term \"economic inequality\" means.Just so we're clear about this, I didn't say that poverty and lack\nof social mobility are harmless, or inevitable. In fact I said the\nopposite.3. He says I believe \"that anyone who works hard can move up\neconomically regardless of his or her social circumstances.\"  Not\nonly do I not believe that, I said so explicitly in the essay.  I\ncalled out lack of social mobility as one of the worst problems\ncontributing to economic inequality, and talked about how I had\npersonally seen the effects of it in the relative scarcity of\nsuccessful startup founders who grew up poor.Those three seem to be his only points specifically about what I\nwrote.  The rest of what he says is about social mobility and startups\ngenerally.  I agree with almost all of it.The only potentially dubious point is that we need silicon valleys\nto be scattered instead of in one place.  I've \nwritten about this\nquestion before.  There are advantages to concentration; it may\nnot be optimal to scatter startups too much; but I wouldn't pick a\nfight over the question.Having gone through this exercise, the thing that strikes me most\nis that so many people think Russell's views are different from\nmine.  As far as I can tell, we don't disagree about anything.I suspect what's going on here is that a lot of people start from\n\"rich guy says economic inequality is not bad\" and then expand that\nin their heads into whatever they think such an essay would say,\nand for them that is what I wrote.There is a way to protect against this phenomenon.  Quote the specific passages you\ndisagree with.  This forces you to calibrate your mental model of\nwhat someone said with what they actually said.  In my (sadly\nextensive) experience, the two are often wildly divergent.",
        "start_char_idx": 0,
        "end_char_idx": 3558,
        "text_template": "{metadata_str}\n\n{content}",
        "metadata_template": "{key}: {value}",
        "metadata_seperator": "\n",
        "class_name": "TextNode"
      },
      "__type__": "1"
    },
    "61fce21b-e69e-4d52-8806-d271d98c93dc": {
      "__data__": {
        "id_": "61fce21b-e69e-4d52-8806-d271d98c93dc",
        "embedding": null,
        "metadata": {
          "source": "https://paulgraham.com/matador.html",
          "title": "1976 AMC Matador Coupe",
          "language": null
        },
        "excluded_embed_metadata_keys": [],
        "excluded_llm_metadata_keys": [],
        "relationships": {
          "1": {
            "node_id": "c0e46bff-e238-4d81-8a71-430603928398",
            "node_type": "4",
            "metadata": {
              "source": "https://paulgraham.com/matador.html",
              "title": "1976 AMC Matador Coupe",
              "language": null
            },
            "hash": "b12441671e72e96d711dc8c4ae12867c4f3a82c7b767eca759bc56cf0b698294",
            "class_name": "RelatedNodeInfo"
          },
          "2": {
            "node_id": "c96ec641-e4b5-4d3e-b59e-a273422d313f",
            "node_type": "1",
            "metadata": {
              "source": "https://paulgraham.com/okung.html",
              "title": "A Reply to Russell Okung",
              "language": null
            },
            "hash": "a5c563762b958146a3a46937414a78fbcf67db8ba38dea286d988fa117c22d9c",
            "class_name": "RelatedNodeInfo"
          },
          "3": {
            "node_id": "2a8d5087-b2c0-4743-af1f-4cedf012bc90",
            "node_type": "1",
            "metadata": {},
            "hash": "0bc65102af562f8b356b070bab72a0f12dc70176c03aaf189252968fe7a9ba82",
            "class_name": "RelatedNodeInfo"
          }
        },
        "text": "1976 AMC Matador Coupe",
        "start_char_idx": 0,
        "end_char_idx": 22,
        "text_template": "{metadata_str}\n\n{content}",
        "metadata_template": "{key}: {value}",
        "metadata_seperator": "\n",
        "class_name": "TextNode"
      },
      "__type__": "1"
    },
    "2a8d5087-b2c0-4743-af1f-4cedf012bc90": {
      "__data__": {
        "id_": "2a8d5087-b2c0-4743-af1f-4cedf012bc90",
        "embedding": null,
        "metadata": {
          "source": "https://paulgraham.com/04magnum.html",
          "title": "2004 Dodge Magnum",
          "language": null
        },
        "excluded_embed_metadata_keys": [],
        "excluded_llm_metadata_keys": [],
        "relationships": {
          "1": {
            "node_id": "b829193a-3ec3-488f-a4b9-9e3f8bec16db",
            "node_type": "4",
            "metadata": {
              "source": "https://paulgraham.com/04magnum.html",
              "title": "2004 Dodge Magnum",
              "language": null
            },
            "hash": "4adba433165f38f2302a3df5df653877ddc556f37eef2172f5f7f61b7194e065",
            "class_name": "RelatedNodeInfo"
          },
          "2": {
            "node_id": "61fce21b-e69e-4d52-8806-d271d98c93dc",
            "node_type": "1",
            "metadata": {
              "source": "https://paulgraham.com/matador.html",
              "title": "1976 AMC Matador Coupe",
              "language": null
            },
            "hash": "e52c458799a2d3be818da0deb968c8e05779ac67c8e8a24e8e900916acf53732",
            "class_name": "RelatedNodeInfo"
          },
          "3": {
            "node_id": "2bf319a1-3239-4020-b9b9-701de6a7c068",
            "node_type": "1",
            "metadata": {},
            "hash": "7233a1bb926234a1111d5eb7729de1b17933633460cbcac20ae216b0f1e919e8",
            "class_name": "RelatedNodeInfo"
          }
        },
        "text": "2004 Dodge Magnum\n\nThey still haven't learned.",
        "start_char_idx": 0,
        "end_char_idx": 46,
        "text_template": "{metadata_str}\n\n{content}",
        "metadata_template": "{key}: {value}",
        "metadata_seperator": "\n",
        "class_name": "TextNode"
      },
      "__type__": "1"
    },
    "2bf319a1-3239-4020-b9b9-701de6a7c068": {
      "__data__": {
        "id_": "2bf319a1-3239-4020-b9b9-701de6a7c068",
        "embedding": null,
        "metadata": {
          "source": "https://paulgraham.com/spam.html",
          "title": "A Plan for Spam",
          "language": null
        },
        "excluded_embed_metadata_keys": [],
        "excluded_llm_metadata_keys": [],
        "relationships": {
          "1": {
            "node_id": "04424a6d-a9ec-4307-b135-c9f8d95037fc",
            "node_type": "4",
            "metadata": {
              "source": "https://paulgraham.com/spam.html",
              "title": "A Plan for Spam",
              "language": null
            },
            "hash": "689da0358fc0164fdfe889c470e00d31d72a0dbce462deefe433dbef56b31b5f",
            "class_name": "RelatedNodeInfo"
          },
          "2": {
            "node_id": "2a8d5087-b2c0-4743-af1f-4cedf012bc90",
            "node_type": "1",
            "metadata": {
              "source": "https://paulgraham.com/04magnum.html",
              "title": "2004 Dodge Magnum",
              "language": null
            },
            "hash": "f1848cb3afd578a06cf5f00c425f1a10a611c53a58d368c4e3bc7ab19ce1f207",
            "class_name": "RelatedNodeInfo"
          },
          "3": {
            "node_id": "6aac1afa-46a7-4e43-892b-d6ebda6d7614",
            "node_type": "1",
            "metadata": {},
            "hash": "c05b462666a6a8e5474f606549f116b5b5b3010b555693fbe21b6fa15033c3fc",
            "class_name": "RelatedNodeInfo"
          }
        },
        "text": "A Plan for Spam\n\n\n\nLike to build things? Try Hacker\nNews.\n\n\n\n\nAugust 2002(This article describes the spam-filtering techniques\nused in the spamproof web-based mail reader we\nbuilt to exercise Arc. An\nimproved algorithm is described in Better\nBayesian Filtering.)I think it's possible to stop spam, and that \ncontent-based filters are the way to do it.\nThe Achilles heel of the spammers is their message.\nThey can circumvent any other barrier you set up.  They have so far, at\nleast.  But they have to deliver their message, whatever it\nis.  If we can write software that recognizes their messages,\nthere is no way they can get around that._ _ _To the recipient, spam is easily recognizable.  If you hired \nsomeone to read your mail and discard the spam, they would\nhave little trouble doing it.  How much do we have\nto do, short of AI, to automate this process?I think we will be able to solve the problem with fairly\nsimple algorithms.  In fact, I've found that you can filter\npresent-day spam acceptably well using nothing more than a\nBayesian combination of the spam probabilities of individual\nwords.  Using a slightly tweaked (as described below) Bayesian\nfilter, we now miss less than 5 per 1000 spams, with 0 false positives.The statistical approach is not usually the first one people\ntry when they write spam filters.  Most hackers' first instinct is\nto try to write software that recognizes individual properties of\nspam.  You look at spams\nand you think, the gall of these guys to try sending me mail \nthat begins \"Dear Friend\" or has a subject line that's all\nuppercase and ends in eight exclamation points.  I can filter\nout that stuff with about one line of code.And so you do,\nand in the beginning it works.  A few simple rules will take\na big bite out of your incoming spam.  Merely looking\nfor the word \"click\" will catch 79.7% of the\nemails in my spam corpus, with only 1.2% false positives.I spent about six months writing software that looked for\nindividual spam features before I tried the statistical\napproach.  What I found was that recognizing that last few\npercent of spams got very hard, and that as I\nmade the filters stricter I got more false positives.False positives are innocent emails that get mistakenly\nidentified as spams.\nFor most users,\nmissing legitimate email is\nan order of magnitude worse than receiving spam, so a\nfilter that yields false positives is like an acne cure\nthat carries a risk of death to the patient.The more spam a user gets, the less\nlikely he'll be to notice one innocent mail sitting in his\nspam folder.  And strangely enough, the better your spam filters get,\nthe more dangerous false positives become, because when the\nfilters are really good, users will be more likely to\nignore everything they catch.I don't know why I avoided trying the statistical approach\nfor so long.  I think it was because I got addicted to\ntrying to identify spam features myself, as if I were playing\nsome kind of competitive game with the spammers.  (Nonhackers\ndon't often realize this, but most hackers are very competitive.)\nWhen I did try statistical analysis, I\nfound immediately that it was much cleverer than I had been.\nIt discovered, of course, that terms like \"virtumundo\" and\n\"teens\" were good indicators of spam.  But it also\ndiscovered that \"per\" and \"FL\" and \"ff0000\" are good \nindicators of spam.  In fact, \"ff0000\" (html for bright red)\nturns out to be as good an indicator of spam as any  \npornographic term._ _ _Here's a sketch of how I do statistical filtering.  I start\nwith one corpus of spam and one of nonspam mail.  At the\nmoment each one has about 4000 messages in it.  I scan\nthe entire text, including headers and embedded html\nand javascript, of each message in each corpus.\nI currently consider alphanumeric characters,\ndashes, apostrophes, and dollar signs to be part of tokens,\nand everything else to be a token separator.  (There is\nprobably room for improvement here.)  I ignore tokens that\nare all digits, and I also ignore html comments, not even\nconsidering them as token separators.I count the number\nof times each token (ignoring case, currently) occurs in\neach corpus.",
        "start_char_idx": 0,
        "end_char_idx": 4147,
        "text_template": "{metadata_str}\n\n{content}",
        "metadata_template": "{key}: {value}",
        "metadata_seperator": "\n",
        "class_name": "TextNode"
      },
      "__type__": "1"
    },
    "6aac1afa-46a7-4e43-892b-d6ebda6d7614": {
      "__data__": {
        "id_": "6aac1afa-46a7-4e43-892b-d6ebda6d7614",
        "embedding": null,
        "metadata": {
          "source": "https://paulgraham.com/spam.html",
          "title": "A Plan for Spam",
          "language": null
        },
        "excluded_embed_metadata_keys": [],
        "excluded_llm_metadata_keys": [],
        "relationships": {
          "1": {
            "node_id": "04424a6d-a9ec-4307-b135-c9f8d95037fc",
            "node_type": "4",
            "metadata": {
              "source": "https://paulgraham.com/spam.html",
              "title": "A Plan for Spam",
              "language": null
            },
            "hash": "689da0358fc0164fdfe889c470e00d31d72a0dbce462deefe433dbef56b31b5f",
            "class_name": "RelatedNodeInfo"
          },
          "2": {
            "node_id": "2bf319a1-3239-4020-b9b9-701de6a7c068",
            "node_type": "1",
            "metadata": {
              "source": "https://paulgraham.com/spam.html",
              "title": "A Plan for Spam",
              "language": null
            },
            "hash": "97105d9a9830b06828f0be222e97a046710ad1f9a9874b839c1183322719d7c6",
            "class_name": "RelatedNodeInfo"
          },
          "3": {
            "node_id": "0e95905f-ae7d-419a-940f-33529f315f11",
            "node_type": "1",
            "metadata": {},
            "hash": "6c2c894350cc3de162b15b98ede82fa152852f77c79da4ffec71f251c95c2de0",
            "class_name": "RelatedNodeInfo"
          }
        },
        "text": "In fact, \"ff0000\" (html for bright red)\nturns out to be as good an indicator of spam as any  \npornographic term._ _ _Here's a sketch of how I do statistical filtering.  I start\nwith one corpus of spam and one of nonspam mail.  At the\nmoment each one has about 4000 messages in it.  I scan\nthe entire text, including headers and embedded html\nand javascript, of each message in each corpus.\nI currently consider alphanumeric characters,\ndashes, apostrophes, and dollar signs to be part of tokens,\nand everything else to be a token separator.  (There is\nprobably room for improvement here.)  I ignore tokens that\nare all digits, and I also ignore html comments, not even\nconsidering them as token separators.I count the number\nof times each token (ignoring case, currently) occurs in\neach corpus.  At this stage I end up with two large hash   \ntables, one for each corpus, mapping tokens to number\nof occurrences.Next I create a third hash table, this time mapping\neach token to the probability that an email containing it is a spam,\nwhich I calculate as follows [1]:\n\n(let ((g (* 2 (or (gethash word good) 0)))\n      (b (or (gethash word bad) 0)))\n   (unless (< (+ g b) 5)\n     (max .01\n          (min .99 (float (/ (min 1 (/ b nbad))\n                             (+ (min 1 (/ g ngood))   \n                                (min 1 (/ b nbad)))))))))\n\nwhere word is the token whose probability we're\ncalculating, good and bad are the hash tables\nI created in the first step, and ngood and nbad\nare the number of nonspam and spam messages respectively.I explained this as code to show a couple of important details.\nI want to bias the probabilities slightly to avoid false\npositives, and by trial and error I've found that a good\nway to do it is to double all the numbers in good.\nThis helps to distinguish between words that occasionally\ndo occur in legitimate email and words that almost never do. \nI only consider words that occur more than five times in\ntotal (actually, because of the doubling, occurring three \ntimes in nonspam mail would be enough).  And then there is\nthe question of what probability to assign to words that\noccur in one corpus but not the other.  Again by trial and   \nerror I chose .01 and .99.  There may be room for tuning\nhere, but as the corpus grows such tuning will happen\nautomatically anyway.The especially observant will notice that while I consider\neach corpus to be a single long stream of text for purposes\nof counting occurrences, I use the number of emails in\neach, rather than their combined length, as the divisor     \nin calculating spam probabilities.  This adds another\nslight bias to protect against false positives.When new mail arrives, it is scanned into tokens, and\nthe most interesting fifteen tokens, where interesting is  \nmeasured by how far their spam probability is from a\nneutral .5, are used to calculate the probability that\nthe mail is spam.  If probs\nis a list of the fifteen individual probabilities, you\ncalculate the \ncombined probability thus:\n\n(let ((prod (apply #'* probs)))\n  (/ prod (+ prod (apply #'* (mapcar #'(lambda (x) \n                                         (- 1 x))\n                                     probs)))))\n\nOne question that arises in\npractice is what probability to assign to a word you've\nnever seen, i.e. one that doesn't occur in the hash table\nof word probabilities.  I've found, again by trial and\nerror, that .4 is a good number to use.  If you've never\nseen a word before, it is probably fairly innocent; spam\nwords tend to be all too familiar.There are examples of this algorithm being applied to\nactual emails in an appendix at the end.I treat mail as spam if the algorithm above gives it a\nprobability of more than .9 of being spam.  But in practice\nit would not matter much where I put this threshold, because\nfew probabilities end up in the middle of the range._ _ _One great advantage of the statistical approach is that you\ndon't have to read so many spams.  Over the past six months,\nI've read literally thousands of spams, and it is really\nkind of demoralizing.  Norbert Wiener said if you compete\nwith slaves you become a slave, and there is something\nsimilarly degrading about competing with spammers.",
        "start_char_idx": 3353,
        "end_char_idx": 7555,
        "text_template": "{metadata_str}\n\n{content}",
        "metadata_template": "{key}: {value}",
        "metadata_seperator": "\n",
        "class_name": "TextNode"
      },
      "__type__": "1"
    },
    "0e95905f-ae7d-419a-940f-33529f315f11": {
      "__data__": {
        "id_": "0e95905f-ae7d-419a-940f-33529f315f11",
        "embedding": null,
        "metadata": {
          "source": "https://paulgraham.com/spam.html",
          "title": "A Plan for Spam",
          "language": null
        },
        "excluded_embed_metadata_keys": [],
        "excluded_llm_metadata_keys": [],
        "relationships": {
          "1": {
            "node_id": "04424a6d-a9ec-4307-b135-c9f8d95037fc",
            "node_type": "4",
            "metadata": {
              "source": "https://paulgraham.com/spam.html",
              "title": "A Plan for Spam",
              "language": null
            },
            "hash": "689da0358fc0164fdfe889c470e00d31d72a0dbce462deefe433dbef56b31b5f",
            "class_name": "RelatedNodeInfo"
          },
          "2": {
            "node_id": "6aac1afa-46a7-4e43-892b-d6ebda6d7614",
            "node_type": "1",
            "metadata": {
              "source": "https://paulgraham.com/spam.html",
              "title": "A Plan for Spam",
              "language": null
            },
            "hash": "5f78452cc9af1ec690d18a26b93e58bc438af4d4b7ee01d15b30ca9b5d95d0da",
            "class_name": "RelatedNodeInfo"
          },
          "3": {
            "node_id": "8c9cbc2f-99d9-43c4-9372-dbf27f91d4fb",
            "node_type": "1",
            "metadata": {},
            "hash": "c5bd39cce575b19b513f6389315b0a6f1ecf2dcc1b7eda55b94c93ea9bb4a998",
            "class_name": "RelatedNodeInfo"
          }
        },
        "text": "I've found, again by trial and\nerror, that .4 is a good number to use.  If you've never\nseen a word before, it is probably fairly innocent; spam\nwords tend to be all too familiar.There are examples of this algorithm being applied to\nactual emails in an appendix at the end.I treat mail as spam if the algorithm above gives it a\nprobability of more than .9 of being spam.  But in practice\nit would not matter much where I put this threshold, because\nfew probabilities end up in the middle of the range._ _ _One great advantage of the statistical approach is that you\ndon't have to read so many spams.  Over the past six months,\nI've read literally thousands of spams, and it is really\nkind of demoralizing.  Norbert Wiener said if you compete\nwith slaves you become a slave, and there is something\nsimilarly degrading about competing with spammers.   To\nrecognize individual spam features you have to try to get\ninto the mind of the spammer, and frankly I want to spend\nas little time inside the minds of spammers as possible.But the real advantage of the Bayesian approach, of course,\nis that you know what\nyou're measuring.  Feature-recognizing filters like\nSpamAssassin assign a spam \"score\" to email.  The Bayesian\napproach assigns an actual probability.  The problem with\na \"score\" is that no one knows what it means.  The user\ndoesn't know what it means, but worse still, neither does\nthe developer of the filter.  How many points should an\nemail get for having the word \"sex\" in it?  A probability\ncan of course be mistaken, but there is little ambiguity\nabout what it means, or how evidence should be combined\nto calculate it.  Based on my corpus, \"sex\" indicates\na .97 probability of the containing email being a spam,\nwhereas \"sexy\" indicates .99 probability.\nAnd Bayes' Rule, equally unambiguous, says that an email\ncontaining both words would, in the (unlikely)\nabsence of any other evidence, have a 99.97% chance of\nbeing a spam.Because it is measuring probabilities, the Bayesian approach\nconsiders all the evidence in the email, both good and bad.\nWords that occur disproportionately rarely\nin spam (like \"though\" or \"tonight\" or \"apparently\")\ncontribute as much to decreasing the probability as\nbad words like \"unsubscribe\" and \"opt-in\" do to\nincreasing it.  So an otherwise innocent email that happens\nto include the word \"sex\" is not going to get tagged as spam.Ideally, of course, the probabilities should be calculated\nindividually for each user.  I get a lot of email containing\nthe word \"Lisp\", and (so far) no spam that does.  So a word\nlike that is effectively a kind of password for sending\nmail to me.  In my earlier spam-filtering software, the user\ncould set up a list of such words and mail containing\nthem would automatically get past the filters.  On my\nlist I put words like \"Lisp\" and also my zipcode, so\nthat (otherwise rather spammy-sounding) receipts from\nonline orders would get through.  I thought I was being\nvery clever, but I found that the Bayesian filter did the\nsame thing for me, and moreover discovered of a lot of words I\nhadn't thought of.When I said at the start that our filters let through less than\n5 spams per 1000 with 0 false positives, I'm talking about\nfiltering my mail based on a corpus of my mail.  But these\nnumbers are not misleading, because that is the approach I'm\nadvocating: filter each user's mail based on the spam and\nnonspam mail he receives.  Essentially, each user should\nhave two delete buttons, ordinary delete and delete-as-spam.\nAnything deleted as spam goes into the spam corpus,   \nand everything else goes into the nonspam corpus.You could start\nusers with a seed filter, but ultimately each user should have\nhis own per-word probabilities based on the actual mail he\nreceives.  This (a) makes the filters more effective, (b) lets\neach user decide their own precise definition of spam,\nand (c) perhaps best of all makes it hard for spammers\nto tune mails to get through the filters.",
        "start_char_idx": 6708,
        "end_char_idx": 10669,
        "text_template": "{metadata_str}\n\n{content}",
        "metadata_template": "{key}: {value}",
        "metadata_seperator": "\n",
        "class_name": "TextNode"
      },
      "__type__": "1"
    },
    "8c9cbc2f-99d9-43c4-9372-dbf27f91d4fb": {
      "__data__": {
        "id_": "8c9cbc2f-99d9-43c4-9372-dbf27f91d4fb",
        "embedding": null,
        "metadata": {
          "source": "https://paulgraham.com/spam.html",
          "title": "A Plan for Spam",
          "language": null
        },
        "excluded_embed_metadata_keys": [],
        "excluded_llm_metadata_keys": [],
        "relationships": {
          "1": {
            "node_id": "04424a6d-a9ec-4307-b135-c9f8d95037fc",
            "node_type": "4",
            "metadata": {
              "source": "https://paulgraham.com/spam.html",
              "title": "A Plan for Spam",
              "language": null
            },
            "hash": "689da0358fc0164fdfe889c470e00d31d72a0dbce462deefe433dbef56b31b5f",
            "class_name": "RelatedNodeInfo"
          },
          "2": {
            "node_id": "0e95905f-ae7d-419a-940f-33529f315f11",
            "node_type": "1",
            "metadata": {
              "source": "https://paulgraham.com/spam.html",
              "title": "A Plan for Spam",
              "language": null
            },
            "hash": "d76780d3fc2a93b64ab06dcdcfbbb53bb1fa8bc138ca0418d3e892c03e904432",
            "class_name": "RelatedNodeInfo"
          },
          "3": {
            "node_id": "748a28df-af66-4f5e-8927-d0e3ca37221f",
            "node_type": "1",
            "metadata": {},
            "hash": "5e0e01d08e012bef7a0865062937041866caf2de02762ed37dc5e6ada4407f3c",
            "class_name": "RelatedNodeInfo"
          }
        },
        "text": "But these\nnumbers are not misleading, because that is the approach I'm\nadvocating: filter each user's mail based on the spam and\nnonspam mail he receives.  Essentially, each user should\nhave two delete buttons, ordinary delete and delete-as-spam.\nAnything deleted as spam goes into the spam corpus,   \nand everything else goes into the nonspam corpus.You could start\nusers with a seed filter, but ultimately each user should have\nhis own per-word probabilities based on the actual mail he\nreceives.  This (a) makes the filters more effective, (b) lets\neach user decide their own precise definition of spam,\nand (c) perhaps best of all makes it hard for spammers\nto tune mails to get through the filters.  If a lot of the  \nbrain of the filter is in the individual databases, then \nmerely tuning spams to get through the seed filters\nwon't guarantee anything about how well they'll get through\nindividual users' varying and much more trained filters.Content-based spam filtering is often combined with a whitelist,\na list of senders whose mail can be accepted with no filtering.\nOne easy way to build such a\nwhitelist is to keep a list of every address the user has\never sent mail to.  If a mail reader has a delete-as-spam\nbutton then you could also add the from address\nof every email the user has deleted as ordinary trash.I'm an advocate of whitelists, but more as a way to save  \ncomputation than as a way to improve filtering.  I used to think that\nwhitelists would make filtering easier, because you'd\nonly have to filter email from people you'd never heard\nfrom, and someone sending you mail for the first time is\nconstrained by convention in what they can say to you.\nSomeone you already know might send you an email talking about sex,\nbut someone sending you mail for the first time would not   \nbe likely to.  The problem is, people can have more than one \nemail address, so a new from-address doesn't guarantee that\nthe sender is writing to you for the first time.\nIt is not unusual\nfor an old friend (especially if he is a hacker) to suddenly\nsend you an email with a new from-address, so you can't\nrisk false positives by filtering mail from unknown  \naddresses especially stringently.In a sense, though, my filters do themselves embody a kind\nof whitelist (and blacklist) because they are based on\nentire messages, including the headers.  So to that\nextent they \"know\" the email addresses of trusted senders\nand even the routes by which mail gets from them to me.   \nAnd they know the same about spam, including the server   \nnames, mailer versions, and protocols._ _ _If I thought that I could keep up current rates of spam\nfiltering, I would consider this problem solved.  But it\ndoesn't mean much to be able to filter out most present-day\nspam, because spam evolves.\nIndeed, most \nantispam techniques so far have been like pesticides that\ndo nothing more than create a new, resistant strain of bugs.I'm more hopeful about Bayesian filters, because they evolve\nwith the spam.  So as spammers start using \"c0ck\"   \ninstead of \"cock\" to evade simple-minded spam filters     \nbased on individual words, Bayesian filters automatically\nnotice.  Indeed, \"c0ck\" is far more damning evidence than\n\"cock\", and Bayesian filters know precisely how much more.Still, anyone who proposes a plan for spam filtering has to\nbe able to answer the question: if the spammers knew\nexactly what you were doing,\nhow well could they get past you?  For example, I think that if\nchecksum-based spam filtering becomes a serious obstacle,\nthe spammers will just\nswitch to mad-lib techniques for generating message bodies.To beat Bayesian filters, it would not be enough for spammers\nto make their emails unique or to stop using individual\nnaughty words.  They'd have to make their mails indistinguishable\nfrom your ordinary mail.  And this I think would severely\nconstrain them.  Spam is mostly sales\npitches, so unless your regular mail is all sales pitches,\nspams will inevitably have a different character.  And    \nthe spammers would also, of course, have to change (and keep \nchanging) their whole infrastructure, because otherwise\nthe headers would look as bad to the Bayesian filters as ever,\nno matter what they did to the message body.",
        "start_char_idx": 9966,
        "end_char_idx": 14198,
        "text_template": "{metadata_str}\n\n{content}",
        "metadata_template": "{key}: {value}",
        "metadata_seperator": "\n",
        "class_name": "TextNode"
      },
      "__type__": "1"
    },
    "748a28df-af66-4f5e-8927-d0e3ca37221f": {
      "__data__": {
        "id_": "748a28df-af66-4f5e-8927-d0e3ca37221f",
        "embedding": null,
        "metadata": {
          "source": "https://paulgraham.com/spam.html",
          "title": "A Plan for Spam",
          "language": null
        },
        "excluded_embed_metadata_keys": [],
        "excluded_llm_metadata_keys": [],
        "relationships": {
          "1": {
            "node_id": "04424a6d-a9ec-4307-b135-c9f8d95037fc",
            "node_type": "4",
            "metadata": {
              "source": "https://paulgraham.com/spam.html",
              "title": "A Plan for Spam",
              "language": null
            },
            "hash": "689da0358fc0164fdfe889c470e00d31d72a0dbce462deefe433dbef56b31b5f",
            "class_name": "RelatedNodeInfo"
          },
          "2": {
            "node_id": "8c9cbc2f-99d9-43c4-9372-dbf27f91d4fb",
            "node_type": "1",
            "metadata": {
              "source": "https://paulgraham.com/spam.html",
              "title": "A Plan for Spam",
              "language": null
            },
            "hash": "19ea6f926d504507817854b93ea961d0310ab2568e6be385cd3d7937e90b20c2",
            "class_name": "RelatedNodeInfo"
          },
          "3": {
            "node_id": "94234594-5158-4035-9842-b51603b6c0d5",
            "node_type": "1",
            "metadata": {},
            "hash": "177c6070cbdb436ec96e3a624907e0df18e04cc5dccff5f92f534d6ed07590c5",
            "class_name": "RelatedNodeInfo"
          }
        },
        "text": "For example, I think that if\nchecksum-based spam filtering becomes a serious obstacle,\nthe spammers will just\nswitch to mad-lib techniques for generating message bodies.To beat Bayesian filters, it would not be enough for spammers\nto make their emails unique or to stop using individual\nnaughty words.  They'd have to make their mails indistinguishable\nfrom your ordinary mail.  And this I think would severely\nconstrain them.  Spam is mostly sales\npitches, so unless your regular mail is all sales pitches,\nspams will inevitably have a different character.  And    \nthe spammers would also, of course, have to change (and keep \nchanging) their whole infrastructure, because otherwise\nthe headers would look as bad to the Bayesian filters as ever,\nno matter what they did to the message body.  I don't know\nenough about the infrastructure that spammers use to know\nhow hard it would be to make the headers look innocent, but\nmy guess is that it would be even harder than making the    \nmessage look innocent.Assuming they could solve the problem of the headers,\nthe spam of the future will probably look something like\nthis:\n\nHey there.  Thought you should check out the following:\nhttp://www.27meg.com/foo\n\nbecause that is about as much sales pitch as content-based\nfiltering will leave the spammer room to make.  (Indeed, it\nwill be hard even to get this past filters, because if everything\nelse in the email is neutral, the spam probability will hinge on\nthe url, and it will take some effort to make that look neutral.)Spammers range from businesses running so-called\nopt-in lists who don't even try to conceal their identities,\nto guys who hijack mail servers to send out spams promoting\nporn sites.  If we use filtering to whittle their\noptions down to mails like the one above, that should\npretty much put the spammers on the \"legitimate\" end of\nthe spectrum out of business; they feel obliged\nby various state laws to include boilerplate about why\ntheir spam is not spam, and how to cancel your\n\"subscription,\"  and that kind of text is easy to   \nrecognize.(I used to think it was naive to believe that stricter laws\nwould decrease spam.  Now I think that while stricter laws  \nmay not decrease the amount of spam that spammers send,\nthey can certainly help filters to decrease the amount of  \nspam that recipients actually see.)All along the spectrum, if you restrict the sales pitches spammers\ncan make, you will inevitably tend to put them out of\nbusiness.  That word business is an important one to\nremember.  The spammers are businessmen.  They send spam because\nit works.  It works because although the response rate\nis abominably low (at best 15 per million, vs 3000 per\nmillion for a catalog mailing), the cost, to them, is  \npractically nothing.  The cost is enormous for the recipients,   \nabout 5 man-weeks for each million recipients who spend  \na second to delete the spam, but the spammer\ndoesn't have to pay that.Sending spam does cost the spammer something, though. [2]\nSo the lower we can get the\nresponse rate-- whether by filtering, or by using filters to force\nspammers to dilute their pitches-- the fewer businesses will find it\nworth their while to send spam.The reason the spammers use the kinds of \nsales\npitches that they do is to increase response rates.\nThis is possibly even more disgusting\nthan getting inside the mind of a spammer,\nbut let's take a quick look inside the mind of someone\nwho responds to a spam.  This person is either\nastonishingly credulous or deeply in denial about their   \nsexual interests.  In either case, repulsive or\nidiotic as the spam seems to us, it is exciting\nto them.  The spammers wouldn't say these things if they\ndidn't sound exciting.  And \"thought you\nshould check out the following\" is just not going to\nhave nearly the pull with the spam recipient as\nthe kinds of things that spammers say now.\nResult: if it can't contain exciting sales pitches,\nspam becomes less effective as a marketing vehicle,\nand fewer businesses want to use it.That is the big win in the end.  I started writing spam\nfiltering software because I didn't want have to look at\nthe stuff anymore.\nBut if we get good enough at filtering\nout spam, it will stop working, and the spammers\nwill actually stop sending it._ _ _Of all the approaches to fighting spam, from software to laws,\nI believe Bayesian filtering will be the single most\neffective.",
        "start_char_idx": 13406,
        "end_char_idx": 17797,
        "text_template": "{metadata_str}\n\n{content}",
        "metadata_template": "{key}: {value}",
        "metadata_seperator": "\n",
        "class_name": "TextNode"
      },
      "__type__": "1"
    },
    "94234594-5158-4035-9842-b51603b6c0d5": {
      "__data__": {
        "id_": "94234594-5158-4035-9842-b51603b6c0d5",
        "embedding": null,
        "metadata": {
          "source": "https://paulgraham.com/spam.html",
          "title": "A Plan for Spam",
          "language": null
        },
        "excluded_embed_metadata_keys": [],
        "excluded_llm_metadata_keys": [],
        "relationships": {
          "1": {
            "node_id": "04424a6d-a9ec-4307-b135-c9f8d95037fc",
            "node_type": "4",
            "metadata": {
              "source": "https://paulgraham.com/spam.html",
              "title": "A Plan for Spam",
              "language": null
            },
            "hash": "689da0358fc0164fdfe889c470e00d31d72a0dbce462deefe433dbef56b31b5f",
            "class_name": "RelatedNodeInfo"
          },
          "2": {
            "node_id": "748a28df-af66-4f5e-8927-d0e3ca37221f",
            "node_type": "1",
            "metadata": {
              "source": "https://paulgraham.com/spam.html",
              "title": "A Plan for Spam",
              "language": null
            },
            "hash": "3dff4df51c74133299a66f444554742f5b5234f3dc587a404227138692d99b11",
            "class_name": "RelatedNodeInfo"
          },
          "3": {
            "node_id": "82020273-3233-47b0-9749-7fb01bcb3173",
            "node_type": "1",
            "metadata": {},
            "hash": "d8bb7f78320028392f448d88c9f78a8a442018165d1e34f87a0a6595cba414fa",
            "class_name": "RelatedNodeInfo"
          }
        },
        "text": "In either case, repulsive or\nidiotic as the spam seems to us, it is exciting\nto them.  The spammers wouldn't say these things if they\ndidn't sound exciting.  And \"thought you\nshould check out the following\" is just not going to\nhave nearly the pull with the spam recipient as\nthe kinds of things that spammers say now.\nResult: if it can't contain exciting sales pitches,\nspam becomes less effective as a marketing vehicle,\nand fewer businesses want to use it.That is the big win in the end.  I started writing spam\nfiltering software because I didn't want have to look at\nthe stuff anymore.\nBut if we get good enough at filtering\nout spam, it will stop working, and the spammers\nwill actually stop sending it._ _ _Of all the approaches to fighting spam, from software to laws,\nI believe Bayesian filtering will be the single most\neffective.  But I also\nthink that the more different kinds of antispam efforts\nwe undertake, the better, because any measure that\nconstrains spammers will tend to make filtering easier.\nAnd even within the world of content-based filtering, I think\nit will be a good thing if there are many different kinds\nof software being used simultaneously.  The more different \nfilters there are, the harder it will be for\nspammers to tune spams to get through them.\nAppendix: Examples of FilteringHere is an example of a spam that arrived while I was writing\nthis article.  The fifteen most interesting words in this spam are:\n\nqvp0045\nindira\nmx-05\nintimail\n$7500\nfreeyankeedom\ncdo\nbluefoxmedia\njpg\nunsecured\nplatinum\n3d0\nqves\n7c5\n7c266675\n\nThe words are a mix of stuff from the headers and from the\nmessage body, which is typical of spam.  Also typical of spam\nis that every one of these words has a spam probability,\nin my database, of .99.  In fact there are more than fifteen words\nwith probabilities of .99, and these are just the first\nfifteen seen.Unfortunately that makes this email a boring example of\nthe use of Bayes' Rule.  To see an interesting variety of\nprobabilities we have to look at this actually quite\natypical spam.The fifteen most interesting words in this spam, with their probabilities,\nare:\n\nmadam           0.99\npromotion       0.99\nrepublic        0.99\nshortest        0.047225013\nmandatory       0.047225013\nstandardization 0.07347802\nsorry           0.08221981\nsupported       0.09019077\npeople's        0.09019077\nenter           0.9075001\nquality         0.8921298\norganization    0.12454646\ninvestment      0.8568143\nvery            0.14758544\nvaluable        0.82347786 \n\nThis time the evidence is a mix of good and bad.  A word like  \n\"shortest\" is almost as much evidence for innocence as a\nword like \"madam\" or \"promotion\" is for guilt.  But still the\ncase for guilt is stronger.  If you combine these numbers\naccording to Bayes' Rule, the resulting probability is .9027.\"Madam\" is obviously from spams beginning\n\"Dear Sir or Madam.\"  They're not very common, but the\nword \"madam\" never occurs in my legitimate email, and\nit's all about the ratio.\"Republic\" scores high because\nit often shows up in Nigerian scam emails, and also occurs once\nor twice in spams referring to Korea and South Africa.\nYou might say that it's\nan accident that it thus helps identify this spam.  But I've\nfound when examining spam probabilities that there are\na lot of these accidents, and they have an uncanny tendency to\npush things in the right direction rather than the wrong one.\nIn this case, it is not entirely a coincidence that the word\n\"Republic\" occurs in Nigerian scam emails and this spam.\nThere is a whole class of dubious business propositions involving\nless developed countries, and these in turn are more likely\nto have names that specify explicitly (because they aren't) that they\nare republics.[3]On the other hand, \"enter\" is a genuine miss.  It occurs\nmostly in unsubscribe instructions, but here is used in a\ncompletely innocent way.",
        "start_char_idx": 16957,
        "end_char_idx": 20844,
        "text_template": "{metadata_str}\n\n{content}",
        "metadata_template": "{key}: {value}",
        "metadata_seperator": "\n",
        "class_name": "TextNode"
      },
      "__type__": "1"
    },
    "82020273-3233-47b0-9749-7fb01bcb3173": {
      "__data__": {
        "id_": "82020273-3233-47b0-9749-7fb01bcb3173",
        "embedding": null,
        "metadata": {
          "source": "https://paulgraham.com/spam.html",
          "title": "A Plan for Spam",
          "language": null
        },
        "excluded_embed_metadata_keys": [],
        "excluded_llm_metadata_keys": [],
        "relationships": {
          "1": {
            "node_id": "04424a6d-a9ec-4307-b135-c9f8d95037fc",
            "node_type": "4",
            "metadata": {
              "source": "https://paulgraham.com/spam.html",
              "title": "A Plan for Spam",
              "language": null
            },
            "hash": "689da0358fc0164fdfe889c470e00d31d72a0dbce462deefe433dbef56b31b5f",
            "class_name": "RelatedNodeInfo"
          },
          "2": {
            "node_id": "94234594-5158-4035-9842-b51603b6c0d5",
            "node_type": "1",
            "metadata": {
              "source": "https://paulgraham.com/spam.html",
              "title": "A Plan for Spam",
              "language": null
            },
            "hash": "254c5fd0d4d582bfdc20fbe440db85209ced12d3f83979c47fa238de6d759118",
            "class_name": "RelatedNodeInfo"
          },
          "3": {
            "node_id": "52129057-61d8-4bf6-9d9e-d5e764ef724f",
            "node_type": "1",
            "metadata": {},
            "hash": "7760073af1175c4267447cff6abbe24fac14873a611bcd07e113bd985fb27bd9",
            "class_name": "RelatedNodeInfo"
          }
        },
        "text": "\"Republic\" scores high because\nit often shows up in Nigerian scam emails, and also occurs once\nor twice in spams referring to Korea and South Africa.\nYou might say that it's\nan accident that it thus helps identify this spam.  But I've\nfound when examining spam probabilities that there are\na lot of these accidents, and they have an uncanny tendency to\npush things in the right direction rather than the wrong one.\nIn this case, it is not entirely a coincidence that the word\n\"Republic\" occurs in Nigerian scam emails and this spam.\nThere is a whole class of dubious business propositions involving\nless developed countries, and these in turn are more likely\nto have names that specify explicitly (because they aren't) that they\nare republics.[3]On the other hand, \"enter\" is a genuine miss.  It occurs\nmostly in unsubscribe instructions, but here is used in a\ncompletely innocent way.  Fortunately the statistical approach is\nfairly robust, and can tolerate quite a lot of misses\nbefore the results start to be thrown off.For comparison, \nhere is an example of that rare bird, a spam that\ngets through the filters.  Why?  Because by sheer chance it happens\nto be loaded with words that occur in my actual email:\n\nperl       0.01\npython     0.01\ntcl        0.01\nscripting  0.01\nmorris     0.01\ngraham     0.01491078\nguarantee  0.9762507\ncgi        0.9734398\npaul       0.027040077\nquite      0.030676773\npop3       0.042199217\nvarious    0.06080265\nprices     0.9359873\nmanaged    0.06451222\ndifficult  0.071706355\n\nThere are a couple pieces of good news here.  First, this mail\nprobably wouldn't get through the filters of someone who didn't\nhappen to specialize in programming languages and have a good\nfriend called Morris.  For the average user, all the top five words here \nwould be neutral and would not contribute to the spam probability.Second, I think filtering based on word pairs \n(see below) might well\ncatch this one:  \"cost effective\", \"setup fee\", \"money back\" -- pretty\nincriminating stuff.  And of course if they continued to spam me\n(or a network I was part of), \"Hostex\" itself would be\nrecognized as  a spam term.Finally, here is an innocent email.\nIts  fifteen most interesting words are as follows:\n\ncontinuation  0.01\ndescribe      0.01\ncontinuations 0.01\nexample       0.033600237\nprogramming   0.05214485 \ni'm           0.055427782\nexamples      0.07972858 \ncolor         0.9189189  \nlocalhost     0.09883721\nhi            0.116539136\ncalifornia    0.84421706\nsame          0.15981844\nspot          0.1654587\nus-ascii      0.16804294\nwhat          0.19212411\n\nMost of the words here indicate the mail is an innocent one.\nThere are two bad smelling words,  \"color\"\n(spammers love colored fonts) and \"California\"\n(which occurs in testimonials and also in menus in\nforms), but they are not enough to outweigh obviously\ninnocent words like \"continuation\" and \"example\".It's interesting that \"describe\" rates as so thoroughly\ninnocent.  It hasn't occurred in a\nsingle one of my 4000 spams.  The data turns out to be\nfull of such surprises.  One of the things you learn\nwhen you analyze spam texts is how\nnarrow a subset of the language spammers operate in.  It's\nthat fact, together with the equally characteristic vocabulary\nof any individual user's mail, that makes Bayesian filtering\na good bet.Appendix: More IdeasOne idea that I haven't tried yet is to filter based on\nword pairs, or even triples, rather than individual words.\nThis should yield a much sharper estimate of the probability.\nFor example, in my current database, the word \"offers\"\nhas a probability of .96.",
        "start_char_idx": 19959,
        "end_char_idx": 23554,
        "text_template": "{metadata_str}\n\n{content}",
        "metadata_template": "{key}: {value}",
        "metadata_seperator": "\n",
        "class_name": "TextNode"
      },
      "__type__": "1"
    },
    "52129057-61d8-4bf6-9d9e-d5e764ef724f": {
      "__data__": {
        "id_": "52129057-61d8-4bf6-9d9e-d5e764ef724f",
        "embedding": null,
        "metadata": {
          "source": "https://paulgraham.com/spam.html",
          "title": "A Plan for Spam",
          "language": null
        },
        "excluded_embed_metadata_keys": [],
        "excluded_llm_metadata_keys": [],
        "relationships": {
          "1": {
            "node_id": "04424a6d-a9ec-4307-b135-c9f8d95037fc",
            "node_type": "4",
            "metadata": {
              "source": "https://paulgraham.com/spam.html",
              "title": "A Plan for Spam",
              "language": null
            },
            "hash": "689da0358fc0164fdfe889c470e00d31d72a0dbce462deefe433dbef56b31b5f",
            "class_name": "RelatedNodeInfo"
          },
          "2": {
            "node_id": "82020273-3233-47b0-9749-7fb01bcb3173",
            "node_type": "1",
            "metadata": {
              "source": "https://paulgraham.com/spam.html",
              "title": "A Plan for Spam",
              "language": null
            },
            "hash": "b2d987adfd2c4f2c313fc570d099725d60fef911091672216e9d6d7ae423f594",
            "class_name": "RelatedNodeInfo"
          },
          "3": {
            "node_id": "973780a6-1aef-4d24-bc48-e839481592ec",
            "node_type": "1",
            "metadata": {},
            "hash": "85486ae1d10d8c6cdae89a93d177af2fd7c8a4abf996415e8c2c5571a23e71b9",
            "class_name": "RelatedNodeInfo"
          }
        },
        "text": "It hasn't occurred in a\nsingle one of my 4000 spams.  The data turns out to be\nfull of such surprises.  One of the things you learn\nwhen you analyze spam texts is how\nnarrow a subset of the language spammers operate in.  It's\nthat fact, together with the equally characteristic vocabulary\nof any individual user's mail, that makes Bayesian filtering\na good bet.Appendix: More IdeasOne idea that I haven't tried yet is to filter based on\nword pairs, or even triples, rather than individual words.\nThis should yield a much sharper estimate of the probability.\nFor example, in my current database, the word \"offers\"\nhas a probability of .96.  If you based the probabilities  \non word pairs, you'd end up with \"special offers\"\nand \"valuable offers\" having probabilities of .99\nand, say, \"approach offers\" (as in \"this approach offers\")\nhaving a probability of .1 or less.The reason I haven't done this is that filtering based on\nindividual words already works so well.  But it does\nmean that there is room to tighten the filters if spam\ngets harder to detect.\n(Curiously, a filter based on word pairs would be\nin effect a Markov-chaining text generator running\nin reverse.)Specific spam features (e.g. not seeing the recipient's\naddress in the to: field) do of course have value in \nrecognizing spam.  They can be considered in this\nalgorithm by treating them as virtual words.  I'll probably\ndo this in future versions, at least for a handful of the\nmost egregious spam indicators. Feature-recognizing\nspam filters are right in many details; what they lack\nis an overall discipline for combining evidence.Recognizing nonspam features may be more important than\nrecognizing spam features.  False positives are such a\nworry that they demand extraordinary measures.  I will\nprobably in future versions add a second level of testing\ndesigned specifically to avoid false positives.  If a\nmail triggers this second level of filters it will be accepted\neven if its spam probability is above the threshold.I don't expect this second level of filtering to be Bayesian.\nIt will inevitably \nbe not only ad hoc, but based on guesses, because the number of\nfalse positives will not tend to be large enough to notice patterns.\n(It is just as well, anyway, if a backup system doesn't rely on the same\ntechnology as the primary system.)Another thing I may try in the future is to focus extra attention\non specific parts of the email.  For example, about 95% of current\nspam includes the url of a site they want\nyou to visit.  (The remaining 5% want you to call a phone number,\nreply by email or to a US mail address, or in a few\ncases to buy a certain stock.)   The url is in such cases\npractically enough by itself to determine whether the email\nis spam.Domain names differ from the rest of the text in\na (non-German) email in that they often consist of several\nwords stuck together.  Though computationally expensive \nin the general case, it might be worth trying to \ndecompose them.  If a filter has never seen the\ntoken \"xxxporn\" before it will have an individual spam\nprobability of .4, whereas \"xxx\" and \"porn\" individually\nhave probabilities (in my corpus) of .9889 and .99\nrespectively, and a combined probability of .9998.I expect decomposing domain names to become more\nimportant as spammers are gradually forced to stop using\nincriminating words in the text of their messages.  (A url\nwith an ip address is of course an extremely incriminating sign,\nexcept in the mail of a few sysadmins.)It might be a good idea to have a cooperatively maintained\nlist of urls promoted by spammers.  We'd need a trust metric\nof the type studied by Raph Levien to prevent malicious\nor incompetent submissions, but if we had such a thing it\nwould provide a boost to any filtering software.   It would\nalso be a convenient basis for boycotts.Another way to test dubious urls would be to send out a\ncrawler to look at the site before the user looked at the\nemail mentioning it.  You could use a Bayesian filter to\nrate the site just as you would an email, and whatever\nwas found on the site could be included in calculating\nthe probability of the email being a spam.  A url that led\nto a redirect would of course be especially suspicious.One cooperative project that I think really would be a good\nidea would be to accumulate a giant corpus of spam.",
        "start_char_idx": 22916,
        "end_char_idx": 27237,
        "text_template": "{metadata_str}\n\n{content}",
        "metadata_template": "{key}: {value}",
        "metadata_seperator": "\n",
        "class_name": "TextNode"
      },
      "__type__": "1"
    },
    "973780a6-1aef-4d24-bc48-e839481592ec": {
      "__data__": {
        "id_": "973780a6-1aef-4d24-bc48-e839481592ec",
        "embedding": null,
        "metadata": {
          "source": "https://paulgraham.com/spam.html",
          "title": "A Plan for Spam",
          "language": null
        },
        "excluded_embed_metadata_keys": [],
        "excluded_llm_metadata_keys": [],
        "relationships": {
          "1": {
            "node_id": "04424a6d-a9ec-4307-b135-c9f8d95037fc",
            "node_type": "4",
            "metadata": {
              "source": "https://paulgraham.com/spam.html",
              "title": "A Plan for Spam",
              "language": null
            },
            "hash": "689da0358fc0164fdfe889c470e00d31d72a0dbce462deefe433dbef56b31b5f",
            "class_name": "RelatedNodeInfo"
          },
          "2": {
            "node_id": "52129057-61d8-4bf6-9d9e-d5e764ef724f",
            "node_type": "1",
            "metadata": {
              "source": "https://paulgraham.com/spam.html",
              "title": "A Plan for Spam",
              "language": null
            },
            "hash": "0b9d90c40d468e08cb408df49a14e6ed72e3e2a4c425ed556cc60a455d0b3250",
            "class_name": "RelatedNodeInfo"
          },
          "3": {
            "node_id": "749a02f4-d585-4a0e-b739-0a139a9820da",
            "node_type": "1",
            "metadata": {},
            "hash": "7b439d68d39b088c646f4d6affa61e746cc73ff581a6d84abe93bf51cb4de440",
            "class_name": "RelatedNodeInfo"
          }
        },
        "text": ")It might be a good idea to have a cooperatively maintained\nlist of urls promoted by spammers.  We'd need a trust metric\nof the type studied by Raph Levien to prevent malicious\nor incompetent submissions, but if we had such a thing it\nwould provide a boost to any filtering software.   It would\nalso be a convenient basis for boycotts.Another way to test dubious urls would be to send out a\ncrawler to look at the site before the user looked at the\nemail mentioning it.  You could use a Bayesian filter to\nrate the site just as you would an email, and whatever\nwas found on the site could be included in calculating\nthe probability of the email being a spam.  A url that led\nto a redirect would of course be especially suspicious.One cooperative project that I think really would be a good\nidea would be to accumulate a giant corpus of spam.  A large,\nclean corpus is the key to making Bayesian filtering work\nwell.  Bayesian filters could actually use the corpus as\ninput.  But such a corpus would be useful for other kinds\nof filters too, because it could be used to test them.Creating such a corpus poses some technical problems.  We'd\nneed trust metrics to prevent malicious or incompetent\nsubmissions, of course.  We'd also need ways of erasing   \npersonal information (not just to-addresses and ccs, but\nalso e.g. the arguments to unsubscribe urls, which often\nencode the to-address) from mails in the corpus.  If anyone\nwants to take on this project, it would be a good thing for\nthe world.Appendix: Defining SpamI think there is a rough\nconsensus on what spam is, but it would be useful to have\nan explicit definition.  We'll need to do this if we want to establish\na central corpus of spam, or even to compare spam filtering\nrates meaningfully.To start with, spam is not unsolicited commercial email.\nIf someone in my neighborhood heard that I was looking for an old\nRaleigh three-speed in good condition, and sent me an email\noffering to sell me one, I'd be delighted, and yet this\nemail would be both commercial and unsolicited.  The\ndefining feature of spam (in fact, its raison d'etre)\nis not that it is unsolicited, but that it is automated.It is merely incidental, too, that spam is usually commercial.\nIf someone started sending mass email to support some political\ncause, for example, it would be just as much spam as email\npromoting a porn site.I propose we define spam as unsolicited automated email.\nThis definition thus includes some email\nthat many legal definitions of spam don't.  Legal definitions\nof spam, influenced presumably by lobbyists, tend to exclude\nmail sent by companies that have an \"existing relationship\" with\nthe recipient.  But buying something from a company, for\nexample, does not imply that you have solicited\nongoing email from them.\nIf I order something from an online\nstore, and they then send me a stream of spam, it's still\nspam.Companies sending spam often give you a way to \"unsubscribe,\"\nor ask you to go to their site and change your \"account\npreferences\" if you want to stop getting spam.  This is\nnot enough to stop the mail from being spam.  Not opting out\nis not the same as opting in.  Unless the   \nrecipient explicitly checked a clearly labelled box (whose\ndefault was no) asking to receive the email, then it is spam.In some business relationships, you do implicitly solicit\ncertain kinds of mail.   When you order online, I think you\nimplicitly solicit a receipt, and notification when the\norder ships.\nI don't mind when Verisign sends me mail warning that\na domain name is about to expire (at least, if they are the\nactual \nregistrar for it).  But when Verisign sends me\nemail offering a FREE Guide to Building My\nE-Commerce Web Site, that's spam.\nNotes:[1] The examples in this article are translated\ninto Common Lisp for, believe it or not, greater accessibility.\nThe application described here is one that we wrote in order to\ntest a new Lisp dialect called Arc that is \nnot yet released.[2] Currently the lowest rate seems to be about $200 to send a million spams.\nThat's very cheap, 1/50th of a cent per spam.\nBut filtering out 95%\nof spam, for example, would increase the spammers' cost to reach\na given audience by a factor of 20.  Few can have\nmargins big enough to absorb that.",
        "start_char_idx": 26396,
        "end_char_idx": 30645,
        "text_template": "{metadata_str}\n\n{content}",
        "metadata_template": "{key}: {value}",
        "metadata_seperator": "\n",
        "class_name": "TextNode"
      },
      "__type__": "1"
    },
    "749a02f4-d585-4a0e-b739-0a139a9820da": {
      "__data__": {
        "id_": "749a02f4-d585-4a0e-b739-0a139a9820da",
        "embedding": null,
        "metadata": {
          "source": "https://paulgraham.com/spam.html",
          "title": "A Plan for Spam",
          "language": null
        },
        "excluded_embed_metadata_keys": [],
        "excluded_llm_metadata_keys": [],
        "relationships": {
          "1": {
            "node_id": "04424a6d-a9ec-4307-b135-c9f8d95037fc",
            "node_type": "4",
            "metadata": {
              "source": "https://paulgraham.com/spam.html",
              "title": "A Plan for Spam",
              "language": null
            },
            "hash": "689da0358fc0164fdfe889c470e00d31d72a0dbce462deefe433dbef56b31b5f",
            "class_name": "RelatedNodeInfo"
          },
          "2": {
            "node_id": "973780a6-1aef-4d24-bc48-e839481592ec",
            "node_type": "1",
            "metadata": {
              "source": "https://paulgraham.com/spam.html",
              "title": "A Plan for Spam",
              "language": null
            },
            "hash": "4113730bf2e693bee58425a03f70e57ed54b66aed074a95da6b18ffa0f19e258",
            "class_name": "RelatedNodeInfo"
          },
          "3": {
            "node_id": "a5bf9e73-43fd-495f-b158-9aae3d8deaa3",
            "node_type": "1",
            "metadata": {},
            "hash": "7dbea668be87434ced2202a1ba33d6f7c467f96d8a73d506cf759e125289e150",
            "class_name": "RelatedNodeInfo"
          }
        },
        "text": "I don't mind when Verisign sends me mail warning that\na domain name is about to expire (at least, if they are the\nactual \nregistrar for it).  But when Verisign sends me\nemail offering a FREE Guide to Building My\nE-Commerce Web Site, that's spam.\nNotes:[1] The examples in this article are translated\ninto Common Lisp for, believe it or not, greater accessibility.\nThe application described here is one that we wrote in order to\ntest a new Lisp dialect called Arc that is \nnot yet released.[2] Currently the lowest rate seems to be about $200 to send a million spams.\nThat's very cheap, 1/50th of a cent per spam.\nBut filtering out 95%\nof spam, for example, would increase the spammers' cost to reach\na given audience by a factor of 20.  Few can have\nmargins big enough to absorb that.[3] As a rule of thumb, the more qualifiers there are before the\nname of a country, the more corrupt the rulers.  A\ncountry called The Socialist People's Democratic Republic\nof X is probably the last place in the world you'd want to live.\nThanks to Sarah Harlin for reading drafts of this; Daniel Giffin (who is \nalso writing the production Arc interpreter) for several good ideas about\nfiltering and for creating our mail infrastructure; Robert Morris,\nTrevor Blackwell and Erann Gat for many discussions about spam; Raph \nLevien for advice about trust metrics;  and Chip Coldwell \nand Sam Steingold for advice about statistics.\n\nYou'll find this essay and 14 others in\nHackers & Painters.\n\n\nMore Info:Plan for Spam FAQBetter Bayesian FilteringFilters that Fight BackWill Filters Kill Spam?Japanese TranslationSpanish TranslationChinese TranslationProbabilitySpam is DifferentFilters vs. BlacklistsTrust MetricsFiltering ResearchMicrosoft PatentSlashdot ArticleThe Wrong WayLWN: Filter ComparisonCRM114 gets 99.87%",
        "start_char_idx": 29861,
        "end_char_idx": 31660,
        "text_template": "{metadata_str}\n\n{content}",
        "metadata_template": "{key}: {value}",
        "metadata_seperator": "\n",
        "class_name": "TextNode"
      },
      "__type__": "1"
    },
    "a5bf9e73-43fd-495f-b158-9aae3d8deaa3": {
      "__data__": {
        "id_": "a5bf9e73-43fd-495f-b158-9aae3d8deaa3",
        "embedding": null,
        "metadata": {
          "source": "https://paulgraham.com/mit.html",
          "title": "A Student's Guide to Startups",
          "language": null
        },
        "excluded_embed_metadata_keys": [],
        "excluded_llm_metadata_keys": [],
        "relationships": {
          "1": {
            "node_id": "e2e993b4-339f-4956-9491-c0595edfebaa",
            "node_type": "4",
            "metadata": {
              "source": "https://paulgraham.com/mit.html",
              "title": "A Student's Guide to Startups",
              "language": null
            },
            "hash": "78c8e5e78dd072208ba5d428d40b75ebd75d71e4357be53d33db1fe54a9b3f2d",
            "class_name": "RelatedNodeInfo"
          },
          "2": {
            "node_id": "749a02f4-d585-4a0e-b739-0a139a9820da",
            "node_type": "1",
            "metadata": {
              "source": "https://paulgraham.com/spam.html",
              "title": "A Plan for Spam",
              "language": null
            },
            "hash": "32f1b98d562d9da03b672728ffd222353f113c3485fae903e09f2a0e45b10d54",
            "class_name": "RelatedNodeInfo"
          },
          "3": {
            "node_id": "0254e550-b604-4af1-a9d6-9da0054dcf3c",
            "node_type": "1",
            "metadata": {},
            "hash": "756d200e0d7bfed3d5691d0ef1d1ec32116a976b3040c4d5505feb48a716283a",
            "class_name": "RelatedNodeInfo"
          }
        },
        "text": "A Student's Guide to Startups\n\n\n\nWant to start a startup?  Get funded by\nY Combinator.\n\n\n\n\nOctober 2006(This essay is derived from a talk at MIT.)Till recently graduating seniors had two choices: get a job or go\nto grad school.  I think there will increasingly be a third option:\nto start your own startup.  But how common will that be?I'm sure the default will always be to get a job, but starting a\nstartup could well become as popular as grad school.  In the late\n90s my professor friends used to complain that they couldn't get\ngrad students, because all the undergrads were going to work for\nstartups.  I wouldn't be surprised if that situation returns, but\nwith one difference: this time they'll be starting their own\ninstead of going to work for other people's.The most ambitious students will at this point be asking: Why wait\ntill you graduate?  Why not start a startup while you're in college?\nIn fact, why go to college at all?  Why not start a startup instead?A year and a half ago I gave a talk \nwhere I said that the average age of the founders of\nYahoo, Google, and Microsoft was 24, and that if grad students could\nstart startups, why not undergrads?  I'm glad I phrased that as a\nquestion, because now I can pretend it wasn't merely a rhetorical\none.  At the time I couldn't imagine why there should be any lower\nlimit for the age of startup founders.  Graduation is a bureaucratic\nchange, not a biological one.  And certainly there are undergrads\nas competent technically as most grad students.  So why shouldn't\nundergrads be able to start startups as well as grad students?I now realize that something does change at graduation: you lose a\nhuge excuse for failing.  Regardless of how complex your life is,\nyou'll find that everyone else, including your family and friends,\nwill discard all the low bits and regard you as having a single\noccupation at any given time.  If you're in college and have a\nsummer job writing software, you still read as a student.  Whereas\nif you graduate and get a job programming, you'll be instantly\nregarded by everyone as a programmer.The problem with starting a startup while you're still in school\nis that there's a built-in escape hatch.  If you start a startup\nin the summer between your junior and senior year, it reads to\neveryone as a summer job.\nSo if it goes nowhere, big deal; you return to school in the\nfall with all the other seniors; no one regards you as a failure,\nbecause your occupation is student, and you didn't fail at that.\nWhereas if you start a startup just one year later, after you\ngraduate, as long as you're not accepted to grad school in the fall\nthe startup reads to everyone as your occupation.  You're\nnow a startup founder, so you have to do well at that.For nearly everyone, the opinion of one's peers is the most powerful\nmotivator of all\u2014more powerful even than the nominal goal of most\nstartup founders, getting rich.  \n[1]\nAbout a month into each funding\ncycle we have an event called Prototype Day where each startup\npresents to the others what they've got so far.  You might think\nthey wouldn't need any more motivation.  They're working on their\ncool new idea; they have funding for the immediate future; and\nthey're playing a game with only two outcomes: wealth or failure.\nYou'd think that would be motivation enough.  And yet the prospect\nof a demo pushes most of them into a\nrush of activity.Even if you start a startup explicitly to get rich, the money you\nmight get seems pretty theoretical most of the time.  What drives\nyou day to day is not wanting to look bad.You probably can't change that.  Even if you could, I don't think\nyou'd want to; someone who really, truly doesn't care what his peers\nthink of him is probably a psychopath.  So the best you can do is\nconsider this force like a wind, and set up your boat accordingly.\nIf you know your peers are going to push you in some direction,\nchoose good peers, and position yourself so they push you in a\ndirection you like.Graduation changes the prevailing winds, and those make a difference.\nStarting a startup is so hard\nthat it's a close call even for the ones that succeed.  However\nhigh a startup may be flying now, it probably has a few leaves stuck\nin the landing gear from those trees it barely cleared at the end\nof the runway.",
        "start_char_idx": 0,
        "end_char_idx": 4290,
        "text_template": "{metadata_str}\n\n{content}",
        "metadata_template": "{key}: {value}",
        "metadata_seperator": "\n",
        "class_name": "TextNode"
      },
      "__type__": "1"
    },
    "0254e550-b604-4af1-a9d6-9da0054dcf3c": {
      "__data__": {
        "id_": "0254e550-b604-4af1-a9d6-9da0054dcf3c",
        "embedding": null,
        "metadata": {
          "source": "https://paulgraham.com/mit.html",
          "title": "A Student's Guide to Startups",
          "language": null
        },
        "excluded_embed_metadata_keys": [],
        "excluded_llm_metadata_keys": [],
        "relationships": {
          "1": {
            "node_id": "e2e993b4-339f-4956-9491-c0595edfebaa",
            "node_type": "4",
            "metadata": {
              "source": "https://paulgraham.com/mit.html",
              "title": "A Student's Guide to Startups",
              "language": null
            },
            "hash": "78c8e5e78dd072208ba5d428d40b75ebd75d71e4357be53d33db1fe54a9b3f2d",
            "class_name": "RelatedNodeInfo"
          },
          "2": {
            "node_id": "a5bf9e73-43fd-495f-b158-9aae3d8deaa3",
            "node_type": "1",
            "metadata": {
              "source": "https://paulgraham.com/mit.html",
              "title": "A Student's Guide to Startups",
              "language": null
            },
            "hash": "72d2539400ff94e2f85b7dded4befa9e599f3ba784583af34fc6b415f13588aa",
            "class_name": "RelatedNodeInfo"
          },
          "3": {
            "node_id": "ec1f0362-9857-442d-9ae3-98da581206f3",
            "node_type": "1",
            "metadata": {},
            "hash": "c5de76d9ac0ed741e841410295145572012222eead967bc304c5e56c113bf45f",
            "class_name": "RelatedNodeInfo"
          }
        },
        "text": "What drives\nyou day to day is not wanting to look bad.You probably can't change that.  Even if you could, I don't think\nyou'd want to; someone who really, truly doesn't care what his peers\nthink of him is probably a psychopath.  So the best you can do is\nconsider this force like a wind, and set up your boat accordingly.\nIf you know your peers are going to push you in some direction,\nchoose good peers, and position yourself so they push you in a\ndirection you like.Graduation changes the prevailing winds, and those make a difference.\nStarting a startup is so hard\nthat it's a close call even for the ones that succeed.  However\nhigh a startup may be flying now, it probably has a few leaves stuck\nin the landing gear from those trees it barely cleared at the end\nof the runway.  In such a close game, the smallest increase in the\nforces against you can be enough to flick you over the edge into\nfailure.When we first started Y Combinator \nwe encouraged people to start\nstartups while they were still in college.  That's partly because\nY Combinator began as a kind of summer program.  We've kept the\nprogram shape\u2014all of us having dinner together once a week turns\nout to be a good idea\u2014but we've decided now\nthat the party line should be to tell people to wait till they\ngraduate.Does that mean you can't start a startup in college?  Not at all.\nSam Altman, the co-founder of Loopt,\nhad just finished his sophomore year when we funded them, and Loopt\nis probably the most promising of all the startups we've funded so\nfar.  But Sam Altman is a very unusual guy.  Within about three\nminutes of meeting him, I remember thinking \"Ah, so this is what\nBill Gates must have been like when he was 19.\"If it can work to start a startup during college, why do\nwe tell people not to?  For the same reason that the probably\napocryphal violinist, whenever he was asked to judge someone's\nplaying, would always say they didn't have enough talent to make\nit as a pro.  Succeeding as a musician takes determination as well\nas talent, so this answer works out to be the right advice for\neveryone.  The ones who are uncertain believe it and give up, and\nthe ones who are sufficiently determined think \"screw that, I'll\nsucceed anyway.\"So our official policy now is only to fund undergrads we can't talk\nout of it.  And frankly, if you're not certain, you should wait.\nIt's not as if all the opportunities to start companies are going\nto be gone if you don't do it now.  Maybe the window will close on\nsome idea you're working on, but that won't be the last idea you'll\nhave.  For every idea that times out, new ones become feasible.\nHistorically the opportunities to start startups have only increased\nwith time.In that case, you might ask, why not wait longer?  Why not go work\nfor a while, or go to grad school, and then start a startup?  And\nindeed, that might be a good idea.  If I had to pick the sweet spot\nfor startup founders, based on who we're most excited to see\napplications from, I'd say it's probably the mid-twenties.  Why?\nWhat advantages does someone in their mid-twenties have over someone\nwho's 21?  And why isn't it older?  What can 25 year olds do that\n32 year olds can't?  Those turn out to be questions worth examining.PlusIf you start a startup soon after college, you'll be a young founder\nby present standards, so you should know what the relative advantages\nof young founders are.  They're not what you might think.  As a\nyoung founder your strengths are: stamina, poverty, rootlessness,\ncolleagues, and ignorance.The importance of stamina shouldn't be surprising.  If you've heard\nanything about startups you've probably heard about the long hours.\nAs far as I can tell these are universal.  I can't think of any\nsuccessful startups whose founders worked 9 to 5.  And it's\nparticularly necessary for younger founders to work long hours\nbecause they're probably not as efficient as they'll be later.Your second advantage, poverty, might not sound like an advantage,\nbut it is a huge one.  Poverty implies you can live cheaply,\nand this is critically important for startups.  Nearly every startup\nthat fails, fails by running out of money.",
        "start_char_idx": 3509,
        "end_char_idx": 7661,
        "text_template": "{metadata_str}\n\n{content}",
        "metadata_template": "{key}: {value}",
        "metadata_seperator": "\n",
        "class_name": "TextNode"
      },
      "__type__": "1"
    },
    "ec1f0362-9857-442d-9ae3-98da581206f3": {
      "__data__": {
        "id_": "ec1f0362-9857-442d-9ae3-98da581206f3",
        "embedding": null,
        "metadata": {
          "source": "https://paulgraham.com/mit.html",
          "title": "A Student's Guide to Startups",
          "language": null
        },
        "excluded_embed_metadata_keys": [],
        "excluded_llm_metadata_keys": [],
        "relationships": {
          "1": {
            "node_id": "e2e993b4-339f-4956-9491-c0595edfebaa",
            "node_type": "4",
            "metadata": {
              "source": "https://paulgraham.com/mit.html",
              "title": "A Student's Guide to Startups",
              "language": null
            },
            "hash": "78c8e5e78dd072208ba5d428d40b75ebd75d71e4357be53d33db1fe54a9b3f2d",
            "class_name": "RelatedNodeInfo"
          },
          "2": {
            "node_id": "0254e550-b604-4af1-a9d6-9da0054dcf3c",
            "node_type": "1",
            "metadata": {
              "source": "https://paulgraham.com/mit.html",
              "title": "A Student's Guide to Startups",
              "language": null
            },
            "hash": "ba8d60ab2e625cbb229d9c4167d43296f278e5fdb4408d08819e24ea760dd1a5",
            "class_name": "RelatedNodeInfo"
          },
          "3": {
            "node_id": "d54f760c-35e3-4a19-9316-66d6b1780df1",
            "node_type": "1",
            "metadata": {},
            "hash": "a52ad255ef6f70a51aac2f5af12a063145fb42456c41ee96b7389d2b7e88f305",
            "class_name": "RelatedNodeInfo"
          }
        },
        "text": "They're not what you might think.  As a\nyoung founder your strengths are: stamina, poverty, rootlessness,\ncolleagues, and ignorance.The importance of stamina shouldn't be surprising.  If you've heard\nanything about startups you've probably heard about the long hours.\nAs far as I can tell these are universal.  I can't think of any\nsuccessful startups whose founders worked 9 to 5.  And it's\nparticularly necessary for younger founders to work long hours\nbecause they're probably not as efficient as they'll be later.Your second advantage, poverty, might not sound like an advantage,\nbut it is a huge one.  Poverty implies you can live cheaply,\nand this is critically important for startups.  Nearly every startup\nthat fails, fails by running out of money.  It's a little misleading\nto put it this way, because there's usually some other underlying\ncause.  But regardless of the source of your problems, a low burn\nrate gives you more opportunity to recover from them.  And since\nmost startups make all kinds of mistakes at first, room to recover\nfrom mistakes is a valuable thing to have.Most startups end up doing something different than they planned.\nThe way the successful ones find something that works is by trying\nthings that don't.  So the worst thing you can do in a startup is\nto have a rigid, pre-ordained plan and then start spending a lot\nof money to implement it.  Better to operate cheaply and give your\nideas time to evolve.Recent grads can live on practically nothing, and this gives you\nan edge over older founders, because the main cost in software\nstartups is people.  The guys with kids and mortgages are at a\nreal disadvantage.  This is one reason I'd bet on the 25 year old\nover the 32 year old.  The 32 year old probably is a better programmer,\nbut probably also has a much more expensive life.  Whereas a 25\nyear old has some work experience (more on that later) but can live\nas cheaply as an undergrad.Robert Morris and I were 29 and 30 respectively when we started\nViaweb, but fortunately we still lived like 23 year olds.  We both had\nroughly zero assets.  I would have loved to have a mortgage,\nsince that would have meant I had a house.  But in retrospect\nhaving nothing turned out to be convenient. I wasn't tied down and\nI was used to living cheaply.Even more important than living cheaply, though, is thinking cheaply.\nOne reason the Apple II was so popular was that it was cheap.  The\ncomputer itself was cheap, and it used cheap, off-the-shelf peripherals\nlike a cassette tape recorder for data storage and a TV as a monitor.\nAnd you know why?  Because Woz designed this computer for himself,\nand he couldn't afford anything more.We benefitted from the same phenomenon.  Our prices were\ndaringly low for the time.  The top level of service was\n$300 a month, which was an order of magnitude below the norm.  In\nretrospect this was a smart move, but we didn't do it because we\nwere smart.  $300 a month seemed like a lot of money to us.  Like\nApple, we created something inexpensive, and therefore popular,\nsimply because we were poor.A lot of startups have that form: someone comes along and makes\nsomething for a tenth or a hundredth of what it used to cost, and\nthe existing players can't follow because they don't even want to\nthink about a world in which that's possible.  Traditional long\ndistance carriers, for example, didn't even want to think about\nVoIP.  (It was coming, all the same.)  Being poor helps in this\ngame, because your own personal bias points in the same direction\ntechnology evolves in.The advantages of rootlessness are similar to those of poverty.\nWhen you're young you're more mobile\u2014not just because you don't\nhave a house or much stuff, but also because you're less likely to\nhave serious relationships.  This turns out to be important, because\na lot of startups involve someone moving.The founders of Kiko, for example, are now en route to the Bay Area\nto start their next startup.  It's a better place for what they\nwant to do.  And it was easy for them to decide to go, because\nneither as far as I know has a serious girlfriend, and everything\nthey own will fit in one car\u2014or more precisely, will either fit\nin one car or is crappy enough that they don't mind leaving it\nbehind.They at least were in Boston.",
        "start_char_idx": 6905,
        "end_char_idx": 11179,
        "text_template": "{metadata_str}\n\n{content}",
        "metadata_template": "{key}: {value}",
        "metadata_seperator": "\n",
        "class_name": "TextNode"
      },
      "__type__": "1"
    },
    "d54f760c-35e3-4a19-9316-66d6b1780df1": {
      "__data__": {
        "id_": "d54f760c-35e3-4a19-9316-66d6b1780df1",
        "embedding": null,
        "metadata": {
          "source": "https://paulgraham.com/mit.html",
          "title": "A Student's Guide to Startups",
          "language": null
        },
        "excluded_embed_metadata_keys": [],
        "excluded_llm_metadata_keys": [],
        "relationships": {
          "1": {
            "node_id": "e2e993b4-339f-4956-9491-c0595edfebaa",
            "node_type": "4",
            "metadata": {
              "source": "https://paulgraham.com/mit.html",
              "title": "A Student's Guide to Startups",
              "language": null
            },
            "hash": "78c8e5e78dd072208ba5d428d40b75ebd75d71e4357be53d33db1fe54a9b3f2d",
            "class_name": "RelatedNodeInfo"
          },
          "2": {
            "node_id": "ec1f0362-9857-442d-9ae3-98da581206f3",
            "node_type": "1",
            "metadata": {
              "source": "https://paulgraham.com/mit.html",
              "title": "A Student's Guide to Startups",
              "language": null
            },
            "hash": "e060bad0b0638cd87ccc43030c5f3a7d5b615268e5b03edcedfdc556d2245f54",
            "class_name": "RelatedNodeInfo"
          },
          "3": {
            "node_id": "9621b182-ab3d-40e9-a092-4f5cc234106c",
            "node_type": "1",
            "metadata": {},
            "hash": "075b64cab7fedb4f9c92df97de8fe29409a4ce3531bd4b65804e72d87f804370",
            "class_name": "RelatedNodeInfo"
          }
        },
        "text": "Being poor helps in this\ngame, because your own personal bias points in the same direction\ntechnology evolves in.The advantages of rootlessness are similar to those of poverty.\nWhen you're young you're more mobile\u2014not just because you don't\nhave a house or much stuff, but also because you're less likely to\nhave serious relationships.  This turns out to be important, because\na lot of startups involve someone moving.The founders of Kiko, for example, are now en route to the Bay Area\nto start their next startup.  It's a better place for what they\nwant to do.  And it was easy for them to decide to go, because\nneither as far as I know has a serious girlfriend, and everything\nthey own will fit in one car\u2014or more precisely, will either fit\nin one car or is crappy enough that they don't mind leaving it\nbehind.They at least were in Boston.  What if they'd been in Nebraska,\nlike Evan Williams was at their age?   Someone wrote recently that\nthe drawback of Y Combinator was that you had to move to participate.\nIt couldn't be any other way. The kind of conversations we have\nwith founders, we have to have in person.  We fund a dozen startups\nat a time, and we can't be in a dozen places at once.  But even if\nwe could somehow magically save people from moving, we wouldn't.\nWe wouldn't be doing founders a favor by letting them stay in\nNebraska.  Places that aren't \nstartup hubs are toxic to startups.\nYou can tell that from indirect evidence.  You can tell how hard\nit must be to start a startup in Houston or Chicago or Miami from\nthe microscopically small number, per capita, that succeed \nthere.  I don't know exactly what's suppressing all the startups in these\ntowns\u2014probably a hundred subtle little things\u2014but something\nmust be.\n[2]Maybe this will change.  Maybe the increasing cheapness of startups\nwill mean they'll be able to survive anywhere, instead of only in\nthe most hospitable environments.  Maybe 37signals is the pattern\nfor the future.  But maybe not.  Historically there have always\nbeen certain towns that were centers for certain industries, and\nif you weren't in one of them you were at a disadvantage.  So my\nguess is that 37signals is an anomaly.  We're looking at a pattern\nmuch older than \"Web 2.0\" here.Perhaps the reason more startups per capita happen in the Bay Area\nthan Miami is simply that there are more founder-type people there.\nSuccessful startups are almost never started by one person.  Usually\nthey begin with a conversation in which someone mentions that\nsomething would be a good idea for a company, and his friend says,\n\"Yeah, that is a good idea, let's try it.\"  If you're missing that\nsecond person who says \"let's try it,\" the startup never happens.\nAnd that is another area where undergrads have an edge.  They're\nsurrounded by people willing to say that.  At a good college you're\nconcentrated together with a lot of other ambitious and technically\nminded people\u2014probably more concentrated than you'll ever be\nagain.  If your nucleus spits out a neutron, there's a good chance\nit will hit another nucleus.The number one question people ask us at Y Combinator is: Where can\nI find a co-founder?  That's the biggest problem for someone starting\na startup at 30.  When they were in school they knew a lot of good\nco-founders, but by 30 they've either lost touch with them or these\npeople are tied down by jobs they don't want to leave.Viaweb was an anomaly in this respect too.  Though we were comparatively\nold, we weren't tied down by impressive jobs.  I was trying to be\nan artist, which is not very constraining, and Robert, though 29,\nwas still in grad school due to a little interruption in his academic\ncareer back in 1988.  So arguably the Worm made Viaweb possible.\nOtherwise Robert would have been a junior professor at that age,\nand he wouldn't have had time to work on crazy speculative projects\nwith me.Most of the questions people ask Y Combinator we have some kind of\nanswer for, but not the co-founder question.  There is no good\nanswer.  Co-founders really should be people you already know.  And\nby far the best place to meet them is school.",
        "start_char_idx": 10337,
        "end_char_idx": 14447,
        "text_template": "{metadata_str}\n\n{content}",
        "metadata_template": "{key}: {value}",
        "metadata_seperator": "\n",
        "class_name": "TextNode"
      },
      "__type__": "1"
    },
    "9621b182-ab3d-40e9-a092-4f5cc234106c": {
      "__data__": {
        "id_": "9621b182-ab3d-40e9-a092-4f5cc234106c",
        "embedding": null,
        "metadata": {
          "source": "https://paulgraham.com/mit.html",
          "title": "A Student's Guide to Startups",
          "language": null
        },
        "excluded_embed_metadata_keys": [],
        "excluded_llm_metadata_keys": [],
        "relationships": {
          "1": {
            "node_id": "e2e993b4-339f-4956-9491-c0595edfebaa",
            "node_type": "4",
            "metadata": {
              "source": "https://paulgraham.com/mit.html",
              "title": "A Student's Guide to Startups",
              "language": null
            },
            "hash": "78c8e5e78dd072208ba5d428d40b75ebd75d71e4357be53d33db1fe54a9b3f2d",
            "class_name": "RelatedNodeInfo"
          },
          "2": {
            "node_id": "d54f760c-35e3-4a19-9316-66d6b1780df1",
            "node_type": "1",
            "metadata": {
              "source": "https://paulgraham.com/mit.html",
              "title": "A Student's Guide to Startups",
              "language": null
            },
            "hash": "79d106f15b5ed52053e4ae7871089d3c7dedf940b09b2ef384f6639106082a21",
            "class_name": "RelatedNodeInfo"
          },
          "3": {
            "node_id": "943f9da7-987f-41b7-99a8-f66699f44255",
            "node_type": "1",
            "metadata": {},
            "hash": "a4d1866fa3a3b76e7c5fa353e3f229d23c4d5b29f838879af691289802ccaccc",
            "class_name": "RelatedNodeInfo"
          }
        },
        "text": "Though we were comparatively\nold, we weren't tied down by impressive jobs.  I was trying to be\nan artist, which is not very constraining, and Robert, though 29,\nwas still in grad school due to a little interruption in his academic\ncareer back in 1988.  So arguably the Worm made Viaweb possible.\nOtherwise Robert would have been a junior professor at that age,\nand he wouldn't have had time to work on crazy speculative projects\nwith me.Most of the questions people ask Y Combinator we have some kind of\nanswer for, but not the co-founder question.  There is no good\nanswer.  Co-founders really should be people you already know.  And\nby far the best place to meet them is school. You have a large\nsample of smart people; you get to compare how they all perform on\nidentical tasks; and everyone's life is pretty fluid.  A lot of\nstartups grow out of schools for this reason.  Google, Yahoo, and\nMicrosoft, among others, were all founded by people who met in\nschool.  (In Microsoft's case, it was high school.)Many students feel they should wait and get a little more experience\nbefore they start a company.  All other things being equal, they\nshould.  But all other things are not quite as equal as they look.\nMost students don't realize how rich they are in the scarcest\ningredient in startups, co-founders.  If you wait too long, you may\nfind that your friends are now involved in some project they don't\nwant to abandon.  The better they are, the more likely this is to\nhappen.One way to mitigate this problem might be to actively plan your\nstartup while you're getting those n years of experience.  Sure,\ngo off and get jobs or go to grad school or whatever, but get\ntogether regularly to scheme, so the idea of starting a startup\nstays alive in everyone's brain.  I don't know if this works, but\nit can't hurt to try.It would be helpful just to realize what an advantage you have as\nstudents.  Some of your classmates are probably going to be successful\nstartup founders; at a great technical university, that is a near\ncertainty.  So which ones?  If I were you I'd look for the people\nwho are not just smart, but incurable \nbuilders.  \nLook\nfor the people who keep starting projects, and finish at least some\nof them.  That's what we look for.  Above all else, above academic\ncredentials and even the idea you apply with, we look for people\nwho build things.The other place co-founders meet is at work.  Fewer do than at\nschool, but there are things you can do to improve the odds.  The\nmost important, obviously, is to work somewhere that has a lot of\nsmart, young people.  Another is to work for a company located in\na startup hub.  It will be easier to talk a co-worker into quitting\nwith you in a place where startups are happening all around you.You might also want to look at the employment agreement you sign\nwhen you get hired.  Most will say that any ideas you think of while\nyou're employed by the company belong to them.  In practice it's\nhard for anyone to prove what ideas you had when, so the line gets\ndrawn at code.  If you're going to start a startup, don't write any\nof the code while you're still employed.  Or at least discard any\ncode you wrote while still employed and start over.  It's not so\nmuch that your employer will find out and sue you.  It won't come\nto that; investors or acquirers or (if you're so lucky) underwriters\nwill nail you first.  Between t = 0 and when you buy that yacht,\nsomeone is going to ask if any of your code legally belongs\nto anyone else, and you need to be able to say no.\n[3]The most overreaching employee agreement I've seen so far is Amazon's.\nIn addition to the usual clauses about owning your ideas, you also\ncan't be a founder of a startup that has another founder who worked\nat Amazon\u2014even if you didn't know them or even work there at the\nsame time. I suspect they'd have a hard time enforcing this, but\nit's a bad sign they even try.  There are plenty of other places\nto work; you may as well choose one that keeps more of your options\nopen.Speaking of cool places to work, there is of course Google.",
        "start_char_idx": 13767,
        "end_char_idx": 17836,
        "text_template": "{metadata_str}\n\n{content}",
        "metadata_template": "{key}: {value}",
        "metadata_seperator": "\n",
        "class_name": "TextNode"
      },
      "__type__": "1"
    },
    "943f9da7-987f-41b7-99a8-f66699f44255": {
      "__data__": {
        "id_": "943f9da7-987f-41b7-99a8-f66699f44255",
        "embedding": null,
        "metadata": {
          "source": "https://paulgraham.com/mit.html",
          "title": "A Student's Guide to Startups",
          "language": null
        },
        "excluded_embed_metadata_keys": [],
        "excluded_llm_metadata_keys": [],
        "relationships": {
          "1": {
            "node_id": "e2e993b4-339f-4956-9491-c0595edfebaa",
            "node_type": "4",
            "metadata": {
              "source": "https://paulgraham.com/mit.html",
              "title": "A Student's Guide to Startups",
              "language": null
            },
            "hash": "78c8e5e78dd072208ba5d428d40b75ebd75d71e4357be53d33db1fe54a9b3f2d",
            "class_name": "RelatedNodeInfo"
          },
          "2": {
            "node_id": "9621b182-ab3d-40e9-a092-4f5cc234106c",
            "node_type": "1",
            "metadata": {
              "source": "https://paulgraham.com/mit.html",
              "title": "A Student's Guide to Startups",
              "language": null
            },
            "hash": "58897294d7defc3ade7035fdb9e3f0a21af349f159a5d47ab4fb513430ad4a86",
            "class_name": "RelatedNodeInfo"
          },
          "3": {
            "node_id": "238acfba-87cf-41db-886f-8b304b35e396",
            "node_type": "1",
            "metadata": {},
            "hash": "350ee3a4ca755fe982e1681f1adfa541d84694ce4c721ba9e06de5afee93e28b",
            "class_name": "RelatedNodeInfo"
          }
        },
        "text": "It won't come\nto that; investors or acquirers or (if you're so lucky) underwriters\nwill nail you first.  Between t = 0 and when you buy that yacht,\nsomeone is going to ask if any of your code legally belongs\nto anyone else, and you need to be able to say no.\n[3]The most overreaching employee agreement I've seen so far is Amazon's.\nIn addition to the usual clauses about owning your ideas, you also\ncan't be a founder of a startup that has another founder who worked\nat Amazon\u2014even if you didn't know them or even work there at the\nsame time. I suspect they'd have a hard time enforcing this, but\nit's a bad sign they even try.  There are plenty of other places\nto work; you may as well choose one that keeps more of your options\nopen.Speaking of cool places to work, there is of course Google.  But I\nnotice something slightly frightening about Google: zero startups\ncome out of there.  In that respect it's a black hole.  People seem\nto like working at Google too much to leave.  So if you hope to start\na startup one day, the evidence so far suggests you shouldn't work\nthere.I realize this seems odd advice.  If they make your life so good\nthat you don't want to leave, why not work there?  Because, in\neffect, you're probably getting a local maximum.  You need a certain\nactivation energy to start a startup.  So an employer who's fairly\npleasant to work for can lull you into staying indefinitely, even\nif it would be a net win for you to leave.\n[4]The best place to work, if you want to start a startup, is probably\na startup.  In addition to being the right sort of experience, one\nway or another it will be over quickly.  You'll either end up rich,\nin which case problem solved, or the startup will get bought, in\nwhich case it it will start to suck to work there and it will be\neasy to leave, or most likely, the thing will blow up and you'll\nbe free again.Your final advantage, ignorance, may not sound very useful.  I\ndeliberately used a controversial word for it; you might equally\ncall it innocence.  But it seems to be a powerful force.  My Y\nCombinator co-founder Jessica Livingston is just about to publish\na book of interviews\nwith startup founders, and I noticed a remarkable pattern in them.\nOne after another said that if they'd known how hard it would be,\nthey would have been too intimidated to start.Ignorance can be useful when it's a counterweight to other forms\nof stupidity.  It's useful in starting startups because you're\ncapable of more than you realize.  Starting startups is harder than\nyou expect, but you're also capable of more than you expect, so\nthey balance out.Most people look at a company like Apple and think, how could I\never make such a thing?  Apple is an institution, and I'm just a\nperson.  But every institution was at one point just a handful of\npeople in a room deciding to start something.  Institutions are\nmade up, and made up by people no different from you.I'm not saying everyone could start a startup.  I'm sure most people\ncouldn't; I don't know much about the population at large.  When\nyou get to groups I know well, like hackers, I can say more precisely.\nAt the top schools, I'd guess as many as a quarter of the CS majors\ncould make it as startup founders if they wanted.That \"if they wanted\" is an important qualification\u2014so important\nthat it's almost cheating to append it like that\u2014because once you\nget over a certain threshold of intelligence, which most CS majors\nat top schools are past, the deciding factor in whether you succeed\nas a founder is how much you want to.  You don't have to be that\nsmart.  If you're not a genius, just start a startup in some unsexy\nfield where you'll have less competition, like software for human\nresources departments.  I picked that example at random, but I feel\nsafe in predicting that whatever they have now, it wouldn't take\ngenius to do better.   There are a lot of people out there working\non boring stuff who are desperately in need of better software, so\nhowever short you think you fall of Larry and Sergey, you can ratchet\ndown the coolness of the idea far enough to compensate.As well as preventing you from being intimidated, ignorance can\nsometimes help you discover new ideas.",
        "start_char_idx": 17041,
        "end_char_idx": 21236,
        "text_template": "{metadata_str}\n\n{content}",
        "metadata_template": "{key}: {value}",
        "metadata_seperator": "\n",
        "class_name": "TextNode"
      },
      "__type__": "1"
    },
    "238acfba-87cf-41db-886f-8b304b35e396": {
      "__data__": {
        "id_": "238acfba-87cf-41db-886f-8b304b35e396",
        "embedding": null,
        "metadata": {
          "source": "https://paulgraham.com/mit.html",
          "title": "A Student's Guide to Startups",
          "language": null
        },
        "excluded_embed_metadata_keys": [],
        "excluded_llm_metadata_keys": [],
        "relationships": {
          "1": {
            "node_id": "e2e993b4-339f-4956-9491-c0595edfebaa",
            "node_type": "4",
            "metadata": {
              "source": "https://paulgraham.com/mit.html",
              "title": "A Student's Guide to Startups",
              "language": null
            },
            "hash": "78c8e5e78dd072208ba5d428d40b75ebd75d71e4357be53d33db1fe54a9b3f2d",
            "class_name": "RelatedNodeInfo"
          },
          "2": {
            "node_id": "943f9da7-987f-41b7-99a8-f66699f44255",
            "node_type": "1",
            "metadata": {
              "source": "https://paulgraham.com/mit.html",
              "title": "A Student's Guide to Startups",
              "language": null
            },
            "hash": "0bd6fa6dcdb0dee8f7907a2aa57ce0f94953413c324ae82837b64d2c98d0e8c7",
            "class_name": "RelatedNodeInfo"
          },
          "3": {
            "node_id": "f75f1d02-dac7-4541-a370-38733fc3fb28",
            "node_type": "1",
            "metadata": {},
            "hash": "2a08de0a996a42e5546b349a6b52e8b9fd7acefd115f5477ece1dcd32f494063",
            "class_name": "RelatedNodeInfo"
          }
        },
        "text": "You don't have to be that\nsmart.  If you're not a genius, just start a startup in some unsexy\nfield where you'll have less competition, like software for human\nresources departments.  I picked that example at random, but I feel\nsafe in predicting that whatever they have now, it wouldn't take\ngenius to do better.   There are a lot of people out there working\non boring stuff who are desperately in need of better software, so\nhowever short you think you fall of Larry and Sergey, you can ratchet\ndown the coolness of the idea far enough to compensate.As well as preventing you from being intimidated, ignorance can\nsometimes help you discover new ideas.  Steve Wozniak\nput this very strongly:\n\n  All the best things that I did at Apple came from (a) not having\n  money and (b) not having done it before, ever. Every single thing\n  that we came out with that was really great, I'd never once done\n  that thing in my life.\n\nWhen you know nothing, you have to reinvent stuff for yourself, and\nif you're smart your reinventions may be better than what preceded\nthem.  This is especially true in fields where the rules change.\nAll our ideas about software were developed in a time when processors\nwere slow, and memories and disks were tiny.  Who knows what obsolete\nassumptions are embedded in the conventional wisdom?  And the way\nthese assumptions are going to get fixed is not by explicitly\ndeallocating them, but by something more akin to garbage collection.\nSomeone ignorant but smart will come along and reinvent everything,\nand in the process simply fail to reproduce certain existing ideas.MinusSo much for the advantages of young founders.  What about the\ndisadvantages? I'm going to start with what goes wrong and try to\ntrace it back to the root causes.What goes wrong with young founders is that they build stuff that\nlooks like class projects.  It was only recently that we figured\nthis out ourselves.  We noticed a lot of similarities between the\nstartups that seemed to be falling behind, but we couldn't figure\nout how to put it into words.  Then finally we realized what it\nwas: they were building class projects.But what does that really mean?  What's wrong with class projects?\nWhat's the difference between a class project and a real startup?\nIf we could answer that question it would be useful not just to\nwould-be startup founders but to students in general, because we'd\nbe a long way toward explaining the mystery of the so-called real\nworld.There seem to be two big things missing in class projects: (1) an\niterative definition of a real problem and (2) intensity.The first is probably unavoidable.  Class projects will inevitably\nsolve fake problems.  For one thing, real problems are rare and\nvaluable.  If a professor wanted to have students solve real problems,\nhe'd face the same paradox as someone trying to give an example of\nwhatever \"paradigm\" might succeed the Standard Model of physics.\nThere may well be something that does, but if you could think of\nan example you'd be entitled to the Nobel Prize.  Similarly, good\nnew problems are not to be had for the asking.In technology the difficulty is compounded by the fact that real\nstartups tend to discover the problem they're solving by a process\nof evolution.  Someone has an idea for something; they build it;\nand in doing so (and probably only by doing so) they realize\nthe problem they should be solving is another one.  Even if the\nprofessor let you change your project description on the fly, there\nisn't time enough to do that in a college class, or a market to\nsupply evolutionary pressures.  So class\nprojects are mostly about implementation, which is the least\nof your problems in a startup.It's not just that in a startup you work on the idea as well as\nimplementation.  The very implementation is different.  Its main\npurpose is to refine the idea.  Often the only value of most of the\nstuff you build in the first six months is that it proves your\ninitial idea was mistaken.  And that's extremely valuable.  If\nyou're free of a misconception that everyone else still shares,\nyou're in a powerful position.  But you're not thinking that way\nabout a class project.  Proving your initial plan was mistaken would\njust get you a bad grade.  Instead of building stuff to throw away,\nyou tend to want every line of code to go toward that final goal\nof showing you did a lot of work.That leads to our second difference: the way class projects are\nmeasured.",
        "start_char_idx": 20582,
        "end_char_idx": 25025,
        "text_template": "{metadata_str}\n\n{content}",
        "metadata_template": "{key}: {value}",
        "metadata_seperator": "\n",
        "class_name": "TextNode"
      },
      "__type__": "1"
    },
    "f75f1d02-dac7-4541-a370-38733fc3fb28": {
      "__data__": {
        "id_": "f75f1d02-dac7-4541-a370-38733fc3fb28",
        "embedding": null,
        "metadata": {
          "source": "https://paulgraham.com/mit.html",
          "title": "A Student's Guide to Startups",
          "language": null
        },
        "excluded_embed_metadata_keys": [],
        "excluded_llm_metadata_keys": [],
        "relationships": {
          "1": {
            "node_id": "e2e993b4-339f-4956-9491-c0595edfebaa",
            "node_type": "4",
            "metadata": {
              "source": "https://paulgraham.com/mit.html",
              "title": "A Student's Guide to Startups",
              "language": null
            },
            "hash": "78c8e5e78dd072208ba5d428d40b75ebd75d71e4357be53d33db1fe54a9b3f2d",
            "class_name": "RelatedNodeInfo"
          },
          "2": {
            "node_id": "238acfba-87cf-41db-886f-8b304b35e396",
            "node_type": "1",
            "metadata": {
              "source": "https://paulgraham.com/mit.html",
              "title": "A Student's Guide to Startups",
              "language": null
            },
            "hash": "d91270dab9ad90f5e8188878cccbad7c1445c0f6285b40a128665ade9192e039",
            "class_name": "RelatedNodeInfo"
          },
          "3": {
            "node_id": "22b4a0ac-4cc7-42a7-b69f-4d21a8bb37d1",
            "node_type": "1",
            "metadata": {},
            "hash": "9b2f74d1d04c917510e182b1e01046be15d91bc98d00359caa390db5ffa48e91",
            "class_name": "RelatedNodeInfo"
          }
        },
        "text": "So class\nprojects are mostly about implementation, which is the least\nof your problems in a startup.It's not just that in a startup you work on the idea as well as\nimplementation.  The very implementation is different.  Its main\npurpose is to refine the idea.  Often the only value of most of the\nstuff you build in the first six months is that it proves your\ninitial idea was mistaken.  And that's extremely valuable.  If\nyou're free of a misconception that everyone else still shares,\nyou're in a powerful position.  But you're not thinking that way\nabout a class project.  Proving your initial plan was mistaken would\njust get you a bad grade.  Instead of building stuff to throw away,\nyou tend to want every line of code to go toward that final goal\nof showing you did a lot of work.That leads to our second difference: the way class projects are\nmeasured.  Professors will tend to judge you by the distance between\nthe starting point and where you are now.  If someone has achieved\na lot, they should get a good grade.  But customers will judge you\nfrom the other direction: the distance remaining between where you\nare now and the features they need.  The market doesn't give a shit\nhow hard you worked.  Users just want your software to do what they\nneed, and you get a zero otherwise.  That is one of the most\ndistinctive differences between school and the real world: there\nis no reward for putting in a good effort.  In fact, the whole\nconcept of a \"good effort\" is a fake idea adults invented to encourage\nkids.  It is not found in nature.Such lies seem to be helpful to kids.  But unfortunately when you\ngraduate they don't give you a list of all the lies they told you\nduring your education.  You have to get them beaten out of you by\ncontact with the real world.  And this is why so many jobs want\nwork experience.  I couldn't understand that when I was in college.\nI knew how to program.  In fact, I could tell I knew how to program\nbetter than most people doing it for a living.  So what was this\nmysterious \"work experience\" and why did I need it?Now I know what it is, and part of the confusion is grammatical.\nDescribing it as \"work experience\" implies it's like experience\noperating a certain kind of machine, or using a certain programming\nlanguage.  But really what work experience refers to is not some\nspecific expertise, but the elimination of certain habits left over\nfrom childhood.One of the defining qualities of kids is that they flake.  When\nyou're a kid and you face some hard test, you can cry and say \"I\ncan't\" and they won't make you do it.  Of course, no one can make\nyou do anything in the grownup world either.  What they do instead\nis fire you.  And when motivated by that\nyou find you can do a lot more than you realized.  So one of the\nthings employers expect from someone with \"work experience\" is the\nelimination of the flake reflex\u2014the ability to get things done,\nwith no excuses.The other thing you get from work experience is an understanding\nof what work is, and in particular, how intrinsically horrible it\nis.  Fundamentally the equation is a brutal one: you have to spend\nmost of your waking hours doing stuff someone else wants, or starve.\nThere are a few places where the work is so interesting that this\nis concealed, because what other people want done happens to coincide\nwith what you want to work on.  But you only have to imagine what\nwould happen if they diverged to see the underlying reality.It's not so much that adults lie to kids about this as never explain\nit.  They never explain what the deal is with money.  You know from\nan early age that you'll have some sort of job, because everyone\nasks what you're going to \"be\" when you grow up. What they\ndon't tell you is that as a kid you're sitting on the shoulders of\nsomeone else who's treading water, and that starting working means\nyou get thrown into the water on your own, and have to start treading\nwater yourself or sink.  \"Being\" something is incidental; the\nimmediate problem is not to drown.The relationship between work and money tends to dawn on you only\ngradually.  At least it did for me.  One's first thought tends to\nbe simply \"This sucks.  I'm in debt.",
        "start_char_idx": 24165,
        "end_char_idx": 28347,
        "text_template": "{metadata_str}\n\n{content}",
        "metadata_template": "{key}: {value}",
        "metadata_seperator": "\n",
        "class_name": "TextNode"
      },
      "__type__": "1"
    },
    "22b4a0ac-4cc7-42a7-b69f-4d21a8bb37d1": {
      "__data__": {
        "id_": "22b4a0ac-4cc7-42a7-b69f-4d21a8bb37d1",
        "embedding": null,
        "metadata": {
          "source": "https://paulgraham.com/mit.html",
          "title": "A Student's Guide to Startups",
          "language": null
        },
        "excluded_embed_metadata_keys": [],
        "excluded_llm_metadata_keys": [],
        "relationships": {
          "1": {
            "node_id": "e2e993b4-339f-4956-9491-c0595edfebaa",
            "node_type": "4",
            "metadata": {
              "source": "https://paulgraham.com/mit.html",
              "title": "A Student's Guide to Startups",
              "language": null
            },
            "hash": "78c8e5e78dd072208ba5d428d40b75ebd75d71e4357be53d33db1fe54a9b3f2d",
            "class_name": "RelatedNodeInfo"
          },
          "2": {
            "node_id": "f75f1d02-dac7-4541-a370-38733fc3fb28",
            "node_type": "1",
            "metadata": {
              "source": "https://paulgraham.com/mit.html",
              "title": "A Student's Guide to Startups",
              "language": null
            },
            "hash": "eb9d072e64a1831e3ffbd61dbc183c8fa62060f2c296184f370e59434fe633e3",
            "class_name": "RelatedNodeInfo"
          },
          "3": {
            "node_id": "75cb36ad-3aae-48de-86d3-92818e7cd63c",
            "node_type": "1",
            "metadata": {},
            "hash": "93b6cb0b6552b41a10a0e83606952d45b8debcc359de7678f45ebc005a6a96e3",
            "class_name": "RelatedNodeInfo"
          }
        },
        "text": "They never explain what the deal is with money.  You know from\nan early age that you'll have some sort of job, because everyone\nasks what you're going to \"be\" when you grow up. What they\ndon't tell you is that as a kid you're sitting on the shoulders of\nsomeone else who's treading water, and that starting working means\nyou get thrown into the water on your own, and have to start treading\nwater yourself or sink.  \"Being\" something is incidental; the\nimmediate problem is not to drown.The relationship between work and money tends to dawn on you only\ngradually.  At least it did for me.  One's first thought tends to\nbe simply \"This sucks.  I'm in debt. Plus I have to get up on monday\nand go to work.\"  Gradually you realize that these two things are\nas tightly connected as only a market can make them.So the most important advantage 24 year old founders have over 20\nyear old founders is that they know what they're trying to avoid.\nTo the average undergrad the idea of getting rich translates into\nbuying Ferraris, or being admired.  To someone who has learned from\nexperience about the relationship between money and work, it\ntranslates to something way more important: it means you get to opt\nout of the brutal equation that governs the lives of 99.9% of people.\nGetting rich means you can stop treading water.Someone who gets this will work much harder at making a startup\nsucceed\u2014with the proverbial energy of a drowning man, in fact.\nBut understanding the relationship between money and work also\nchanges the way you work.  You don't get money just for working,\nbut for doing things other people want.  Someone who's figured that\nout will automatically focus more on the user.  And that cures the\nother half of the class-project syndrome.  After you've been working\nfor a while, you yourself tend to measure what you've done the same\nway the market does.Of course, you don't have to spend years working to learn this\nstuff.  If you're sufficiently perceptive you can grasp these things\nwhile you're still in school.  Sam Altman did.  He must have, because\nLoopt is no class project.  And as his example suggests, this can\nbe valuable knowledge.  At a minimum, if you get this stuff, you\nalready have most of what you gain from the \"work experience\"\nemployers consider so desirable.  But of course if you really get\nit, you can use this information in a way that's more valuable to\nyou than that.NowSo suppose you think you might start a startup at some point, either\nwhen you graduate or a few years after.  What should you do now?\nFor both jobs and grad school, there are ways to prepare while\nyou're in college.  If you want to get a job when you graduate, you\nshould get summer jobs at places you'd like to work.  If you want\nto go to grad school, it will help to work on research projects as\nan undergrad.  What's the equivalent for startups?  How do you keep\nyour options maximally open?One thing you can do while you're still in school is to learn how\nstartups work.  Unfortunately that's not easy.  Few if any colleges\nhave classes about startups.  There may be business school classes\non entrepreneurship, as they call it over there, but these are\nlikely to be a waste of time.  Business schools like to talk about\nstartups, but philosophically they're at the opposite end of the\nspectrum.  Most books on startups also seem to be useless.  I've\nlooked at a few and none get it right.  Books in most fields are\nwritten by people who know the subject from experience, but for\nstartups there's a unique problem:  by definition the founders of\nsuccessful startups don't need to write books to make money. As a\nresult most books on the subject end up being written by people who\ndon't understand it.So I'd be skeptical of classes and books.  The way to learn about\nstartups is by watching them in action, preferably by working at\none.  How do you do that as an undergrad?  Probably by sneaking in\nthrough the back door. Just hang around a lot and gradually start\ndoing things for them.  Most startups are (or should be) very\ncautious about hiring.  Every hire increases the burn rate, and bad\nhires early on are hard to recover from.",
        "start_char_idx": 27692,
        "end_char_idx": 31839,
        "text_template": "{metadata_str}\n\n{content}",
        "metadata_template": "{key}: {value}",
        "metadata_seperator": "\n",
        "class_name": "TextNode"
      },
      "__type__": "1"
    },
    "75cb36ad-3aae-48de-86d3-92818e7cd63c": {
      "__data__": {
        "id_": "75cb36ad-3aae-48de-86d3-92818e7cd63c",
        "embedding": null,
        "metadata": {
          "source": "https://paulgraham.com/mit.html",
          "title": "A Student's Guide to Startups",
          "language": null
        },
        "excluded_embed_metadata_keys": [],
        "excluded_llm_metadata_keys": [],
        "relationships": {
          "1": {
            "node_id": "e2e993b4-339f-4956-9491-c0595edfebaa",
            "node_type": "4",
            "metadata": {
              "source": "https://paulgraham.com/mit.html",
              "title": "A Student's Guide to Startups",
              "language": null
            },
            "hash": "78c8e5e78dd072208ba5d428d40b75ebd75d71e4357be53d33db1fe54a9b3f2d",
            "class_name": "RelatedNodeInfo"
          },
          "2": {
            "node_id": "22b4a0ac-4cc7-42a7-b69f-4d21a8bb37d1",
            "node_type": "1",
            "metadata": {
              "source": "https://paulgraham.com/mit.html",
              "title": "A Student's Guide to Startups",
              "language": null
            },
            "hash": "0a3892848b76c7c9d8f5eb9247b899b3cc05c13a8250efc1e80d3b6c24a926b5",
            "class_name": "RelatedNodeInfo"
          },
          "3": {
            "node_id": "b9258295-208e-4aa4-91b9-1583060aa262",
            "node_type": "1",
            "metadata": {},
            "hash": "11631860dd6aef6f98afcffd34c7af988a2c5001111771c073d3d0d2bbd9aabd",
            "class_name": "RelatedNodeInfo"
          }
        },
        "text": "I've\nlooked at a few and none get it right.  Books in most fields are\nwritten by people who know the subject from experience, but for\nstartups there's a unique problem:  by definition the founders of\nsuccessful startups don't need to write books to make money. As a\nresult most books on the subject end up being written by people who\ndon't understand it.So I'd be skeptical of classes and books.  The way to learn about\nstartups is by watching them in action, preferably by working at\none.  How do you do that as an undergrad?  Probably by sneaking in\nthrough the back door. Just hang around a lot and gradually start\ndoing things for them.  Most startups are (or should be) very\ncautious about hiring.  Every hire increases the burn rate, and bad\nhires early on are hard to recover from.  However, startups usually\nhave a fairly informal atmosphere, and there's always a lot that\nneeds to be done.  If you just start doing stuff for them, many\nwill be too busy to shoo you away.  You can thus gradually work\nyour way into their confidence, and maybe turn it into an official\njob later, or not, whichever you prefer.  This won't work for all\nstartups, but it would work for most I've known.Number two, make the most of the great advantage of school: the\nwealth of co-founders.  Look at the people around you and ask\nyourself which you'd like to work with.  When you apply that test,\nyou may find you get surprising results.  You may find you'd prefer\nthe quiet guy you've mostly ignored to someone who seems impressive\nbut has an attitude to match.  I'm not suggesting you suck up to\npeople you don't really like because you think one day they'll be\nsuccessful.  Exactly the opposite, in fact: you should only start\na startup with someone you like, because a startup will put your\nfriendship through a stress test.  I'm just saying you should think\nabout who you really admire and hang out with them, instead of\nwhoever circumstances throw you together with.Another thing you can do is learn skills that will be useful to you\nin a startup.  These may be different from the skills you'd learn\nto get a job.  For example, thinking about getting a job will make\nyou want to learn programming languages you think employers want,\nlike Java and C++.  Whereas if you start a startup, you get to pick\nthe language, so you have to think about which will actually let\nyou get the most done.  If you use that test you might end up\nlearning Ruby or Python instead.\nBut the most important skill for a startup founder isn't a programming\ntechnique.  It's a knack for understanding users and figuring out\nhow to give them what they want.  I know I repeat this, but that's\nbecause it's so important.  And it's a skill you can learn, though\nperhaps habit might be a better word.  Get into the habit of thinking\nof software as having users.  What do those users want?  What would\nmake them say wow?This is particularly valuable for undergrads, because the concept\nof users is missing from most college programming classes.  The way\nyou get taught programming in college would be like teaching writing\nas grammar, without mentioning that its purpose is to communicate\nsomething to an audience.  Fortunately an audience for software is\nnow only an http request away.  So in addition to the programming\nyou do for your classes, why not build some kind of website people\nwill find useful?  At the very least it will teach you how to write\nsoftware with users.  In the best case, it might not just be\npreparation for a startup, but the startup itself, like it was for\nYahoo and Google.Notes[1]\nEven the desire to protect one's children seems weaker, judging\nfrom things people have historically done to their kids\nrather than risk their community's disapproval.  (I assume we still\ndo things that will be regarded in the future as barbaric, but\nhistorical abuses are easier for us to see.)[2]\nWorrying that Y Combinator makes founders move for 3 months\nalso suggests one underestimates how hard it is to start a startup.\nYou're going to have to put up with much greater inconveniences than\nthat.[3]\nMost employee agreements\nsay that any idea relating to the company's present or potential\nfuture business belongs to them.",
        "start_char_idx": 31051,
        "end_char_idx": 35249,
        "text_template": "{metadata_str}\n\n{content}",
        "metadata_template": "{key}: {value}",
        "metadata_seperator": "\n",
        "class_name": "TextNode"
      },
      "__type__": "1"
    },
    "b9258295-208e-4aa4-91b9-1583060aa262": {
      "__data__": {
        "id_": "b9258295-208e-4aa4-91b9-1583060aa262",
        "embedding": null,
        "metadata": {
          "source": "https://paulgraham.com/mit.html",
          "title": "A Student's Guide to Startups",
          "language": null
        },
        "excluded_embed_metadata_keys": [],
        "excluded_llm_metadata_keys": [],
        "relationships": {
          "1": {
            "node_id": "e2e993b4-339f-4956-9491-c0595edfebaa",
            "node_type": "4",
            "metadata": {
              "source": "https://paulgraham.com/mit.html",
              "title": "A Student's Guide to Startups",
              "language": null
            },
            "hash": "78c8e5e78dd072208ba5d428d40b75ebd75d71e4357be53d33db1fe54a9b3f2d",
            "class_name": "RelatedNodeInfo"
          },
          "2": {
            "node_id": "75cb36ad-3aae-48de-86d3-92818e7cd63c",
            "node_type": "1",
            "metadata": {
              "source": "https://paulgraham.com/mit.html",
              "title": "A Student's Guide to Startups",
              "language": null
            },
            "hash": "1337ae7756b3ea80f6785d6dc29ba696dda3c3098c53a37f3ffa4210d05814bc",
            "class_name": "RelatedNodeInfo"
          },
          "3": {
            "node_id": "a6f90609-0917-479b-9fbe-b63e8d8bdc71",
            "node_type": "1",
            "metadata": {},
            "hash": "8e443177b202b8c31d9160a5a6f6e891f65cebfdb9e49358ac7cd8661d6795b1",
            "class_name": "RelatedNodeInfo"
          }
        },
        "text": "At the very least it will teach you how to write\nsoftware with users.  In the best case, it might not just be\npreparation for a startup, but the startup itself, like it was for\nYahoo and Google.Notes[1]\nEven the desire to protect one's children seems weaker, judging\nfrom things people have historically done to their kids\nrather than risk their community's disapproval.  (I assume we still\ndo things that will be regarded in the future as barbaric, but\nhistorical abuses are easier for us to see.)[2]\nWorrying that Y Combinator makes founders move for 3 months\nalso suggests one underestimates how hard it is to start a startup.\nYou're going to have to put up with much greater inconveniences than\nthat.[3]\nMost employee agreements\nsay that any idea relating to the company's present or potential\nfuture business belongs to them.  Often as not the second clause could\ninclude any possible startup, and anyone doing due diligence for an \ninvestor or acquirer will assume the worst.To be safe either (a) don't use code written while you\nwere still employed in your previous job, or (b) get your employer to\nrenounce, in writing, any claim to the code you write for your side   \nproject.  Many will consent to (b) rather than\nlose a prized employee.  The downside is that you'll have to tell them\nexactly what your project does.[4]\nGeshke and Warnock only founded Adobe because Xerox ignored\nthem.  If Xerox had used what they built, they would probably \nnever have left PARC.Thanks to Jessica Livingston and Robert Morris for reading\ndrafts of this, and to Jeff Arnold and the SIPB for inviting me to\nspeak.\n\nComment on this essay.Chinese TranslationArabic Translation",
        "start_char_idx": 34419,
        "end_char_idx": 36086,
        "text_template": "{metadata_str}\n\n{content}",
        "metadata_template": "{key}: {value}",
        "metadata_seperator": "\n",
        "class_name": "TextNode"
      },
      "__type__": "1"
    },
    "a6f90609-0917-479b-9fbe-b63e8d8bdc71": {
      "__data__": {
        "id_": "a6f90609-0917-479b-9fbe-b63e8d8bdc71",
        "embedding": null,
        "metadata": {
          "source": "https://paulgraham.com/6631327.html",
          "title": "6,631,372",
          "language": null
        },
        "excluded_embed_metadata_keys": [],
        "excluded_llm_metadata_keys": [],
        "relationships": {
          "1": {
            "node_id": "e18b5b3e-751b-4475-a303-240255fc90f1",
            "node_type": "4",
            "metadata": {
              "source": "https://paulgraham.com/6631327.html",
              "title": "6,631,372",
              "language": null
            },
            "hash": "4023805f4a22e7c9e81012ec49909a1ed832f5942f0321d630c94345db7ec24a",
            "class_name": "RelatedNodeInfo"
          },
          "2": {
            "node_id": "b9258295-208e-4aa4-91b9-1583060aa262",
            "node_type": "1",
            "metadata": {
              "source": "https://paulgraham.com/mit.html",
              "title": "A Student's Guide to Startups",
              "language": null
            },
            "hash": "9daba6c831a6f163f1e057677179daf1e8647d0ec46bcd9916042208d1a14696",
            "class_name": "RelatedNodeInfo"
          },
          "3": {
            "node_id": "4babb374-f536-46ad-ae92-ed11f4d8d0f7",
            "node_type": "1",
            "metadata": {},
            "hash": "add8d913e4155c44a5b5e456e300408c1fefbff9cbb3b1e2751316f69d9c0850",
            "class_name": "RelatedNodeInfo"
          }
        },
        "text": "6,631,372\n\nMarch 2006, rev August 2009A couple days ago I found to my surprise that I'd been granted a\npatent.\nIt issued in 2003, but no one told me.  I wouldn't know about it\nnow except that a few months ago, while visiting Yahoo, I happened\nto run into a Big Cheese I knew from working there in the late\nnineties.  He brought up something called Revenue Loop, which Viaweb\nhad been working on when they bought us.The idea is basically that you sort search results not in order of\ntextual \"relevance\" (as search engines did then) nor in order of\nhow much advertisers bid (as Overture did) but in order of the bid\ntimes the number of transactions.  Ordinarily you'd do this for\nshopping searches, though in fact one of the features of our scheme\nis that it automatically detects which searches are shopping searches.If you just order the results in order of bids, you can make the\nsearch results useless, because the first results could be dominated\nby lame sites that had bid the most.  But if you order results by\nbid multiplied by transactions, far from selling out, you're getting\na better measure of relevance.  What could be a better sign that\nsomeone was satisfied with a search result than going to the site\nand buying something?And, of course, this algorithm automatically maximizes the revenue\nof the search engine.Everyone is focused on this type of approach now, but few were in\n1998.  In 1998 it was all about selling banner ads.  We didn't know\nthat, so we were pretty excited when we figured out what seemed to\nus the optimal way of doing shopping searches.When Yahoo was thinking of buying us, we had a meeting with Jerry\nYang in New York.  For him, I now realize, this was supposed to be\none of those meetings when you check out a company you've pretty\nmuch decided to buy, just to make sure they're ok guys.  We weren't\nexpected to do more than chat and seem smart and reasonable.  He\nmust have been dismayed when I jumped up to the whiteboard and\nlaunched into a presentation of our exciting new technology.I was just as dismayed when he didn't seem to care at all about it.\nAt the time I thought, \"boy, is this guy poker-faced.  We present\nto him what has to be the optimal way of sorting product search\nresults, and he's not even curious.\"  I didn't realize till much later\nwhy he didn't care.  In 1998, advertisers were overpaying enormously\nfor ads on web sites.  \nIn 1998, if advertisers paid the maximum that traffic was worth to\nthem, Yahoo's revenues would have decreased.Things are different now, of course.  Now this sort of thing is all\nthe rage.  So when I ran into the Yahoo exec I knew from the old\ndays in the Yahoo cafeteria a few months ago, the first thing he\nremembered was not (fortunately) all the fights I had with him, but\nRevenue Loop.\"Well,\" I said, \"I think we actually applied for a patent on it.\nI'm not sure what happened to the application after I left.\"\"Really?  That would be an important patent.\"So someone investigated, and sure enough, that patent application\nhad continued in the pipeline for several years after, and finally\nissued in 2003.The main thing that struck me on reading it, actually, is that\nlawyers at some point messed up my nice clear writing.  Some clever\nperson with a spell checker reduced one section to Zen-like incomprehensibility:\n\n  Also, common spelling errors will tend to get fixed. For example,\n  if users searching for \"compact disc player\" end up spending\n  considerable money at sites offering compact disc players, then\n  those pages will have a higher relevance for that search phrase,\n  even though the phrase \"compact disc player\" is not present on\n  those pages.\n\n(That \"compat disc player\" wasn't a typo, guys.)For the fine prose of the original, see the provisional application\nof February 1998, back when we were still Viaweb and couldn't afford\nto pay lawyers to turn every \"a lot of\" into \"considerable.\"",
        "start_char_idx": 0,
        "end_char_idx": 3899,
        "text_template": "{metadata_str}\n\n{content}",
        "metadata_template": "{key}: {value}",
        "metadata_seperator": "\n",
        "class_name": "TextNode"
      },
      "__type__": "1"
    },
    "4babb374-f536-46ad-ae92-ed11f4d8d0f7": {
      "__data__": {
        "id_": "4babb374-f536-46ad-ae92-ed11f4d8d0f7",
        "embedding": null,
        "metadata": {
          "source": "https://paulgraham.com/own.html",
          "title": "A Project of One's Own",
          "language": null
        },
        "excluded_embed_metadata_keys": [],
        "excluded_llm_metadata_keys": [],
        "relationships": {
          "1": {
            "node_id": "e7447797-cfc5-436f-a4df-01bc405b3e42",
            "node_type": "4",
            "metadata": {
              "source": "https://paulgraham.com/own.html",
              "title": "A Project of One's Own",
              "language": null
            },
            "hash": "990bed822637bc3b072fb31dcd0a67db73156e48536728cc74ddd0a0b4342455",
            "class_name": "RelatedNodeInfo"
          },
          "2": {
            "node_id": "a6f90609-0917-479b-9fbe-b63e8d8bdc71",
            "node_type": "1",
            "metadata": {
              "source": "https://paulgraham.com/6631327.html",
              "title": "6,631,372",
              "language": null
            },
            "hash": "a5b9bfe24ef9e71fa7c85264b58d16deb098269aba6d23f159aeda15fb37581c",
            "class_name": "RelatedNodeInfo"
          },
          "3": {
            "node_id": "f7b8af00-b95e-4b79-bb76-22e7823d89c5",
            "node_type": "1",
            "metadata": {},
            "hash": "a5d81949368d4bb0e167e8e6d919a8f64525a4b7650c380aab237b3e60a1146b",
            "class_name": "RelatedNodeInfo"
          }
        },
        "text": "A Project of One's Own\n\nJune 2021A few days ago, on the way home from school, my nine year old son\ntold me he couldn't wait to get home to write more of the story he\nwas working on. This made me as happy as anything I've heard him\nsay \u2014 not just because he was excited about his story, but because\nhe'd discovered this way of working. Working on a project of your\nown is as different from ordinary work as skating is from walking.\nIt's more fun, but also much more productive.What proportion of great work has been done by people who were\nskating in this sense? If not all of it, certainly a lot.There is something special about working on a project of your own.\nI wouldn't say exactly that you're happier. A better word would be\nexcited, or engaged. You're happy when things are going well, but\noften they aren't. When I'm writing an essay, most of the time I'm\nworried and puzzled: worried that the essay will turn out badly,\nand puzzled because I'm groping for some idea that I can't see\nclearly enough. Will I be able to pin it down with words? In the\nend I usually can, if I take long enough, but I'm never sure; the\nfirst few attempts often fail.You have moments of happiness when things work out, but they don't\nlast long, because then you're on to the next problem. So why do\nit at all? Because to the kind of people who like working this way,\nnothing else feels as right. You feel as if you're an animal in its\nnatural habitat, doing what you were meant to do \u2014 not always\nhappy, maybe, but awake and alive.Many kids experience the excitement of working on projects of their\nown. The hard part is making this converge with the work you do as\nan adult. And our customs make it harder. We treat \"playing\" and\n\"hobbies\" as qualitatively different from \"work\". It's not clear\nto a kid building a treehouse that there's a direct (though long)\nroute from that to architecture or engineering. And instead of\npointing out the route, we conceal it, by implicitly treating the\nstuff kids do as different from real work.\n[1]Instead of telling kids that their treehouses could be on the path\nto the work they do as adults, we tell them the path goes through\nschool. And unfortunately schoolwork tends to be very different from\nworking on projects of one's own. It's usually neither a project,\nnor one's own. So as school gets more serious, working on projects\nof one's own is something that survives, if at all, as a thin thread\noff to the side.It's a bit sad to think of all the high school kids turning their\nbacks on building treehouses and sitting in class dutifully learning\nabout Darwin or Newton to pass some exam, when the work that made\nDarwin and Newton famous was actually closer in spirit to building\ntreehouses than studying for exams.If I had to choose between my kids getting good grades and \nworking on ambitious projects of their own, I'd pick\nthe projects. And not because I'm an indulgent parent, but because\nI've been on the other end and I know which has more predictive\nvalue. When I was picking startups for Y Combinator, I didn't care\nabout applicants' grades. But if they'd worked on projects of their\nown, I wanted to hear all about those.\n[2]It may be inevitable that school is the way it is. I'm not saying\nwe have to redesign it (though I'm not saying we don't), just that\nwe should understand what it does to our attitudes to work \u2014 that\nit steers us toward the dutiful plodding kind of work, often using\ncompetition as bait, and away from skating.There are occasionally times when schoolwork becomes a project of\none's own. Whenever I had to write a paper, that would become a\nproject of my own \u2014 except in English classes, ironically, because\nthe things one has to write in English classes are so \nbogus. And\nwhen I got to college and started taking CS classes, the programs\nI had to write became projects of my own. Whenever I was writing\nor programming, I was usually skating, and that has been true ever\nsince.So where exactly is the edge of projects of one's own? That's an\ninteresting question, partly because the answer is so complicated,\nand partly because there's so much at stake.",
        "start_char_idx": 0,
        "end_char_idx": 4118,
        "text_template": "{metadata_str}\n\n{content}",
        "metadata_template": "{key}: {value}",
        "metadata_seperator": "\n",
        "class_name": "TextNode"
      },
      "__type__": "1"
    },
    "f7b8af00-b95e-4b79-bb76-22e7823d89c5": {
      "__data__": {
        "id_": "f7b8af00-b95e-4b79-bb76-22e7823d89c5",
        "embedding": null,
        "metadata": {
          "source": "https://paulgraham.com/own.html",
          "title": "A Project of One's Own",
          "language": null
        },
        "excluded_embed_metadata_keys": [],
        "excluded_llm_metadata_keys": [],
        "relationships": {
          "1": {
            "node_id": "e7447797-cfc5-436f-a4df-01bc405b3e42",
            "node_type": "4",
            "metadata": {
              "source": "https://paulgraham.com/own.html",
              "title": "A Project of One's Own",
              "language": null
            },
            "hash": "990bed822637bc3b072fb31dcd0a67db73156e48536728cc74ddd0a0b4342455",
            "class_name": "RelatedNodeInfo"
          },
          "2": {
            "node_id": "4babb374-f536-46ad-ae92-ed11f4d8d0f7",
            "node_type": "1",
            "metadata": {
              "source": "https://paulgraham.com/own.html",
              "title": "A Project of One's Own",
              "language": null
            },
            "hash": "2570be58374c7f1cabb5df1d6d34e59cc41bae597596f6802aa3c948cf407655",
            "class_name": "RelatedNodeInfo"
          },
          "3": {
            "node_id": "35987dbb-ef07-4cd5-8d2b-a823e0f57294",
            "node_type": "1",
            "metadata": {},
            "hash": "63e0fd132686a8e602d5a1ea94730298d6ea084515165d4632629fc11340b039",
            "class_name": "RelatedNodeInfo"
          }
        },
        "text": "Whenever I had to write a paper, that would become a\nproject of my own \u2014 except in English classes, ironically, because\nthe things one has to write in English classes are so \nbogus. And\nwhen I got to college and started taking CS classes, the programs\nI had to write became projects of my own. Whenever I was writing\nor programming, I was usually skating, and that has been true ever\nsince.So where exactly is the edge of projects of one's own? That's an\ninteresting question, partly because the answer is so complicated,\nand partly because there's so much at stake. There turn out to be\ntwo senses in which work can be one's own: 1) that you're doing it\nvoluntarily, rather than merely because someone told you to, and\n2) that you're doing it by yourself.The edge of the former is quite sharp. People who care a lot about\ntheir work are usually very sensitive to the difference between\npulling, and being pushed, and work tends to fall into one category\nor the other. But the test isn't simply whether you're told to do\nsomething. You can choose to do something you're told to do. Indeed,\nyou can own it far more thoroughly than the person who told you to\ndo it.For example, math homework is for most people something they're\ntold to do. But for my father, who was a mathematician, it wasn't.\nMost of us think of the problems in a math book as a way to test\nor develop our knowledge of the material explained in each section.\nBut to my father the problems were the part that mattered, and the\ntext was merely a sort of annotation. Whenever he got a new math\nbook it was to him like being given a puzzle: here was a new set\nof problems to solve, and he'd immediately set about solving all\nof them.The other sense of a project being one's own \u2014 working on it by\noneself \u2014 has a much softer edge. It shades gradually into\ncollaboration. And interestingly, it shades into collaboration in\ntwo different ways. One way to collaborate is to share a single\nproject. For example, when two mathematicians collaborate on a proof\nthat takes shape in the course of a conversation between them. The\nother way is when multiple people work on separate projects of their\nown that fit together like a jigsaw puzzle. For example, when one\nperson writes the text of a book and another does the graphic design.\n[3]These two paths into collaboration can of course be combined. But\nunder the right conditions, the excitement of working on a project\nof one's own can be preserved for quite a while before disintegrating\ninto the turbulent flow of work in a large organization. Indeed,\nthe history of successful organizations is partly the history of\ntechniques for preserving that excitement.\n[4]The team that made the original Macintosh were a great example of\nthis phenomenon. People like Burrell Smith and Andy Hertzfeld and\nBill Atkinson and Susan Kare were not just following orders. They\nwere not tennis balls hit by Steve Jobs, but rockets let loose by\nSteve Jobs. There was a lot of collaboration between them, but\nthey all seem to have individually felt the excitement of\nworking on a project of one's own.In Andy Hertzfeld's book on the Macintosh, he describes how they'd\ncome back into the office after dinner and work late into the night.\nPeople who've never experienced the thrill of working on a project\nthey're excited about can't distinguish this kind of working long\nhours from the kind that happens in sweatshops and boiler rooms,\nbut they're at opposite ends of the spectrum. That's why it's a\nmistake to insist dogmatically on \"work/life balance.\" Indeed, the\nmere expression \"work/life\" embodies a mistake: it assumes work and\nlife are distinct. For those to whom the word \"work\" automatically\nimplies the dutiful plodding kind, they are. But for the skaters,\nthe relationship between work and life would be better represented\nby a dash than a slash. I wouldn't want to work on anything that I didn't\nwant to take over my life.Of course, it's easier to achieve this level of motivation when\nyou're making something like the Macintosh. It's easy for something\nnew to feel like a project of your own. That's one of the reasons\nfor the tendency programmers have to rewrite things that don't need\nrewriting, and to write their own versions of things that already\nexist.",
        "start_char_idx": 3552,
        "end_char_idx": 7815,
        "text_template": "{metadata_str}\n\n{content}",
        "metadata_template": "{key}: {value}",
        "metadata_seperator": "\n",
        "class_name": "TextNode"
      },
      "__type__": "1"
    },
    "35987dbb-ef07-4cd5-8d2b-a823e0f57294": {
      "__data__": {
        "id_": "35987dbb-ef07-4cd5-8d2b-a823e0f57294",
        "embedding": null,
        "metadata": {
          "source": "https://paulgraham.com/own.html",
          "title": "A Project of One's Own",
          "language": null
        },
        "excluded_embed_metadata_keys": [],
        "excluded_llm_metadata_keys": [],
        "relationships": {
          "1": {
            "node_id": "e7447797-cfc5-436f-a4df-01bc405b3e42",
            "node_type": "4",
            "metadata": {
              "source": "https://paulgraham.com/own.html",
              "title": "A Project of One's Own",
              "language": null
            },
            "hash": "990bed822637bc3b072fb31dcd0a67db73156e48536728cc74ddd0a0b4342455",
            "class_name": "RelatedNodeInfo"
          },
          "2": {
            "node_id": "f7b8af00-b95e-4b79-bb76-22e7823d89c5",
            "node_type": "1",
            "metadata": {
              "source": "https://paulgraham.com/own.html",
              "title": "A Project of One's Own",
              "language": null
            },
            "hash": "76131713383d316fb09d6580c9d89d9c2c6371a77e15ee4481e237c08dc08276",
            "class_name": "RelatedNodeInfo"
          },
          "3": {
            "node_id": "d4ba86a9-0a12-4258-9b25-8eae9b4a99ea",
            "node_type": "1",
            "metadata": {},
            "hash": "07ad82e44cbec8cfcd4febac0e890d96564043803d85969a2fdbf5e1a693a07e",
            "class_name": "RelatedNodeInfo"
          }
        },
        "text": "That's why it's a\nmistake to insist dogmatically on \"work/life balance.\" Indeed, the\nmere expression \"work/life\" embodies a mistake: it assumes work and\nlife are distinct. For those to whom the word \"work\" automatically\nimplies the dutiful plodding kind, they are. But for the skaters,\nthe relationship between work and life would be better represented\nby a dash than a slash. I wouldn't want to work on anything that I didn't\nwant to take over my life.Of course, it's easier to achieve this level of motivation when\nyou're making something like the Macintosh. It's easy for something\nnew to feel like a project of your own. That's one of the reasons\nfor the tendency programmers have to rewrite things that don't need\nrewriting, and to write their own versions of things that already\nexist. This sometimes alarms managers, and measured by total number\nof characters typed, it's rarely the optimal solution. But it's not\nalways driven simply by arrogance or cluelessness.\nWriting code from scratch is also much more rewarding \u2014 so much\nmore rewarding that a good programmer can end up net ahead, despite\nthe shocking waste of characters. Indeed, it may be one of the\nadvantages of capitalism that it encourages such rewriting. A company\nthat needs software to do something can't use the software already\nwritten to do it at another company, and thus has to write their\nown, which often turns out better.\n[5]The natural alignment between skating and solving new problems is\none of the reasons the payoffs from startups are so high. Not only\nis the market price of unsolved problems higher, you also get a\ndiscount on productivity when you work on them. In fact, you get a\ndouble increase in productivity: when you're doing a clean-sheet\ndesign, it's easier to recruit skaters, and they get to spend all\ntheir time skating.Steve Jobs knew a thing or two about skaters from having watched\nSteve Wozniak. If you can find the right people, you only have to\ntell them what to do at the highest level. They'll handle the\ndetails. Indeed, they insist on it. For a project to feel like your\nown, you must have sufficient autonomy. You can't be working to\norder, or slowed down \nby bureaucracy.One way to ensure autonomy is not to have a boss at all. There are\ntwo ways to do that: to be the boss yourself, and to work on projects\noutside of work. Though they're at opposite ends of the scale\nfinancially, startups and open source projects have a lot in common,\nincluding the fact that they're often run by skaters. And indeed,\nthere's a wormhole from one end of the scale to the other: one of\nthe best ways to discover \nstartup ideas is to work on a project\njust for fun.If your projects are the kind that make money, it's easy to work\non them. It's harder when they're not. And the hardest part, usually,\nis morale. That's where adults have it harder than kids. Kids just\nplunge in and build their treehouse without worrying about whether\nthey're wasting their time, or how it compares to other treehouses.\nAnd frankly we could learn a lot from kids here. The high standards\nmost grownups have for \"real\" work do not always serve us well.The most important phase in a project of one's own is at the\nbeginning: when you go from thinking it might be cool to do x to\nactually doing x. And at that point high standards are not merely\nuseless but positively harmful. There are a few people who start\ntoo many new projects, but far more, I suspect, who are deterred\nby fear of failure from starting projects that would have succeeded\nif they had.But if we couldn't benefit as kids from the knowledge that our\ntreehouses were on the path to grownup projects, we can at least\nbenefit as grownups from knowing that our projects are on a path\nthat stretches back to treehouses. Remember that careless confidence\nyou had as a kid when starting something new? That would be a\npowerful thing to recapture.If it's harder as adults to retain that kind of confidence, we at\nleast tend to be more aware of what we're doing. Kids bounce, or\nare herded, from one kind of work to the next, barely realizing\nwhat's happening to them. Whereas we know more about different types\nof work and have more control over which we do.",
        "start_char_idx": 7024,
        "end_char_idx": 11219,
        "text_template": "{metadata_str}\n\n{content}",
        "metadata_template": "{key}: {value}",
        "metadata_seperator": "\n",
        "class_name": "TextNode"
      },
      "__type__": "1"
    },
    "d4ba86a9-0a12-4258-9b25-8eae9b4a99ea": {
      "__data__": {
        "id_": "d4ba86a9-0a12-4258-9b25-8eae9b4a99ea",
        "embedding": null,
        "metadata": {
          "source": "https://paulgraham.com/own.html",
          "title": "A Project of One's Own",
          "language": null
        },
        "excluded_embed_metadata_keys": [],
        "excluded_llm_metadata_keys": [],
        "relationships": {
          "1": {
            "node_id": "e7447797-cfc5-436f-a4df-01bc405b3e42",
            "node_type": "4",
            "metadata": {
              "source": "https://paulgraham.com/own.html",
              "title": "A Project of One's Own",
              "language": null
            },
            "hash": "990bed822637bc3b072fb31dcd0a67db73156e48536728cc74ddd0a0b4342455",
            "class_name": "RelatedNodeInfo"
          },
          "2": {
            "node_id": "35987dbb-ef07-4cd5-8d2b-a823e0f57294",
            "node_type": "1",
            "metadata": {
              "source": "https://paulgraham.com/own.html",
              "title": "A Project of One's Own",
              "language": null
            },
            "hash": "3044122efa0700770920e1d14c15ab5adf471c7f025c50d3a2513932cc22ad4a",
            "class_name": "RelatedNodeInfo"
          },
          "3": {
            "node_id": "5441bebc-109a-494c-8aca-d65ca24d5729",
            "node_type": "1",
            "metadata": {},
            "hash": "4384acf63b49ff89c0c1e2888a830585a35a9051ca20cab5d8b447d8b3e16ee5",
            "class_name": "RelatedNodeInfo"
          }
        },
        "text": "There are a few people who start\ntoo many new projects, but far more, I suspect, who are deterred\nby fear of failure from starting projects that would have succeeded\nif they had.But if we couldn't benefit as kids from the knowledge that our\ntreehouses were on the path to grownup projects, we can at least\nbenefit as grownups from knowing that our projects are on a path\nthat stretches back to treehouses. Remember that careless confidence\nyou had as a kid when starting something new? That would be a\npowerful thing to recapture.If it's harder as adults to retain that kind of confidence, we at\nleast tend to be more aware of what we're doing. Kids bounce, or\nare herded, from one kind of work to the next, barely realizing\nwhat's happening to them. Whereas we know more about different types\nof work and have more control over which we do. Ideally we can have\nthe best of both worlds: to be deliberate in choosing to work on\nprojects of our own, and carelessly confident in starting new ones.\nNotes[1]\n\"Hobby\" is a curious word. Now it means work that isn't real\nwork \u2014 work that one is not to be judged by \u2014 but originally it just\nmeant an obsession in a fairly general sense (even a political\nopinion, for example) that one metaphorically rode as a child rides\na hobby-horse. It's hard to say if its recent, narrower meaning is\na change for the better or the worse. For sure there are lots of\nfalse positives \u2014 lots of projects that end up being important but\nare dismissed initially as mere hobbies. But on the other hand, the\nconcept provides valuable cover for projects in the early, ugly\nduckling phase.[2]\nTiger parents, as parents so often do, are fighting the last\nwar. Grades mattered more in the old days when the route to success\nwas to acquire \ncredentials \nwhile ascending some predefined ladder.\nBut it's just as well that their tactics are focused on grades. How\nawful it would be if they invaded the territory of projects, and\nthereby gave their kids a distaste for this kind of work by forcing\nthem to do it. Grades are already a grim, fake world, and aren't\nharmed much by parental interference, but working on one's own\nprojects is a more delicate, private thing that could be damaged\nvery easily.[3]\nThe complicated, gradual edge between working on one's own\nprojects and collaborating with others is one reason there is so\nmuch disagreement about the idea of the \"lone genius.\" In practice\npeople collaborate (or not) in all kinds of different ways, but the\nidea of the lone genius is definitely not a myth. There's a core\nof truth to it that goes with a certain way of working.[4]\nCollaboration is powerful too. The optimal organization would\ncombine collaboration and ownership in such a way as to do the least\ndamage to each. Interestingly, companies and university departments\napproach this ideal from opposite directions: companies insist on\ncollaboration, and occasionally also manage both to recruit skaters\nand allow them to skate, and university departments insist on the\nability to do independent research (which is by custom treated as\nskating, whether it is or not), and the people they hire collaborate\nas much as they choose.[5]\nIf a company could design its software in such a way that the\nbest newly arrived programmers always got a clean sheet, it could\nhave a kind of eternal youth. That might not be impossible. If you\nhad a software backbone defining a game with sufficiently clear\nrules, individual programmers could write their own players.\nThanks to Trevor Blackwell, Paul Buchheit, Andy Hertzfeld, Jessica\nLivingston, and Peter Norvig for reading drafts of this.",
        "start_char_idx": 10378,
        "end_char_idx": 13988,
        "text_template": "{metadata_str}\n\n{content}",
        "metadata_template": "{key}: {value}",
        "metadata_seperator": "\n",
        "class_name": "TextNode"
      },
      "__type__": "1"
    },
    "5441bebc-109a-494c-8aca-d65ca24d5729": {
      "__data__": {
        "id_": "5441bebc-109a-494c-8aca-d65ca24d5729",
        "embedding": null,
        "metadata": {
          "source": "https://paulgraham.com/1974-911s.html",
          "title": "1974 Porsche 911 Models",
          "language": null
        },
        "excluded_embed_metadata_keys": [],
        "excluded_llm_metadata_keys": [],
        "relationships": {
          "1": {
            "node_id": "52aa8f96-d12b-4100-a683-2fabce06375d",
            "node_type": "4",
            "metadata": {
              "source": "https://paulgraham.com/1974-911s.html",
              "title": "1974 Porsche 911 Models",
              "language": null
            },
            "hash": "b8d6b931cbe57a4c1123c327a282574e45279a7c11e7005634ccc033c6c2e514",
            "class_name": "RelatedNodeInfo"
          },
          "2": {
            "node_id": "d4ba86a9-0a12-4258-9b25-8eae9b4a99ea",
            "node_type": "1",
            "metadata": {
              "source": "https://paulgraham.com/own.html",
              "title": "A Project of One's Own",
              "language": null
            },
            "hash": "b7034ef0c4f29845540fe7c827c9d9c306b2405be8d6a1338b1c85ee0eb4bfeb",
            "class_name": "RelatedNodeInfo"
          },
          "3": {
            "node_id": "0660f123-8c74-46f2-84e9-d083f9f952fd",
            "node_type": "1",
            "metadata": {},
            "hash": "a0a4102bdfac26535121cc32da6136b9a7863d49c35e07ff4a59b2e20d2c9d27",
            "class_name": "RelatedNodeInfo"
          }
        },
        "text": "1974 Porsche 911 Models",
        "start_char_idx": 0,
        "end_char_idx": 23,
        "text_template": "{metadata_str}\n\n{content}",
        "metadata_template": "{key}: {value}",
        "metadata_seperator": "\n",
        "class_name": "TextNode"
      },
      "__type__": "1"
    },
    "0660f123-8c74-46f2-84e9-d083f9f952fd": {
      "__data__": {
        "id_": "0660f123-8c74-46f2-84e9-d083f9f952fd",
        "embedding": null,
        "metadata": {
          "source": "https://paulgraham.com/12aug95.html",
          "title": "12 August 1995: It Works",
          "language": null
        },
        "excluded_embed_metadata_keys": [],
        "excluded_llm_metadata_keys": [],
        "relationships": {
          "1": {
            "node_id": "6489b718-0596-4d95-a998-6f7ef42684b2",
            "node_type": "4",
            "metadata": {
              "source": "https://paulgraham.com/12aug95.html",
              "title": "12 August 1995: It Works",
              "language": null
            },
            "hash": "e13546b79b28e7d034db96699009039b833cc4e1a6d44fee6c9e541aad3b115d",
            "class_name": "RelatedNodeInfo"
          },
          "2": {
            "node_id": "5441bebc-109a-494c-8aca-d65ca24d5729",
            "node_type": "1",
            "metadata": {
              "source": "https://paulgraham.com/1974-911s.html",
              "title": "1974 Porsche 911 Models",
              "language": null
            },
            "hash": "c5c28e02acc042c87fd74d9dd1673a4d5a6310a197885029fc0ffa8a5b828229",
            "class_name": "RelatedNodeInfo"
          },
          "3": {
            "node_id": "5f028014-d275-4494-a9a1-e2a381477611",
            "node_type": "1",
            "metadata": {},
            "hash": "248341920447574b2fc61fe004d84e1bb611058050ce24c72c65638eaf05e290",
            "class_name": "RelatedNodeInfo"
          }
        },
        "text": "12 August 1995: It Works\n\nThese emails are from the day we got Viaweb working.  I think \nwe demoed it to potential investors a few days later.\n\nFrom rtm@uun.org Sat Aug 12 13:49:39 1995\nTo: pg@garage.uun.org\nSubject: score: 2I have clisp installed, and it has a (shell \"...\") command.The sink works now.From rtm@eecs.harvard.edu Sat Aug 12 16:26:39 1995\nTo: pg@eecs.harvard.edu\nSubject: clispIt loads now. It's running (gen-site)... I think I'll get some coffee.From pg@das.harvard.edu Sat Aug 12 23:25:29 1995\nTo: gino@webgen.com, jlw@webgen.com\nSubject: it works!\nCc: pg, rtmAbout an hour ago we got the generator working remotely.  That\nis, you can now run the generator at our site from Netscape,\nwherever you happen to be.--> If you were a catalog company, yesterday there were about five\n    places that could generate a web catalog for you.  Now anyone\n    with a modem and a copy of Netscape can do it.To use the program, all you have to do is go to a certain URL\nat www.webgen.com.  This page has a form you can type commands\ninto to run the generator.  When it has finished, you can inspect\nyour changed catalog by going to its URL.We now have to do a lot of polishing: the program is very slow\nand not especially user-friendly.  But it is a real, working system,\nand it already generates the best catalogs on the Web.We are thinking of having the service go online for real around\nthe beginning of September.  Between now and then we might like\nto use you as a guinea-pig, Gino.  Actually, we should have\nJulian generate a catalog of his own, too.Yow!  -- pg",
        "start_char_idx": 0,
        "end_char_idx": 1569,
        "text_template": "{metadata_str}\n\n{content}",
        "metadata_template": "{key}: {value}",
        "metadata_seperator": "\n",
        "class_name": "TextNode"
      },
      "__type__": "1"
    },
    "5f028014-d275-4494-a9a1-e2a381477611": {
      "__data__": {
        "id_": "5f028014-d275-4494-a9a1-e2a381477611",
        "embedding": null,
        "metadata": {
          "source": "https://paulgraham.com/laundry.html",
          "title": "A Version 1.0",
          "language": null
        },
        "excluded_embed_metadata_keys": [],
        "excluded_llm_metadata_keys": [],
        "relationships": {
          "1": {
            "node_id": "589d0ad3-61e0-4613-a4af-f4c284376bb6",
            "node_type": "4",
            "metadata": {
              "source": "https://paulgraham.com/laundry.html",
              "title": "A Version 1.0",
              "language": null
            },
            "hash": "4b627a6e19b9a393359e2b7a47fc21c3c712d1d43d68ffa6e309af754381e7fa",
            "class_name": "RelatedNodeInfo"
          },
          "2": {
            "node_id": "0660f123-8c74-46f2-84e9-d083f9f952fd",
            "node_type": "1",
            "metadata": {
              "source": "https://paulgraham.com/12aug95.html",
              "title": "12 August 1995: It Works",
              "language": null
            },
            "hash": "78dd726e6c2de7775ff85e2675f7637ac2e44a1b1a28d17c008d455b13e9b622",
            "class_name": "RelatedNodeInfo"
          },
          "3": {
            "node_id": "9fb1d197-ba9b-45f1-980f-5369ef1b3114",
            "node_type": "1",
            "metadata": {},
            "hash": "c95c80912e17d6f8c94f8237b63d80e2c8558f5687088c46213468b38e16d8e2",
            "class_name": "RelatedNodeInfo"
          }
        },
        "text": "A Version 1.0\n\nOctober 2004\nAs E. B. White said, \"good writing is rewriting.\"  I didn't\nrealize this when I was in school.  In writing, as in math and \nscience, they only show you the finished product.\nYou don't see all the false starts.  This gives students a\nmisleading view of how things get made.Part of the reason it happens is that writers don't want   \npeople to see their mistakes.  But I'm willing to let people\nsee an early draft if it will show how much you have\nto rewrite to beat an essay into shape.Below is the oldest version I can find of\nThe Age of the Essay   \n(probably the second or third day), with\ntext that ultimately survived in \nred and text that later\ngot deleted in gray.\nThere seem to be several categories of cuts: things I got wrong,\nthings that seem like bragging, flames,\ndigressions, stretches of awkward prose, and unnecessary words.I discarded more from the beginning.  That's\nnot surprising; it takes a while to hit your stride.  There\nare more digressions at the start, because I'm not sure where\nI'm heading.The amount of cutting is about average.  I probably write\nthree to four words for every one that appears in the final\nversion of an essay.(Before anyone gets mad at me for opinions expressed here, remember\nthat anything you see here that's not in the final version is obviously\nsomething I chose not to publish, often because I disagree\nwith it.)\nRecently a friend said that what he liked about\nmy essays was that they weren't written the way\nwe'd been taught to write essays in school.  You\nremember: topic sentence, introductory paragraph,\nsupporting paragraphs, conclusion.  It hadn't\noccurred to me till then that those horrible things\nwe had to write in school were even connected to\nwhat I was doing now.  But sure enough, I thought,\nthey did call them \"essays,\" didn't they?Well, they're not.  Those things you have to write\nin school are not only not essays, they're one of the\nmost pointless of all the pointless hoops you have\nto jump through in school.  And I worry that they\nnot only teach students the wrong things about writing,\nbut put them off writing entirely.So I'm going to give the other side of the story: what\nan essay really is, and how you write one.  Or at least,\nhow I write one.  Students be forewarned: if you actually write\nthe kind of essay I describe, you'll probably get bad\ngrades.  But knowing how it's really done should\nat least help you to understand the feeling of futility\nyou have when you're writing the things they tell you to.\nThe most obvious difference between real essays and\nthe things one has to write in school is that real\nessays are not exclusively about English literature.\nIt's a fine thing for schools to\n\nteach students how to\nwrite.  But for some bizarre reason (actually, a very specific bizarre\nreason that I'll explain in a moment),\n\nthe teaching of\nwriting has gotten mixed together with the study\nof literature.  And so all over the country, students are\nwriting not about how a baseball team with a small budget \nmight compete with the Yankees, or the role of color in\nfashion, or what constitutes a good dessert, but about\nsymbolism in Dickens.With obvious \nresults.  Only a few people really\n\ncare about\nsymbolism in Dickens.  The teacher doesn't.\nThe students don't.  Most of the people who've had to write PhD\ndisserations about Dickens don't.  And certainly\n\nDickens himself would be more interested in an essay\nabout color or baseball.How did things get this way?  To answer that we have to go back\nalmost a thousand years.  Between about 500 and 1000, life was\nnot very good in Europe.  The term \"dark ages\" is presently\nout of fashion as too judgemental (the period wasn't dark; \nit was just different), but if this label didn't already\nexist, it would seem an inspired metaphor.  What little\noriginal thought there was took place in lulls between\nconstant wars and had something of the character of\nthe thoughts of parents with a new baby.\nThe most amusing thing written during this\nperiod, Liudprand of Cremona's Embassy to Constantinople, is,\nI suspect, mostly inadvertantly so.Around 1000 Europe began to catch its breath.",
        "start_char_idx": 0,
        "end_char_idx": 4142,
        "text_template": "{metadata_str}\n\n{content}",
        "metadata_template": "{key}: {value}",
        "metadata_seperator": "\n",
        "class_name": "TextNode"
      },
      "__type__": "1"
    },
    "9fb1d197-ba9b-45f1-980f-5369ef1b3114": {
      "__data__": {
        "id_": "9fb1d197-ba9b-45f1-980f-5369ef1b3114",
        "embedding": null,
        "metadata": {
          "source": "https://paulgraham.com/laundry.html",
          "title": "A Version 1.0",
          "language": null
        },
        "excluded_embed_metadata_keys": [],
        "excluded_llm_metadata_keys": [],
        "relationships": {
          "1": {
            "node_id": "589d0ad3-61e0-4613-a4af-f4c284376bb6",
            "node_type": "4",
            "metadata": {
              "source": "https://paulgraham.com/laundry.html",
              "title": "A Version 1.0",
              "language": null
            },
            "hash": "4b627a6e19b9a393359e2b7a47fc21c3c712d1d43d68ffa6e309af754381e7fa",
            "class_name": "RelatedNodeInfo"
          },
          "2": {
            "node_id": "5f028014-d275-4494-a9a1-e2a381477611",
            "node_type": "1",
            "metadata": {
              "source": "https://paulgraham.com/laundry.html",
              "title": "A Version 1.0",
              "language": null
            },
            "hash": "3e1c99894e37bd739ac5ef47db03624a490b6dc5c223423f3d510f67cc019513",
            "class_name": "RelatedNodeInfo"
          },
          "3": {
            "node_id": "bf9563b5-f52a-480c-9d2f-0065718ee7ba",
            "node_type": "1",
            "metadata": {},
            "hash": "3455f1879c14c859fa57943ce6b1fbfd78ddaac9a4df71adcbd30830441552be",
            "class_name": "RelatedNodeInfo"
          }
        },
        "text": "And certainly\n\nDickens himself would be more interested in an essay\nabout color or baseball.How did things get this way?  To answer that we have to go back\nalmost a thousand years.  Between about 500 and 1000, life was\nnot very good in Europe.  The term \"dark ages\" is presently\nout of fashion as too judgemental (the period wasn't dark; \nit was just different), but if this label didn't already\nexist, it would seem an inspired metaphor.  What little\noriginal thought there was took place in lulls between\nconstant wars and had something of the character of\nthe thoughts of parents with a new baby.\nThe most amusing thing written during this\nperiod, Liudprand of Cremona's Embassy to Constantinople, is,\nI suspect, mostly inadvertantly so.Around 1000 Europe began to catch its breath.\nAnd once they\nhad the luxury of curiosity, one of the first things they discovered\nwas what we call \"the classics.\"\nImagine if we were visited  \nby aliens.  If they could even get here they'd presumably know a\nfew things we don't.  Immediately Alien Studies would become\nthe most dynamic field of scholarship: instead of painstakingly\ndiscovering things for ourselves, we could simply suck up\neverything they'd discovered.  So it was in Europe in 1200.\nWhen classical texts began to circulate in Europe, they contained\nnot just new answers, but new questions.  (If anyone proved\na theorem in christian Europe before 1200, for example, there\nis no record of it.)For a couple centuries, some of the most important work\nbeing done was intellectual archaelogy.  Those were also\nthe centuries during which schools were first established.\nAnd since reading ancient texts was the essence of what\nscholars did then, it became the basis of the curriculum.By 1700, someone who wanted to learn about\nphysics didn't need to start by mastering Greek in order to read Aristotle.  But schools\nchange slower than scholarship: the study of\nancient texts\nhad such prestige that it remained the backbone of \neducation\nuntil the late 19th century.  By then it was merely a tradition.\nIt did serve some purposes: reading a foreign language was difficult,\nand thus taught discipline, or at least, kept students busy;\nit introduced students to\ncultures quite different from their own; and its very uselessness\nmade it function (like white gloves) as a social bulwark.\nBut it certainly wasn't\ntrue, and hadn't been true for centuries, that students were\nserving apprenticeships in the hottest area of scholarship.Classical scholarship had also changed.  In the early era, philology\nactually mattered.  The texts that filtered into Europe were\nall corrupted to some degree by the errors of translators and\ncopyists.  Scholars had to figure out what Aristotle said\nbefore they could figure out what he meant.  But by the modern\nera such questions were answered as well as they were ever\ngoing to be.  And so the study of ancient texts became less\nabout ancientness and more about texts.The time was then ripe for the question: if the study of\nancient texts is a valid field for scholarship, why not modern\ntexts?  The answer, of course, is that the raison d'etre\nof classical scholarship was a kind of intellectual archaelogy that\ndoes not need to be done in the case of contemporary authors.\nBut for obvious reasons no one wanted to give that answer.\nThe archaeological work being mostly done, it implied that\nthe people studying the classics were, if not wasting their\ntime, at least working on problems of minor importance.And so began the study of modern literature. There was some\ninitial resistance, but it didn't last long.\nThe limiting\nreagent in the growth of university departments is what\nparents will let undergraduates study.  If parents will let\ntheir children major in x, the rest follows straightforwardly.\nThere will be jobs teaching x, and professors to fill them.\nThe professors will establish scholarly journals and publish\none another's papers.  Universities with x departments will\nsubscribe to the journals.  Graduate students who want jobs\nas professors of x will write dissertations about it.  It may\ntake a good long while for the more prestigious universities\nto cave in and establish departments in cheesier xes,  but\nat the other end of the scale there are so many universities\ncompeting to attract students that the mere establishment of\na discipline requires little more than the desire to do it.High schools imitate universities.",
        "start_char_idx": 3357,
        "end_char_idx": 7778,
        "text_template": "{metadata_str}\n\n{content}",
        "metadata_template": "{key}: {value}",
        "metadata_seperator": "\n",
        "class_name": "TextNode"
      },
      "__type__": "1"
    },
    "bf9563b5-f52a-480c-9d2f-0065718ee7ba": {
      "__data__": {
        "id_": "bf9563b5-f52a-480c-9d2f-0065718ee7ba",
        "embedding": null,
        "metadata": {
          "source": "https://paulgraham.com/laundry.html",
          "title": "A Version 1.0",
          "language": null
        },
        "excluded_embed_metadata_keys": [],
        "excluded_llm_metadata_keys": [],
        "relationships": {
          "1": {
            "node_id": "589d0ad3-61e0-4613-a4af-f4c284376bb6",
            "node_type": "4",
            "metadata": {
              "source": "https://paulgraham.com/laundry.html",
              "title": "A Version 1.0",
              "language": null
            },
            "hash": "4b627a6e19b9a393359e2b7a47fc21c3c712d1d43d68ffa6e309af754381e7fa",
            "class_name": "RelatedNodeInfo"
          },
          "2": {
            "node_id": "9fb1d197-ba9b-45f1-980f-5369ef1b3114",
            "node_type": "1",
            "metadata": {
              "source": "https://paulgraham.com/laundry.html",
              "title": "A Version 1.0",
              "language": null
            },
            "hash": "bdb12b88deb0e0f4594a646c6430f82916a9143f0d45fbfa234ab0b77dd40f54",
            "class_name": "RelatedNodeInfo"
          },
          "3": {
            "node_id": "8a68714c-e9b1-47db-a0e2-9b266ecdefb2",
            "node_type": "1",
            "metadata": {},
            "hash": "7f7ad49da64936aaed49de55b457008711703d97a23ceadf94b2ca89e10842d1",
            "class_name": "RelatedNodeInfo"
          }
        },
        "text": "There was some\ninitial resistance, but it didn't last long.\nThe limiting\nreagent in the growth of university departments is what\nparents will let undergraduates study.  If parents will let\ntheir children major in x, the rest follows straightforwardly.\nThere will be jobs teaching x, and professors to fill them.\nThe professors will establish scholarly journals and publish\none another's papers.  Universities with x departments will\nsubscribe to the journals.  Graduate students who want jobs\nas professors of x will write dissertations about it.  It may\ntake a good long while for the more prestigious universities\nto cave in and establish departments in cheesier xes,  but\nat the other end of the scale there are so many universities\ncompeting to attract students that the mere establishment of\na discipline requires little more than the desire to do it.High schools imitate universities.\nAnd so once university\nEnglish departments were established in the late nineteenth century,\nthe 'riting component of the 3 Rs \nwas morphed into English.\nWith the bizarre consequence that high school students now\nhad to write about English literature-- to write, without\neven realizing it, imitations of whatever\nEnglish professors had been publishing in their journals a\nfew decades before.   It's no wonder if this seems to the\nstudent a pointless exercise, because we're now three steps\nremoved from real work: the students are imitating English\nprofessors, who are imitating classical scholars, who are\nmerely the inheritors of a tradition growing out of what\nwas, 700 years ago, fascinating and urgently needed work.Perhaps high schools should drop English and just teach writing.\nThe valuable part of English classes is learning to write, and\nthat could be taught better by itself.  Students learn better\nwhen they're interested in what they're doing, and it's hard\nto imagine a topic less interesting than symbolism in Dickens.\nMost of the people who write about that sort of thing professionally\nare not really interested in it.  (Though indeed, it's been a\nwhile since they were writing about symbolism; now they're\nwriting about gender.)I have no illusions about how eagerly this suggestion will  \nbe adopted.  Public schools probably couldn't stop teaching\nEnglish even if they wanted to; they're probably required to by\nlaw.  But here's a related suggestion that goes with the grain\ninstead of against it: that universities establish a\nwriting major.  Many of the students who now major in English\nwould major in writing if they could, and most would\nbe better off.It will be argued that it is a good thing for students to be\nexposed to their literary heritage.  Certainly.  But is that\nmore important than that they learn to write well?  And are\nEnglish classes even the place to do it?  After all,\nthe average public high school student gets zero exposure to  \nhis artistic heritage.  No disaster results.\nThe people who are interested in art learn about it for\nthemselves, and those who aren't don't.  I find that American\nadults are no better or worse informed about literature than\nart, despite the fact that they spent years studying literature\nin high school and no time at all studying art.  Which presumably\nmeans that what they're taught in school is rounding error \ncompared to what they pick up on their own.Indeed, English classes may even be harmful.  In my case they\nwere effectively aversion therapy.  Want to make someone dislike\na book?  Force him to read it and write an essay about it.\nAnd make the topic so intellectually bogus that you\ncould not, if asked, explain why one ought to write about it.\nI love to read more than anything, but by the end of high school\nI never read the books we were assigned.  I was so disgusted with\nwhat we were doing that it became a point of honor\nwith me to write nonsense at least as good at the other students'\nwithout having more than glanced over the book to learn the names\nof the characters and a few random events in it.I hoped this might be fixed in college, but I found the same\nproblem there.  It was not the teachers.  It was English.   \nWe were supposed to read novels and write essays about them.\nAbout what, and why?  That no one seemed to be able to explain.\nEventually by trial and error I found that what the teacher  \nwanted us to do was pretend that the story had really taken\nplace, and to analyze based on what the characters said and did (the\nsubtler clues, the better) what their motives must have been.",
        "start_char_idx": 6888,
        "end_char_idx": 11371,
        "text_template": "{metadata_str}\n\n{content}",
        "metadata_template": "{key}: {value}",
        "metadata_seperator": "\n",
        "class_name": "TextNode"
      },
      "__type__": "1"
    },
    "8a68714c-e9b1-47db-a0e2-9b266ecdefb2": {
      "__data__": {
        "id_": "8a68714c-e9b1-47db-a0e2-9b266ecdefb2",
        "embedding": null,
        "metadata": {
          "source": "https://paulgraham.com/laundry.html",
          "title": "A Version 1.0",
          "language": null
        },
        "excluded_embed_metadata_keys": [],
        "excluded_llm_metadata_keys": [],
        "relationships": {
          "1": {
            "node_id": "589d0ad3-61e0-4613-a4af-f4c284376bb6",
            "node_type": "4",
            "metadata": {
              "source": "https://paulgraham.com/laundry.html",
              "title": "A Version 1.0",
              "language": null
            },
            "hash": "4b627a6e19b9a393359e2b7a47fc21c3c712d1d43d68ffa6e309af754381e7fa",
            "class_name": "RelatedNodeInfo"
          },
          "2": {
            "node_id": "bf9563b5-f52a-480c-9d2f-0065718ee7ba",
            "node_type": "1",
            "metadata": {
              "source": "https://paulgraham.com/laundry.html",
              "title": "A Version 1.0",
              "language": null
            },
            "hash": "a59417dd6ba444eefee7072c26023970bd8bd02e9ecf8b2428a3347a79841bb1",
            "class_name": "RelatedNodeInfo"
          },
          "3": {
            "node_id": "ef401163-7a44-4a0e-933a-0494fea60d69",
            "node_type": "1",
            "metadata": {},
            "hash": "2690ae46b79a0d05941be0aab245fb88bce1bb6c8eb8343f8bd42a33aba645ae",
            "class_name": "RelatedNodeInfo"
          }
        },
        "text": "I love to read more than anything, but by the end of high school\nI never read the books we were assigned.  I was so disgusted with\nwhat we were doing that it became a point of honor\nwith me to write nonsense at least as good at the other students'\nwithout having more than glanced over the book to learn the names\nof the characters and a few random events in it.I hoped this might be fixed in college, but I found the same\nproblem there.  It was not the teachers.  It was English.   \nWe were supposed to read novels and write essays about them.\nAbout what, and why?  That no one seemed to be able to explain.\nEventually by trial and error I found that what the teacher  \nwanted us to do was pretend that the story had really taken\nplace, and to analyze based on what the characters said and did (the\nsubtler clues, the better) what their motives must have been.\nOne got extra credit for motives having to do with class,\nas I suspect one must now for those involving gender and  \nsexuality.  I learned how to churn out such stuff well enough\nto get an A, but I never took another English class.And the books we did these disgusting things to, like those\nwe mishandled in high school, I find still have black marks\nagainst them in my mind.  The one saving grace was that   \nEnglish courses tend to favor pompous, dull writers like\nHenry James, who deserve black marks against their names anyway.\nOne of the principles the IRS uses in deciding whether to\nallow deductions is that, if something is fun, it isn't work.\nFields that are intellectually unsure of themselves rely on\na similar principle.  Reading P.G. Wodehouse or Evelyn Waugh or\nRaymond Chandler is too obviously pleasing to seem like\nserious work, as reading Shakespeare would have been before \nEnglish evolved enough to make it an effort to understand him. [sh]\nAnd so good writers (just you wait and see who's still in\nprint in 300 years) are less likely to have readers turned   \nagainst them by clumsy, self-appointed tour guides.\nThe other big difference between a real essay and the \nthings\nthey make you write in school is that a real essay doesn't \ntake a position and then defend it.  That principle,\nlike the idea that we ought to be writing about literature,   \nturns out to be another intellectual hangover of long\nforgotten origins.  It's often mistakenly believed that\nmedieval universities were mostly seminaries.  In fact they\nwere more law schools.  And at least in our tradition\nlawyers are advocates: they are\ntrained to be able to\ntake\neither side of an argument and make as good a case for it  \nas they can. Whether or not this is a good idea (in the case of prosecutors,\nit probably isn't), it tended to pervade\nthe atmosphere of\nearly universities.  After the lecture the most common form\nof discussion was the disputation.  This idea\nis at least\nnominally preserved in our present-day thesis defense-- indeed,\nin the very word thesis.  Most people treat the words \nthesis\nand dissertation as interchangeable, but originally, at least,\na thesis was a position one took and the dissertation was\nthe argument by which one defended it.I'm not complaining that we blur these two words together.\nAs far as I'm concerned, the sooner we lose the original\nsense of the word thesis, the better.  For many, perhaps most,  \ngraduate students, it is stuffing a square peg into a round\nhole to try to recast one's work as a single thesis.  And\nas for the disputation, that seems clearly a net lose.\nArguing two sides of a case may be a necessary evil in a\nlegal dispute, but it's not the best way to get at the truth,\nas I think lawyers would be the first to admit.\nAnd yet this principle is built into the very structure of  \nthe essays\nthey teach you to write in high school.  The topic\nsentence is your thesis, chosen in advance, the supporting \nparagraphs the blows you strike in the conflict, and the\nconclusion--- uh, what it the conclusion?  I was never sure  \nabout that in high school.  If your thesis was well expressed,\nwhat need was there to restate it?  In theory it seemed that\nthe conclusion of a really good essay ought not to need to   \nsay any more than QED.\nBut when you understand the origins\nof this sort of \"essay\", you can see where the\nconclusion comes from.  It's the concluding remarks to the \njury.\nWhat other alternative is there?",
        "start_char_idx": 10510,
        "end_char_idx": 14838,
        "text_template": "{metadata_str}\n\n{content}",
        "metadata_template": "{key}: {value}",
        "metadata_seperator": "\n",
        "class_name": "TextNode"
      },
      "__type__": "1"
    },
    "ef401163-7a44-4a0e-933a-0494fea60d69": {
      "__data__": {
        "id_": "ef401163-7a44-4a0e-933a-0494fea60d69",
        "embedding": null,
        "metadata": {
          "source": "https://paulgraham.com/laundry.html",
          "title": "A Version 1.0",
          "language": null
        },
        "excluded_embed_metadata_keys": [],
        "excluded_llm_metadata_keys": [],
        "relationships": {
          "1": {
            "node_id": "589d0ad3-61e0-4613-a4af-f4c284376bb6",
            "node_type": "4",
            "metadata": {
              "source": "https://paulgraham.com/laundry.html",
              "title": "A Version 1.0",
              "language": null
            },
            "hash": "4b627a6e19b9a393359e2b7a47fc21c3c712d1d43d68ffa6e309af754381e7fa",
            "class_name": "RelatedNodeInfo"
          },
          "2": {
            "node_id": "8a68714c-e9b1-47db-a0e2-9b266ecdefb2",
            "node_type": "1",
            "metadata": {
              "source": "https://paulgraham.com/laundry.html",
              "title": "A Version 1.0",
              "language": null
            },
            "hash": "2f3920cc1702a8c8b3a36eb1036b0ce57e4b1231af8654ff57e318139fb17905",
            "class_name": "RelatedNodeInfo"
          },
          "3": {
            "node_id": "2f792bd6-1e79-46a7-82a6-25dffb18b431",
            "node_type": "1",
            "metadata": {},
            "hash": "0859510f6947021f2945fd7428b007881d5f7820c26f61c4860815b33242deaa",
            "class_name": "RelatedNodeInfo"
          }
        },
        "text": "And yet this principle is built into the very structure of  \nthe essays\nthey teach you to write in high school.  The topic\nsentence is your thesis, chosen in advance, the supporting \nparagraphs the blows you strike in the conflict, and the\nconclusion--- uh, what it the conclusion?  I was never sure  \nabout that in high school.  If your thesis was well expressed,\nwhat need was there to restate it?  In theory it seemed that\nthe conclusion of a really good essay ought not to need to   \nsay any more than QED.\nBut when you understand the origins\nof this sort of \"essay\", you can see where the\nconclusion comes from.  It's the concluding remarks to the \njury.\nWhat other alternative is there?  To answer that\nwe have to\nreach back into history again, though this time not so far.\nTo Michel de Montaigne, inventor of the essay.\nHe was\ndoing something quite different from what a\nlawyer does,\nand\nthe difference is embodied in the name.  Essayer is the French\nverb meaning \"to try\" (the cousin of our word assay),\n\nand an \"essai\" is an effort.\nAn essay is something you\nwrite in order\nto figure something out.Figure out what?  You don't know yet.  And so you can't begin with a\nthesis, because you don't have one, and may never have \none.  An essay doesn't begin with a statement, but with a  \nquestion.  In a real essay, you don't take a position and\ndefend it.  You see a door that's ajar, and you open it and\nwalk in to see what's inside.If all you want to do is figure things out, why do you need\nto write anything, though?  Why not just sit and think?  Well,\nthere precisely is Montaigne's great discovery.  Expressing\nideas helps to form them.  Indeed, helps is far too weak a\nword.  90%\nof what ends up in my essays was stuff\nI only\nthought of when I sat down to write them.  That's why I\nwrite them.So there's another difference between essays and\nthe things\nyou have to write in school.   In school\n\nyou are, in theory,\nexplaining yourself to someone else.  In the best case---if\nyou're really organized---you're just writing it down.\nIn a real essay you're writing for yourself.  You're\nthinking out loud.But not quite.  Just as inviting people over forces you to\nclean up your apartment, writing something that you know\n\nother people will read forces you to think well.  So it\ndoes matter to have an audience.  The things I've written\njust for myself are no good.  Indeed, they're bad in\na particular way:\nthey tend to peter out.  When I run into\ndifficulties, I notice that I\ntend to conclude with a few vague\nquestions and then drift off to get a cup of tea.This seems a common problem.\nIt's practically the standard\nending in blog entries--- with the addition of a \"heh\" or an \nemoticon, prompted by the all too accurate sense that\nsomething is missing.And indeed, a lot of\npublished essays peter out in this\nsame way.\nParticularly the sort written by the staff writers of newsmagazines.  Outside writers tend to supply\neditorials of the defend-a-position variety, which\nmake a beeline toward a rousing (and\nforeordained) conclusion.   But the staff writers feel\nobliged to write something more\nbalanced, which in\npractice ends up meaning blurry.\nSince they're\nwriting for a popular magazine, they start with the\nmost radioactively controversial questions, from which\n(because they're writing for a popular magazine)\nthey then proceed to recoil from\nin terror.\nGay marriage, for or\nagainst?  This group says one thing.  That group says\nanother.  One thing is certain: the question is a\ncomplex one.  (But don't get mad at us.  We didn't\ndraw any conclusions.)Questions aren't enough.  An essay has to come up with answers.\nThey don't always, of course.  Sometimes you start with a  \npromising question and get nowhere.  But those you don't\npublish.  Those are like experiments that get inconclusive\nresults.   Something you publish ought to tell the reader  \nsomething he didn't already know.\nBut what you tell him doesn't matter, so long as   \nit's interesting.  I'm sometimes accused of meandering.\nIn defend-a-position writing that would be a flaw.",
        "start_char_idx": 14146,
        "end_char_idx": 18209,
        "text_template": "{metadata_str}\n\n{content}",
        "metadata_template": "{key}: {value}",
        "metadata_seperator": "\n",
        "class_name": "TextNode"
      },
      "__type__": "1"
    },
    "2f792bd6-1e79-46a7-82a6-25dffb18b431": {
      "__data__": {
        "id_": "2f792bd6-1e79-46a7-82a6-25dffb18b431",
        "embedding": null,
        "metadata": {
          "source": "https://paulgraham.com/laundry.html",
          "title": "A Version 1.0",
          "language": null
        },
        "excluded_embed_metadata_keys": [],
        "excluded_llm_metadata_keys": [],
        "relationships": {
          "1": {
            "node_id": "589d0ad3-61e0-4613-a4af-f4c284376bb6",
            "node_type": "4",
            "metadata": {
              "source": "https://paulgraham.com/laundry.html",
              "title": "A Version 1.0",
              "language": null
            },
            "hash": "4b627a6e19b9a393359e2b7a47fc21c3c712d1d43d68ffa6e309af754381e7fa",
            "class_name": "RelatedNodeInfo"
          },
          "2": {
            "node_id": "ef401163-7a44-4a0e-933a-0494fea60d69",
            "node_type": "1",
            "metadata": {
              "source": "https://paulgraham.com/laundry.html",
              "title": "A Version 1.0",
              "language": null
            },
            "hash": "03f833021b78bb3c0691732d792151f1efcf4d61b323edbbbafa38ff1e2c1ac9",
            "class_name": "RelatedNodeInfo"
          },
          "3": {
            "node_id": "4f8e34c8-8100-462a-a8dc-2634e8b39557",
            "node_type": "1",
            "metadata": {},
            "hash": "f163ba62b384c4293d2a7ee6c11ff722d67dd055b0246796e80615ea4bf5cec0",
            "class_name": "RelatedNodeInfo"
          }
        },
        "text": "Gay marriage, for or\nagainst?  This group says one thing.  That group says\nanother.  One thing is certain: the question is a\ncomplex one.  (But don't get mad at us.  We didn't\ndraw any conclusions.)Questions aren't enough.  An essay has to come up with answers.\nThey don't always, of course.  Sometimes you start with a  \npromising question and get nowhere.  But those you don't\npublish.  Those are like experiments that get inconclusive\nresults.   Something you publish ought to tell the reader  \nsomething he didn't already know.\nBut what you tell him doesn't matter, so long as   \nit's interesting.  I'm sometimes accused of meandering.\nIn defend-a-position writing that would be a flaw.\nThere you're not concerned with truth.  You already\nknow where you're going, and you want to go straight there,\nblustering through obstacles, and hand-waving\nyour way across swampy ground.  But that's not what\nyou're trying to do in an essay.  An essay is supposed to\nbe a search for truth.  It would be suspicious if it didn't\nmeander.The Meander is a river in Asia Minor (aka\nTurkey).\nAs you might expect, it winds all over the place.\nBut does it\ndo this out of frivolity?   Quite the opposite.\nLike all rivers, it's rigorously following the laws of physics.\nThe path it has discovered,\nwinding as it is, represents\nthe most economical route to the sea.The river's algorithm is simple.  At each step, flow down.\nFor the essayist this translates to: flow interesting.\nOf all the places to go next, choose\nwhichever seems\nmost interesting.I'm pushing this metaphor a bit.  An essayist\ncan't have\nquite as little foresight as a river.  In fact what you do\n(or what I do) is somewhere between a river and a roman\nroad-builder.  I have a general idea of the direction\nI want to go in, and\nI choose the next topic with that in mind.  This essay is\nabout writing, so I do occasionally yank it back in that\ndirection, but it is not all the sort of essay I\nthought I was going to write about writing.Note too that hill-climbing (which is what this algorithm is\ncalled) can get you in trouble.\nSometimes, just\nlike a river,\nyou\nrun up against a blank wall.  What\nI do then is just \nwhat the river does: backtrack.\nAt one point in this essay\nI found that after following a certain thread I ran out\nof ideas.  I had to go back n\nparagraphs and start over\nin another direction.  For illustrative purposes I've left\nthe abandoned branch as a footnote.\nErr on the side of the river.  An essay is not a reference\nwork.  It's not something you read looking for a specific\nanswer, and feel cheated if you don't find it.  I'd much\nrather read an essay that went off in an unexpected but\ninteresting direction than one that plodded dutifully along\na prescribed course.So what's interesting?  For me, interesting means surprise.\nDesign, as Matz\nhas said, should follow the principle of\nleast surprise.\nA button that looks like it will make a\nmachine stop should make it stop, not speed up.  Essays\nshould do the opposite.  Essays should aim for maximum\nsurprise.I was afraid of flying for a long time and could only travel\nvicariously.  When friends came back from faraway places,\nit wasn't just out of politeness that I asked them about\ntheir trip.\nI really wanted to know.  And I found that\nthe best way to get information out of them was to ask\nwhat surprised them.  How was the place different from what\nthey expected?  This is an extremely useful question.\nYou can ask it of even\nthe most unobservant people, and it will\nextract information they didn't even know they were\nrecording. Indeed, you can ask it in real time.  Now when I go somewhere\nnew, I make a note of what surprises me about it.  Sometimes I\neven make a conscious effort to visualize the place beforehand,\nso I'll have a detailed image to diff with reality.\nSurprises are facts\nyou didn't already \nknow.\nBut they're\nmore than that.  They're facts\nthat contradict things you\nthought you knew.  And so they're the most valuable sort of\nfact you can get.",
        "start_char_idx": 17519,
        "end_char_idx": 21514,
        "text_template": "{metadata_str}\n\n{content}",
        "metadata_template": "{key}: {value}",
        "metadata_seperator": "\n",
        "class_name": "TextNode"
      },
      "__type__": "1"
    },
    "4f8e34c8-8100-462a-a8dc-2634e8b39557": {
      "__data__": {
        "id_": "4f8e34c8-8100-462a-a8dc-2634e8b39557",
        "embedding": null,
        "metadata": {
          "source": "https://paulgraham.com/laundry.html",
          "title": "A Version 1.0",
          "language": null
        },
        "excluded_embed_metadata_keys": [],
        "excluded_llm_metadata_keys": [],
        "relationships": {
          "1": {
            "node_id": "589d0ad3-61e0-4613-a4af-f4c284376bb6",
            "node_type": "4",
            "metadata": {
              "source": "https://paulgraham.com/laundry.html",
              "title": "A Version 1.0",
              "language": null
            },
            "hash": "4b627a6e19b9a393359e2b7a47fc21c3c712d1d43d68ffa6e309af754381e7fa",
            "class_name": "RelatedNodeInfo"
          },
          "2": {
            "node_id": "2f792bd6-1e79-46a7-82a6-25dffb18b431",
            "node_type": "1",
            "metadata": {
              "source": "https://paulgraham.com/laundry.html",
              "title": "A Version 1.0",
              "language": null
            },
            "hash": "540f92d463699fee2585ecf8f964e12fe651425588cdc26b844cbc5280d5f521",
            "class_name": "RelatedNodeInfo"
          },
          "3": {
            "node_id": "30bcc146-d841-4939-8865-2449bc93b35c",
            "node_type": "1",
            "metadata": {},
            "hash": "d27dd920d4a6fbe1083765af64e0b3d81f227762697205c6b4ca8529b2cc98c0",
            "class_name": "RelatedNodeInfo"
          }
        },
        "text": "I really wanted to know.  And I found that\nthe best way to get information out of them was to ask\nwhat surprised them.  How was the place different from what\nthey expected?  This is an extremely useful question.\nYou can ask it of even\nthe most unobservant people, and it will\nextract information they didn't even know they were\nrecording. Indeed, you can ask it in real time.  Now when I go somewhere\nnew, I make a note of what surprises me about it.  Sometimes I\neven make a conscious effort to visualize the place beforehand,\nso I'll have a detailed image to diff with reality.\nSurprises are facts\nyou didn't already \nknow.\nBut they're\nmore than that.  They're facts\nthat contradict things you\nthought you knew.  And so they're the most valuable sort of\nfact you can get.  They're like a food that's not merely\nhealthy, but counteracts the unhealthy effects of things\nyou've already eaten.\nHow do you find surprises?  Well, therein lies half\nthe work of essay writing.  (The other half is expressing\nyourself well.)   You can at least\nuse yourself as a\nproxy for the reader.  You should only write about things\nyou've thought about a lot.  And anything you come across\nthat surprises you, who've thought about the topic a lot,\nwill probably surprise most readers.For example, in a recent essay I pointed out that because\nyou can only judge computer programmers by working with\nthem, no one knows in programming who the heroes should\nbe.\nI\ncertainly\ndidn't realize this when I started writing\nthe \nessay, and even now I find it kind of weird.  That's\nwhat you're looking for.So if you want to write essays, you need two ingredients:\nyou need\na few topics that you think about a lot, and you\nneed some ability to ferret out the unexpected.What should you think about?  My guess is that it\ndoesn't matter.  Almost everything is\ninteresting if you get deeply\nenough into it.  The one possible exception\nare\nthings\nlike working in fast food, which\nhave deliberately had all\nthe variation sucked out of them.\nIn retrospect, was there\nanything interesting about working in Baskin-Robbins?\nWell, it was interesting to notice\nhow important color was\nto the customers.  Kids a certain age would point into\nthe case and say that they wanted yellow.  Did they want\nFrench Vanilla or Lemon?  They would just look at you\nblankly.  They wanted yellow.  And then there was the\nmystery of why the perennial favorite Pralines n' Cream\nwas so appealing. I'm inclined now to\nthink it was the salt.\nAnd the mystery of why Passion Fruit tasted so disgusting.\nPeople would order it because of the name, and were always\ndisappointed.  It should have been called In-sink-erator\nFruit.\nAnd there was\nthe difference in the way fathers and\nmothers bought ice cream for their kids.\nFathers tended to\nadopt the attitude of\nbenevolent kings bestowing largesse,\nand mothers that of\nharried bureaucrats,\ngiving in to\npressure against their better judgement.\nSo, yes, there does seem to be material, even in\nfast food.What about the other half, ferreting out the unexpected?\nThat may require some natural ability.  I've noticed for\na long time that I'm pathologically observant.  ....[That was as far as I'd gotten at the time.]Notes[sh] In Shakespeare's own time, serious writing meant theological\ndiscourses, not the bawdy plays acted over on the other  \nside of the river among the bear gardens and whorehouses.The other extreme, the work that seems formidable from the moment\nit's created (indeed, is deliberately intended to be)\nis represented by Milton.  Like the Aeneid, Paradise Lost is a\nrock imitating a butterfly that happened to get fossilized.\nEven Samuel Johnson seems to have balked at this, on the one  \nhand paying Milton the compliment of an extensive biography,\nand on the other writing of Paradise Lost that \"none who read it\never wished it longer.\"",
        "start_char_idx": 20741,
        "end_char_idx": 24578,
        "text_template": "{metadata_str}\n\n{content}",
        "metadata_template": "{key}: {value}",
        "metadata_seperator": "\n",
        "class_name": "TextNode"
      },
      "__type__": "1"
    },
    "30bcc146-d841-4939-8865-2449bc93b35c": {
      "__data__": {
        "id_": "30bcc146-d841-4939-8865-2449bc93b35c",
        "embedding": null,
        "metadata": {
          "source": "https://paulgraham.com/yctable.html",
          "title": "2005 Summer Founders",
          "language": null
        },
        "excluded_embed_metadata_keys": [],
        "excluded_llm_metadata_keys": [],
        "relationships": {
          "1": {
            "node_id": "8b04af71-4392-4f23-9ef9-16d89e9567e1",
            "node_type": "4",
            "metadata": {
              "source": "https://paulgraham.com/yctable.html",
              "title": "2005 Summer Founders",
              "language": null
            },
            "hash": "eb8d4d56369d8820defa05f0bfc2454afb8bf209689c75c1738466fcd9ac324b",
            "class_name": "RelatedNodeInfo"
          },
          "2": {
            "node_id": "4f8e34c8-8100-462a-a8dc-2634e8b39557",
            "node_type": "1",
            "metadata": {
              "source": "https://paulgraham.com/laundry.html",
              "title": "A Version 1.0",
              "language": null
            },
            "hash": "0972ef4716026f2f251c48c01f01a90d0f418d0b189ca5adf39471449fe05d5f",
            "class_name": "RelatedNodeInfo"
          },
          "3": {
            "node_id": "808df8bb-b94e-4ff1-9ff4-552b7019dfaf",
            "node_type": "1",
            "metadata": {},
            "hash": "7ef3b4615615bf762f35d2f85cc8543fa3f833bac4dc14c3d1fa87a153c1c76d",
            "class_name": "RelatedNodeInfo"
          }
        },
        "text": "2005 Summer Founders\n\n(Click to see a full-size image.)Us, the 2005 summer founders, and Smartleaf co-founders Mark Nitzberg and Olin Shivers at the 30 foot table architect Kate Courteau designed for us.  The\ndesign of the table presented challenges, because the floor of our building,\nan old factory, is far from level.  Kate designed it in sections, held\ntogether underneath by window latches.  Photo by Alex Lewin.",
        "start_char_idx": 0,
        "end_char_idx": 417,
        "text_template": "{metadata_str}\n\n{content}",
        "metadata_template": "{key}: {value}",
        "metadata_seperator": "\n",
        "class_name": "TextNode"
      },
      "__type__": "1"
    },
    "808df8bb-b94e-4ff1-9ff4-552b7019dfaf": {
      "__data__": {
        "id_": "808df8bb-b94e-4ff1-9ff4-552b7019dfaf",
        "embedding": null,
        "metadata": {
          "source": "https://paulgraham.com/ycombinator.html",
          "title": "A New Venture Animal",
          "language": null
        },
        "excluded_embed_metadata_keys": [],
        "excluded_llm_metadata_keys": [],
        "relationships": {
          "1": {
            "node_id": "bdc434d1-669c-4ce4-b8ca-d756924c94ab",
            "node_type": "4",
            "metadata": {
              "source": "https://paulgraham.com/ycombinator.html",
              "title": "A New Venture Animal",
              "language": null
            },
            "hash": "79867b675279e872165566b49e2feb8b2b7f677245522769fc1ef3b0efe8fdef",
            "class_name": "RelatedNodeInfo"
          },
          "2": {
            "node_id": "30bcc146-d841-4939-8865-2449bc93b35c",
            "node_type": "1",
            "metadata": {
              "source": "https://paulgraham.com/yctable.html",
              "title": "2005 Summer Founders",
              "language": null
            },
            "hash": "5dedab2dccbcda0419685d831afc1dff719431da1d0d2b3cbf72b97534b44dee",
            "class_name": "RelatedNodeInfo"
          },
          "3": {
            "node_id": "6704a0f5-4799-4f60-b1ae-ea5f61a98e0a",
            "node_type": "1",
            "metadata": {},
            "hash": "d78feed6cecc376aa4ebbaccb666398b578c6424cc56b70f3267499ad5faaf19",
            "class_name": "RelatedNodeInfo"
          }
        },
        "text": "A New Venture Animal\n\nMarch 2008, rev May 2013(This essay grew out of something I wrote for myself to figure\nout what we do.  Even though Y Combinator is now 3 years old, we're still\ntrying to understand its implications.)\nI was annoyed recently to read a description of Y Combinator that\nsaid \"Y Combinator does seed funding for startups.\"  What was\nespecially annoying about it was that I wrote it.  This doesn't\nreally convey what we do.  And the reason it's inaccurate is that,\nparadoxically, funding very early stage startups is not mainly about\nfunding.Saying YC does seed funding for startups is a description in terms\nof earlier models.  It's like calling a car a horseless carriage.When you scale animals you can't just keep everything in proportion.\nFor example, volume grows as the cube of linear dimension, but\nsurface area only as the square.  So as animals get bigger they\nhave trouble radiating heat.  That's why mice and rabbits are furry\nand elephants and hippos aren't.  You can't make a mouse by scaling\ndown an elephant.YC represents a new, smaller kind of animal\u2014so much smaller\nthat all the rules are different.Before us, most companies in the startup funding business were\nventure capital funds.  VCs generally fund later stage companies\nthan we do.  And they supply so much money that, even though the\nother things they do may be very valuable, it's not that inaccurate\nto regard VCs as sources of money.  Good VCs are \"smart money,\" but\nthey're still money.All good investors supply a combination of money and help.  But\nthese scale differently, just as volume and surface area do.  Late\nstage investors supply huge amounts of money and\ncomparatively little help: when a company about to go public gets\na mezzanine round of $50 million, the deal tends to be almost\nentirely about money.  As you move earlier in the venture\nfunding process, the ratio of help to money increases, because\nearlier stage companies have different needs.  Early stage companies\nneed less money because they're smaller and cheaper to run, but\nthey need more help because life is so precarious for them.  So\nwhen VCs do a series A round for, say, $2 million, they generally\nexpect to offer a significant amount of help along with the money.Y Combinator occupies the earliest end of the spectrum.  We're at\nleast one and generally two steps before VC funding.  (Though some\nstartups go straight from YC to VC, the most common trajectory is\nto do an angel round first.)  And what happens at Y Combinator is\nas different from what happens in a series A round as a series A\nround is from a mezzanine financing.At our end, money is almost a negligible factor.  The startup usually\nconsists of just the founders. Their living expenses are the\ncompany's main expense, and since most founders are under 30, their\nliving expenses are low.  But at this early stage companies need a\nlot of help.  Practically every question is still unanswered.  Some\ncompanies we've funded have been working on their software for a\nyear or more, but others haven't decided what to work on, or even\nwho the founders should be.When PR people and journalists recount the histories of startups\nafter they've become big, they always underestimate how uncertain\nthings were at first.  They're not being deliberately misleading.\nWhen you look at a company like Google, it's hard to imagine they\ncould once have been small and helpless.  Sure, at one point they\nwere a just a couple guys in a garage\u2014but even then their\ngreatness was assured, and all they had to do was roll forward along\nthe railroad tracks of destiny.Far from it.  A lot of startups with just as promising beginnings\nend up failing.  Google has such momentum now that it would be hard\nfor anyone to stop them.  But all it would have taken in the beginning\nwould have been for two Google employees to focus on the wrong\nthings for six months, and the company could have died.We know, because we've been there, just how vulnerable startups are\nin the earliest phases.  Curiously enough, that's why founders tend\nto get so rich from them.  Reward is always proportionate to risk,\nand very early stage startups are insanely risky.What we really do at Y Combinator is get startups launched straight.\nOne of many metaphors you could use for YC is a steam catapult on\nan aircraft carrier.  We get startups airborne.",
        "start_char_idx": 0,
        "end_char_idx": 4342,
        "text_template": "{metadata_str}\n\n{content}",
        "metadata_template": "{key}: {value}",
        "metadata_seperator": "\n",
        "class_name": "TextNode"
      },
      "__type__": "1"
    },
    "6704a0f5-4799-4f60-b1ae-ea5f61a98e0a": {
      "__data__": {
        "id_": "6704a0f5-4799-4f60-b1ae-ea5f61a98e0a",
        "embedding": null,
        "metadata": {
          "source": "https://paulgraham.com/ycombinator.html",
          "title": "A New Venture Animal",
          "language": null
        },
        "excluded_embed_metadata_keys": [],
        "excluded_llm_metadata_keys": [],
        "relationships": {
          "1": {
            "node_id": "bdc434d1-669c-4ce4-b8ca-d756924c94ab",
            "node_type": "4",
            "metadata": {
              "source": "https://paulgraham.com/ycombinator.html",
              "title": "A New Venture Animal",
              "language": null
            },
            "hash": "79867b675279e872165566b49e2feb8b2b7f677245522769fc1ef3b0efe8fdef",
            "class_name": "RelatedNodeInfo"
          },
          "2": {
            "node_id": "808df8bb-b94e-4ff1-9ff4-552b7019dfaf",
            "node_type": "1",
            "metadata": {
              "source": "https://paulgraham.com/ycombinator.html",
              "title": "A New Venture Animal",
              "language": null
            },
            "hash": "34d2617b75964cb9b3f588ec7c2551f7382f2b579f38588e916fcc2a5d86917d",
            "class_name": "RelatedNodeInfo"
          },
          "3": {
            "node_id": "6cb9484f-1f0b-4539-9cb3-51915eaadd50",
            "node_type": "1",
            "metadata": {},
            "hash": "0205404d5ef49f89bfeb380eb4667b4c5fe3de1eb986e64529c0589717b0f62d",
            "class_name": "RelatedNodeInfo"
          }
        },
        "text": "A lot of startups with just as promising beginnings\nend up failing.  Google has such momentum now that it would be hard\nfor anyone to stop them.  But all it would have taken in the beginning\nwould have been for two Google employees to focus on the wrong\nthings for six months, and the company could have died.We know, because we've been there, just how vulnerable startups are\nin the earliest phases.  Curiously enough, that's why founders tend\nto get so rich from them.  Reward is always proportionate to risk,\nand very early stage startups are insanely risky.What we really do at Y Combinator is get startups launched straight.\nOne of many metaphors you could use for YC is a steam catapult on\nan aircraft carrier.  We get startups airborne.  Barely airborne,\nbut enough that they can accelerate fast.When you're launching planes they have to be set up properly or\nyou're just launching projectiles.  They have to be pointed straight\ndown the deck; the wings have to be trimmed properly; the engines\nhave to be at full power; the pilot has to be ready.  These are the\nkind of problems we deal with.  After we fund startups we work\nclosely with them for three months\u2014so closely in fact that\nwe insist they move to where we are.  And what we do in those three\nmonths is make sure everything is set up for launch.  If there are\ntensions between cofounders we help sort them out.  We get all the\npaperwork set up properly so there are no nasty surprises later.\nIf the founders aren't sure what to focus on first, we try to figure\nthat out.  If there is some obstacle right in front of them, we\neither try to remove it, or shift the startup sideways.  The goal\nis to get every distraction out of the way so the founders can use\nthat time to build (or finish building) something impressive.  And\nthen near the end of the three months we push the button on the\nsteam catapult in the form of Demo Day, where the current group of\nstartups present to pretty much every investor in Silicon Valley.Launching companies isn't identical with launching products.  Though\nwe do spend a lot of time on launch strategies for products, there\nare some things that take too long to build for a startup to launch\nthem before raising their next round of funding.  Several of the\nmost promising startups we've funded haven't launched their products\nyet, but are definitely launched as companies.In the earliest stage, startups not only have more questions to\nanswer, but they tend to be different kinds of questions.  In later\nstage startups the questions are about deals, or hiring, or\norganization.  In the earliest phase they tend to be about technology\nand design.  What do you make?  That's the first problem to solve.\nThat's why our motto is \"Make something people want.\"  This is\nalways a good thing for companies to do, but it's even more important\nearly on, because it sets the bounds for every other question.  Who\nyou hire, how much money you raise, how you market yourself\u2014they\nall depend on what you're making.Because the early problems are so much about technology and design,\nyou probably need to be hackers to do what we do.  While some VCs\nhave technical backgrounds, I don't know any who still write code.\nTheir expertise is mostly in business\u2014as it should be, because\nthat's the kind of expertise you need in the phase between series\nA and (if you're lucky) IPO.We're so different from VCs that we're really a different kind of\nanimal.  Can we claim founders are better off as a result of this\nnew type of venture firm?  I'm pretty sure the answer is yes, because\nYC is an improved version of what happened to our startup, and our\ncase was not atypical.  We started Viaweb with $10,000 in seed money\nfrom our friend Julian.  He was a lawyer and arranged all our\npaperwork, so we could just code.  We spent three months building\na version 1, which we then presented to investors to raise more\nmoney.  Sounds familiar, doesn't it?  But YC improves on that\nsignificantly.  Julian knew a lot about law and business, but his\nadvice ended there; he was not a startup guy.  So we made some basic\nmistakes early on.  And when we presented to investors, we presented\nto only 2, because that was all we knew.",
        "start_char_idx": 3599,
        "end_char_idx": 7793,
        "text_template": "{metadata_str}\n\n{content}",
        "metadata_template": "{key}: {value}",
        "metadata_seperator": "\n",
        "class_name": "TextNode"
      },
      "__type__": "1"
    },
    "6cb9484f-1f0b-4539-9cb3-51915eaadd50": {
      "__data__": {
        "id_": "6cb9484f-1f0b-4539-9cb3-51915eaadd50",
        "embedding": null,
        "metadata": {
          "source": "https://paulgraham.com/ycombinator.html",
          "title": "A New Venture Animal",
          "language": null
        },
        "excluded_embed_metadata_keys": [],
        "excluded_llm_metadata_keys": [],
        "relationships": {
          "1": {
            "node_id": "bdc434d1-669c-4ce4-b8ca-d756924c94ab",
            "node_type": "4",
            "metadata": {
              "source": "https://paulgraham.com/ycombinator.html",
              "title": "A New Venture Animal",
              "language": null
            },
            "hash": "79867b675279e872165566b49e2feb8b2b7f677245522769fc1ef3b0efe8fdef",
            "class_name": "RelatedNodeInfo"
          },
          "2": {
            "node_id": "6704a0f5-4799-4f60-b1ae-ea5f61a98e0a",
            "node_type": "1",
            "metadata": {
              "source": "https://paulgraham.com/ycombinator.html",
              "title": "A New Venture Animal",
              "language": null
            },
            "hash": "0923fbf9c061f3fcd1a78568b9cb5b741c2c73f80277d373ae3f59a312b4f0e1",
            "class_name": "RelatedNodeInfo"
          },
          "3": {
            "node_id": "0bbf90a5-aa8b-4736-b33f-7bf4df666884",
            "node_type": "1",
            "metadata": {},
            "hash": "939e4b0177bdeaea463812b358ce39c4805b2d03b58b4a05eae49c1f8251fa9e",
            "class_name": "RelatedNodeInfo"
          }
        },
        "text": "Can we claim founders are better off as a result of this\nnew type of venture firm?  I'm pretty sure the answer is yes, because\nYC is an improved version of what happened to our startup, and our\ncase was not atypical.  We started Viaweb with $10,000 in seed money\nfrom our friend Julian.  He was a lawyer and arranged all our\npaperwork, so we could just code.  We spent three months building\na version 1, which we then presented to investors to raise more\nmoney.  Sounds familiar, doesn't it?  But YC improves on that\nsignificantly.  Julian knew a lot about law and business, but his\nadvice ended there; he was not a startup guy.  So we made some basic\nmistakes early on.  And when we presented to investors, we presented\nto only 2, because that was all we knew.  If we'd had our later\nselves to encourage and advise us, and Demo Day to present at, we\nwould have been in much better shape.  We probably could have raised\nmoney at 3 to 5 times the valuation we did.If we take 7% of a company we fund, the founders only have to do\n7.5% better in their next round of funding\nto end up net ahead.  We certainly manage that.So who is our 7% coming out of?  If the founders end up net ahead\nit's not coming out of them.  So is it coming out of later stage\ninvestors?  Well, they do end up paying more.  But I think they pay\nmore because the company is actually more valuable.  And later stage\ninvestors have no problem with that.  The returns of a VC fund\ndepend on the quality of the companies they invest in, not how\ncheaply they can buy stock in them.If what we do is useful, why wasn't anyone doing it before?  There\nare two answers to that.  One is that people were doing it before,\njust haphazardly on a smaller scale.  Before us, seed funding came\nprimarily from individual angel investors.  Larry and Sergey, for\nexample, got their seed funding from Andy Bechtolsheim, one of the\nfounders of Sun.  And because he was a startup guy he probably gave\nthem useful advice.  But raising money from angel investors is a\nhit or miss thing.  It's a sideline for most of them, so they only\ndo a handful of deals a year and they don't spend a lot of time on\nthe startups they invest in.  And they're hard to reach, because\nthey don't want random startups pestering them with business plans.\nThe Google guys were lucky because they knew someone who knew\nBechtolsheim.  It generally takes a personal introduction with\nangels.The other reason no one was doing quite what we do is that till\nrecently it was a lot more expensive to start a startup.  You'll\nnotice we haven't funded any biotech startups.  That's still\nexpensive.  But advancing technology has made web startups so cheap\nthat you really can get a company airborne for $15,000.  If you\nunderstand how to operate a steam catapult, at least.So in effect what's happened is that a new ecological niche has\nopened up, and Y Combinator is the new kind of animal that has moved\ninto it.  We're not a replacement for venture capital funds.  We\noccupy a new, adjacent niche.  And conditions in our niche are\nreally quite different.  It's not just that the problems we face\nare different; the whole structure of the business is different.\nVCs are playing a zero-sum game.  They're all competing for a slice\nof a fixed amount of \"deal flow,\" and that explains a lot of their\nbehavior.  Whereas our m.o. is to create new deal flow, by encouraging\nhackers who would have gotten jobs to start their own startups\ninstead.  We compete more with employers than VCs.It's not surprising something like this would happen.  Most fields\nbecome more specialized\u2014more articulated\u2014as they develop,\nand startups are certainly an area in which there has been a lot\nof development over the past couple decades.  The venture business\nin its present form is only about forty years old.  It stands to\nreason it would evolve.And it's natural that the new niche would at first be described,\neven by its inhabitants, in terms of the old one.  But really Y\nCombinator is not in the startup funding business.",
        "start_char_idx": 7032,
        "end_char_idx": 11054,
        "text_template": "{metadata_str}\n\n{content}",
        "metadata_template": "{key}: {value}",
        "metadata_seperator": "\n",
        "class_name": "TextNode"
      },
      "__type__": "1"
    },
    "0bbf90a5-aa8b-4736-b33f-7bf4df666884": {
      "__data__": {
        "id_": "0bbf90a5-aa8b-4736-b33f-7bf4df666884",
        "embedding": null,
        "metadata": {
          "source": "https://paulgraham.com/ycombinator.html",
          "title": "A New Venture Animal",
          "language": null
        },
        "excluded_embed_metadata_keys": [],
        "excluded_llm_metadata_keys": [],
        "relationships": {
          "1": {
            "node_id": "bdc434d1-669c-4ce4-b8ca-d756924c94ab",
            "node_type": "4",
            "metadata": {
              "source": "https://paulgraham.com/ycombinator.html",
              "title": "A New Venture Animal",
              "language": null
            },
            "hash": "79867b675279e872165566b49e2feb8b2b7f677245522769fc1ef3b0efe8fdef",
            "class_name": "RelatedNodeInfo"
          },
          "2": {
            "node_id": "6cb9484f-1f0b-4539-9cb3-51915eaadd50",
            "node_type": "1",
            "metadata": {
              "source": "https://paulgraham.com/ycombinator.html",
              "title": "A New Venture Animal",
              "language": null
            },
            "hash": "97cdae44d3da90465196b53ea17098af52d0c0ab14547ad215bdd0f99914b451",
            "class_name": "RelatedNodeInfo"
          },
          "3": {
            "node_id": "bcd683d1-7544-4a8f-a08d-20f87db6c9b6",
            "node_type": "1",
            "metadata": {},
            "hash": "76e232ebafc9ca2f6a8647da8e3ed89b1ea8ee50e5da59b6dfc399d43e06a96d",
            "class_name": "RelatedNodeInfo"
          }
        },
        "text": "VCs are playing a zero-sum game.  They're all competing for a slice\nof a fixed amount of \"deal flow,\" and that explains a lot of their\nbehavior.  Whereas our m.o. is to create new deal flow, by encouraging\nhackers who would have gotten jobs to start their own startups\ninstead.  We compete more with employers than VCs.It's not surprising something like this would happen.  Most fields\nbecome more specialized\u2014more articulated\u2014as they develop,\nand startups are certainly an area in which there has been a lot\nof development over the past couple decades.  The venture business\nin its present form is only about forty years old.  It stands to\nreason it would evolve.And it's natural that the new niche would at first be described,\neven by its inhabitants, in terms of the old one.  But really Y\nCombinator is not in the startup funding business.  Really we're\nmore of a small, furry steam catapult.Thanks to Trevor Blackwell, Jessica Livingston, and Robert Morris\nfor reading drafts of this.\nComment on this essay.",
        "start_char_idx": 10211,
        "end_char_idx": 11223,
        "text_template": "{metadata_str}\n\n{content}",
        "metadata_template": "{key}: {value}",
        "metadata_seperator": "\n",
        "class_name": "TextNode"
      },
      "__type__": "1"
    },
    "bcd683d1-7544-4a8f-a08d-20f87db6c9b6": {
      "__data__": {
        "id_": "bcd683d1-7544-4a8f-a08d-20f87db6c9b6",
        "embedding": null,
        "metadata": {
          "source": "https://paulgraham.com/firefox.html",
          "title": "A Firefox in IE's Henhouse",
          "language": null
        },
        "excluded_embed_metadata_keys": [],
        "excluded_llm_metadata_keys": [],
        "relationships": {
          "1": {
            "node_id": "ee12588f-82df-4d5c-afbd-19272bc78758",
            "node_type": "4",
            "metadata": {
              "source": "https://paulgraham.com/firefox.html",
              "title": "A Firefox in IE's Henhouse",
              "language": null
            },
            "hash": "4fc916b90bc3edcdc01884cde7d6c19d778fa99ebd33638aaaf18ee84c9d49cf",
            "class_name": "RelatedNodeInfo"
          },
          "2": {
            "node_id": "0bbf90a5-aa8b-4736-b33f-7bf4df666884",
            "node_type": "1",
            "metadata": {
              "source": "https://paulgraham.com/ycombinator.html",
              "title": "A New Venture Animal",
              "language": null
            },
            "hash": "b7ae3466c19abf141d66a35c55b4ba4f71137c0b1eae749cd09c290735ea7267",
            "class_name": "RelatedNodeInfo"
          },
          "3": {
            "node_id": "6807fbcf-d4fb-4b29-b0d7-24f88b451b0a",
            "node_type": "1",
            "metadata": {},
            "hash": "f8dfe7b99093fb882bc46cf001e95cb7fa2c658524a80fc86b771bb11f5cfa27",
            "class_name": "RelatedNodeInfo"
          }
        },
        "text": "A Firefox in IE's Henhouse\n\nBy Steve Hamm, Business Week Online, 17 Sep 2004.Though the Mozilla Web browser's share is still small, \nit's winning converts wary of security holes in Microsoft's \ndominant product\nWhen was the last time you heard about the browser wars? Well, they're back. The reason: For the first time in more than seven years, Microsoft is losing Web browser market share. And it's not just a blip. According to Web analytics company WebSideStory, Microsoft's share of browser users who visited top e-commerce and corporate sites shrank from 95.6% in June to 93.7% in September. And people using browsers made by the Mozilla open-source software group grew from 3.5% to 5.2%.Programmers at the Mozilla Foundation hope to increase that momentum with the release this fall of their new browser's consumer-ready version, called Firefox 1.0. It's superfast and suffers few of the security problems that have plagued Microsoft's Internet Explorer in recent months. \"There's a window of opportunity for Mozilla to gain significant market share,\" says Stacey Quandt, analyst with tech consultant Robert Frances Group in Stamford, Conn.Rest of the StoryGet Firefox",
        "start_char_idx": 0,
        "end_char_idx": 1174,
        "text_template": "{metadata_str}\n\n{content}",
        "metadata_template": "{key}: {value}",
        "metadata_seperator": "\n",
        "class_name": "TextNode"
      },
      "__type__": "1"
    },
    "6807fbcf-d4fb-4b29-b0d7-24f88b451b0a": {
      "__data__": {
        "id_": "6807fbcf-d4fb-4b29-b0d7-24f88b451b0a",
        "embedding": null,
        "metadata": {
          "source": "https://paulgraham.com/tricked.html",
          "title": "\"I can be tricked by anyone who looks like Mark Zuckerberg.\"",
          "language": null
        },
        "excluded_embed_metadata_keys": [],
        "excluded_llm_metadata_keys": [],
        "relationships": {
          "1": {
            "node_id": "b00058e7-ce28-419b-9328-b074993f2aed",
            "node_type": "4",
            "metadata": {
              "source": "https://paulgraham.com/tricked.html",
              "title": "\"I can be tricked by anyone who looks like Mark Zuckerberg.\"",
              "language": null
            },
            "hash": "ddf0147efe4fdf9326cd9bd053ab8fb35312626346b089101ba66f6d57c2d566",
            "class_name": "RelatedNodeInfo"
          },
          "2": {
            "node_id": "bcd683d1-7544-4a8f-a08d-20f87db6c9b6",
            "node_type": "1",
            "metadata": {
              "source": "https://paulgraham.com/firefox.html",
              "title": "A Firefox in IE's Henhouse",
              "language": null
            },
            "hash": "8ed6e4e8f6824f706acc1c988c987c7691da356770665c8854a4a969b94dd65d",
            "class_name": "RelatedNodeInfo"
          },
          "3": {
            "node_id": "21d7f0d2-1222-4724-b86a-dcacb08d7a0d",
            "node_type": "1",
            "metadata": {},
            "hash": "58fd615df577f17e2f4c78d06978ea8fb64b18c6fc2a61babdfe254041cbfeab",
            "class_name": "RelatedNodeInfo"
          }
        },
        "text": "\"I can be tricked by anyone who looks like Mark Zuckerberg.\"\n\nNovember 2014In 2013 a New York Times article quoted me as saying \"I can be tricked by anyone who looks like Mark Zuckerberg.\"That sentence has since become a minor Internet meme, as cherished\nby its adherents as the idea that Obama was born outside the US.Is it true? Of course not. That statement was a joke. I have a\nstrange ability to notice things about faces.  In 2010 we had one\napplicant that I noticed during the interview looked like Zuck.\nAfterward I bored the other partners with an explanation of why.\nAfter years of hearing this sort of thing, my observations about\nfaces had become an ongoing joke within YC.  The startup in question\nfell apart almost immediately due to a cofounder dispute, and\nafterward the other partners kidded me for talking so much about\nhow he looked like Zuck.It was not only a joking reference to a single incident, but\nthe fact that we joked about it shows we knew that looking like\nZuck had no predictive value.As if anyone would think it did.  Could anyone be so naive as to\nthink that resembling Zuck would be enough to make a founder succeed?\nAnd is it plausible that we, of all people, who'd interviewed\nthousands of founders, would think such a thing?So why have so many people since believed I was serious? For the\nsame reason, presumably, that others cling so tenaciously to the\nidea that Obama was born outside the US: because they so want to\nbelieve it.Will writing this fix the problem? Not entirely, I'm sure. In fact\none of the reasons I wrote it was that I'm curious how fixable this\nsort of bogus meme is.  But it will be harder now to make an honest\nmistake.  People will probably still repeat that quote, but now if\nsomeone does it will be proof that either (a) they didn't do their\nresearch or (b) they have an ideological axe to grind.",
        "start_char_idx": 0,
        "end_char_idx": 1858,
        "text_template": "{metadata_str}\n\n{content}",
        "metadata_template": "{key}: {value}",
        "metadata_seperator": "\n",
        "class_name": "TextNode"
      },
      "__type__": "1"
    },
    "21d7f0d2-1222-4724-b86a-dcacb08d7a0d": {
      "__data__": {
        "id_": "21d7f0d2-1222-4724-b86a-dcacb08d7a0d",
        "embedding": null,
        "metadata": {
          "source": "https://paulgraham.com/best.html",
          "title": "The Best Essay",
          "language": null
        },
        "excluded_embed_metadata_keys": [],
        "excluded_llm_metadata_keys": [],
        "relationships": {
          "1": {
            "node_id": "c1698da0-b0f3-4f8f-847b-efdb17132cbd",
            "node_type": "4",
            "metadata": {
              "source": "https://paulgraham.com/best.html",
              "title": "The Best Essay",
              "language": null
            },
            "hash": "6f64a93f00334c61988d02f381c0ec99c0a05305160c0a464ee185dd3d97c596",
            "class_name": "RelatedNodeInfo"
          },
          "2": {
            "node_id": "6807fbcf-d4fb-4b29-b0d7-24f88b451b0a",
            "node_type": "1",
            "metadata": {
              "source": "https://paulgraham.com/tricked.html",
              "title": "\"I can be tricked by anyone who looks like Mark Zuckerberg.\"",
              "language": null
            },
            "hash": "e7cd664284640ffff6b8d407b26146b6360657dda043959a6bd96c4a29fc5bf2",
            "class_name": "RelatedNodeInfo"
          },
          "3": {
            "node_id": "979c319a-d3eb-464e-9ad7-df3ff9ecbe2e",
            "node_type": "1",
            "metadata": {},
            "hash": "92736d6d17a8db5198921dd9626db1b7270243a9530f794777375e2d80e2ad10",
            "class_name": "RelatedNodeInfo"
          }
        },
        "text": "The Best Essay\n\nMarch 2024Despite its title this isn't meant to be the best essay. My goal\nhere is to figure out what the best essay would be like.It would be well-written, but you can write well about any topic.\nWhat made it special would be what it was about.Obviously some topics would be better than others. It probably\nwouldn't be about this year's lipstick colors. But it wouldn't be\nvaporous talk about elevated themes either. A good essay has to be\nsurprising. It has to tell people something they don't already know.The best essay would be on the most important topic you could tell\npeople something surprising about.That may sound obvious, but it has some unexpected consequences.\nOne is that science enters the picture like an elephant stepping\ninto a rowboat. For example, Darwin first described the idea of\nnatural selection in an essay written in 1844.\nTalk about an\nimportant topic you could tell people something surprising about.\nIf that's the test of a great essay, this was surely the best one\nwritten in 1844. \nAnd indeed, the best possible essay at any given\ntime would usually be one describing the most important scientific\nor technological discovery it was possible to make.\n[1]Another unexpected consequence: I imagined when I started writing\nthis that the best essay would be fairly timeless \u2014 that the best\nessay you could write in 1844 would be much the same as the best\none you could write now. But in fact the opposite seems to be true.\nIt might be true that the best painting would be timeless in this\nsense. But it wouldn't be impressive to write an essay introducing\nnatural selection now. The best essay now would be one describing\na great discovery we didn't yet know about.If the question of how to write the best possible essay reduces to\nthe question of how to make great discoveries, then I started with\nthe wrong question. Perhaps what this exercise shows is that we\nshouldn't waste our time writing essays but instead focus on making\ndiscoveries in some specific domain. But I'm interested in essays\nand what can be done with them, so I want to see if there's some\nother question I could have asked.There is, and on the face of it, it seems almost identical to the\none I started with. Instead of asking what would the best essay\nbe? I should have asked how do you write essays well? Though\nthese seem only phrasing apart, their answers diverge. The answer\nto the first question, as we've seen, isn't really about essay\nwriting. The second question forces it to be.Writing essays, at its best, is a way of discovering ideas. How do\nyou do that well? How do you discover by writing?An essay should ordinarily start with what I'm going to call a\nquestion, though I mean this in a very general sense: it doesn't\nhave to be a question grammatically, just something that acts like\none in the sense that it spurs some response.How do you get this initial question? It probably won't work to\nchoose some important-sounding topic at random and go at it.\nProfessional traders won't even trade unless they have what they\ncall an edge \u2014 a convincing story about why in some class of\ntrades they'll win more than they lose. Similarly, you shouldn't\nattack a topic unless you have a way in \u2014 some new insight about\nit or way of approaching it.You don't need to have a complete thesis; you just need some kind\nof gap you can explore. In fact, merely having questions about\nsomething other people take for granted can be edge enough.If you come across a question that's sufficiently puzzling, it could\nbe worth exploring even if it doesn't seem very momentous. Many an\nimportant discovery has been made by pulling on a thread that seemed\ninsignificant at first. How can they all be finches? \n[2]Once you've got a question, then what? You start thinking out loud\nabout it. Not literally out loud, but you commit to a specific\nstring of words in response, as you would if you were talking. This\ninitial response is usually mistaken or incomplete. Writing converts\nyour ideas from vague to bad. But that's a step forward, because\nonce you can see the brokenness, you can fix it.Perhaps beginning writers are alarmed at the thought of starting\nwith something mistaken or incomplete, but you shouldn't be, because\nthis is why essay writing works.",
        "start_char_idx": 0,
        "end_char_idx": 4266,
        "text_template": "{metadata_str}\n\n{content}",
        "metadata_template": "{key}: {value}",
        "metadata_seperator": "\n",
        "class_name": "TextNode"
      },
      "__type__": "1"
    },
    "979c319a-d3eb-464e-9ad7-df3ff9ecbe2e": {
      "__data__": {
        "id_": "979c319a-d3eb-464e-9ad7-df3ff9ecbe2e",
        "embedding": null,
        "metadata": {
          "source": "https://paulgraham.com/best.html",
          "title": "The Best Essay",
          "language": null
        },
        "excluded_embed_metadata_keys": [],
        "excluded_llm_metadata_keys": [],
        "relationships": {
          "1": {
            "node_id": "c1698da0-b0f3-4f8f-847b-efdb17132cbd",
            "node_type": "4",
            "metadata": {
              "source": "https://paulgraham.com/best.html",
              "title": "The Best Essay",
              "language": null
            },
            "hash": "6f64a93f00334c61988d02f381c0ec99c0a05305160c0a464ee185dd3d97c596",
            "class_name": "RelatedNodeInfo"
          },
          "2": {
            "node_id": "21d7f0d2-1222-4724-b86a-dcacb08d7a0d",
            "node_type": "1",
            "metadata": {
              "source": "https://paulgraham.com/best.html",
              "title": "The Best Essay",
              "language": null
            },
            "hash": "bd071516323a5439fc56952f930945cef4cc2f9ca8d75a2396d3355274099ecc",
            "class_name": "RelatedNodeInfo"
          },
          "3": {
            "node_id": "134ab959-f3f9-4e7e-9996-64416e380f62",
            "node_type": "1",
            "metadata": {},
            "hash": "8ac2610403a82f6240d5df9f91ca236301908cd6381c09aecf3fd8ad306a13d0",
            "class_name": "RelatedNodeInfo"
          }
        },
        "text": "Many an\nimportant discovery has been made by pulling on a thread that seemed\ninsignificant at first. How can they all be finches? \n[2]Once you've got a question, then what? You start thinking out loud\nabout it. Not literally out loud, but you commit to a specific\nstring of words in response, as you would if you were talking. This\ninitial response is usually mistaken or incomplete. Writing converts\nyour ideas from vague to bad. But that's a step forward, because\nonce you can see the brokenness, you can fix it.Perhaps beginning writers are alarmed at the thought of starting\nwith something mistaken or incomplete, but you shouldn't be, because\nthis is why essay writing works. Forcing yourself to commit to some\nspecific string of words gives you a starting point, and if it's\nwrong, you'll see that when you reread it. At least half of essay\nwriting is rereading what you've written and asking is this correct\nand complete? You have to be very strict when rereading, not just\nbecause you want to keep yourself honest, but because a gap between\nyour response and the truth is often a sign of new ideas to be\ndiscovered.The prize for being strict with what you've written is not just\nrefinement. When you take a roughly correct answer and try to make\nit exactly right, sometimes you find that you can't, and that the\nreason is that you were depending on a false assumption. And when\nyou discard it, the answer turns out to be completely different.\n[3]Ideally the response to a question is two things: the first step\nin a process that converges on the truth, and a source of additional\nquestions (in my very general sense of the word). So the process\ncontinues recursively, as response spurs response. \n[4]Usually there are several possible responses to a question, which\nmeans you're traversing a tree. But essays are linear, not tree-shaped,\nwhich means you have to choose one branch to follow at each point.\nHow do you choose? Usually you should follow whichever offers the\ngreatest combination of generality and novelty. I don't consciously\nrank branches this way; I just follow whichever seems most exciting;\nbut generality and novelty are what make a branch exciting. \n[5]If you're willing to do a lot of rewriting, you don't have to guess\nright. You can follow a branch and see how it turns out, and if it\nisn't good enough, cut it and backtrack. I do this all the time.\nIn this essay I've already cut a 17-paragraph subtree, in addition\nto countless shorter ones. Maybe I'll reattach it at the end, or\nboil it down to a footnote, or spin it off as its own essay; we'll\nsee. \n[6]In general you want to be quick to cut. One of the most dangerous\ntemptations in writing (and in software and painting) is to keep\nsomething that isn't right, just because it contains a few good bits\nor cost you a lot of effort.The most surprising new question being thrown off at this point is\ndoes it really matter what the initial question is? If the space\nof ideas is highly connected, it shouldn't, because you should be\nable to get from any question to the most valuable ones in a few\nhops. And we see evidence that it's highly connected in the way,\nfor example, that people who are obsessed with some topic can turn\nany conversation toward it. But that only works if you know where\nyou want to go, and you don't in an essay. That's the whole point.\nYou don't want to be the obsessive conversationalist, or all your\nessays will be about the same thing. \n[7]The other reason the initial question matters is that you usually\nfeel somewhat obliged to stick to it. I don't think about this when\nI decide which branch to follow. I just follow novelty and generality.\nSticking to the question is enforced later, when I notice I've\nwandered too far and have to backtrack. But I think this is\nthe optimal solution. You don't want the hunt for novelty and\ngenerality to be constrained in the moment. Go with it and see what\nyou get.\n[8]Since the initial question does constrain you, in the best case it\nsets an upper bound on the quality of essay you'll write.",
        "start_char_idx": 3586,
        "end_char_idx": 7631,
        "text_template": "{metadata_str}\n\n{content}",
        "metadata_template": "{key}: {value}",
        "metadata_seperator": "\n",
        "class_name": "TextNode"
      },
      "__type__": "1"
    },
    "134ab959-f3f9-4e7e-9996-64416e380f62": {
      "__data__": {
        "id_": "134ab959-f3f9-4e7e-9996-64416e380f62",
        "embedding": null,
        "metadata": {
          "source": "https://paulgraham.com/best.html",
          "title": "The Best Essay",
          "language": null
        },
        "excluded_embed_metadata_keys": [],
        "excluded_llm_metadata_keys": [],
        "relationships": {
          "1": {
            "node_id": "c1698da0-b0f3-4f8f-847b-efdb17132cbd",
            "node_type": "4",
            "metadata": {
              "source": "https://paulgraham.com/best.html",
              "title": "The Best Essay",
              "language": null
            },
            "hash": "6f64a93f00334c61988d02f381c0ec99c0a05305160c0a464ee185dd3d97c596",
            "class_name": "RelatedNodeInfo"
          },
          "2": {
            "node_id": "979c319a-d3eb-464e-9ad7-df3ff9ecbe2e",
            "node_type": "1",
            "metadata": {
              "source": "https://paulgraham.com/best.html",
              "title": "The Best Essay",
              "language": null
            },
            "hash": "334669b6d9f749197f0ccc27829dcb76f91689b69709bc714be220cad28c5c95",
            "class_name": "RelatedNodeInfo"
          },
          "3": {
            "node_id": "0aa70024-be72-44c5-8efe-c501680f7cda",
            "node_type": "1",
            "metadata": {},
            "hash": "38047cdf6ba2418bf0b88a9852d0ef9fd9f3660ccfb70aa238c691f726ce0961",
            "class_name": "RelatedNodeInfo"
          }
        },
        "text": "That's the whole point.\nYou don't want to be the obsessive conversationalist, or all your\nessays will be about the same thing. \n[7]The other reason the initial question matters is that you usually\nfeel somewhat obliged to stick to it. I don't think about this when\nI decide which branch to follow. I just follow novelty and generality.\nSticking to the question is enforced later, when I notice I've\nwandered too far and have to backtrack. But I think this is\nthe optimal solution. You don't want the hunt for novelty and\ngenerality to be constrained in the moment. Go with it and see what\nyou get.\n[8]Since the initial question does constrain you, in the best case it\nsets an upper bound on the quality of essay you'll write. If you\ndo as well as you possibly can on the chain of thoughts that follow\nfrom the initial question, the initial question itself is the only\nplace where there's room for variation.It would be a mistake to let this make you too conservative though,\nbecause you can't predict where a question will lead. Not if you're\ndoing things right, because doing things right means making\ndiscoveries, and by definition you can't predict those. So the way\nto respond to this situation is not to be cautious about which\ninitial question you choose, but to write a lot of essays. Essays\nare for taking risks.Almost any question can get you a good essay. Indeed, it took some\neffort to think of a sufficiently unpromising topic in the third\nparagraph, because any essayist's first impulse on hearing that the\nbest essay couldn't be about x would be to try to write it. But if\nmost questions yield good essays, only some yield great ones.Can we predict which questions will yield great essays? Considering\nhow long I've been writing essays, it's alarming how novel that\nquestion feels.One thing I like in an initial question is outrageousness. I love\nquestions that seem naughty in some way \u2014 for example, by seeming\ncounterintuitive or overambitious or heterodox. Ideally all three.\nThis essay is an example. Writing about the best essay implies there\nis such a thing, which pseudo-intellectuals will dismiss as reductive,\nthough it follows necessarily from the possibility of one essay\nbeing better than another. And thinking about how to do something\nso ambitious is close enough to doing it that it holds your attention.I like to start an essay with a gleam in my eye. This could be just\na taste of mine, but there's one aspect of it that probably isn't:\nto write a really good essay on some topic, you have to be interested\nin it. A good writer can write well about anything, but to stretch\nfor the novel insights that are the raison d'etre of the essay, you\nhave to care.If caring about it is one of the criteria for a good initial question,\nthen the optimal question varies from person to person. It also\nmeans you're more likely to write great essays if you care about a\nlot of different things. The more curious you are, the greater the\nprobable overlap between the set of things you're curious about and\nthe set of topics that yield great essays.What other qualities would a great initial question have? It's\nprobably good if it has implications in a lot of different areas.\nAnd I find it's a good sign if it's one that people think has already\nbeen thoroughly explored. But the truth is that I've barely thought\nabout how to choose initial questions, because I rarely do it. I\nrarely choose what to write about; I just start thinking about\nsomething, and sometimes it turns into an essay.Am I going to stop writing essays about whatever I happen to be\nthinking about and instead start working my way through some\nsystematically generated list of topics? That doesn't sound like\nmuch fun. And yet I want to write good essays, and if the initial\nquestion matters, I should care about it.Perhaps the answer is to go one step earlier: to write about whatever\npops into your head, but try to ensure that what pops into your\nhead is good. Indeed, now that I think about it, this has to be the\nanswer, because a mere list of topics wouldn't be any use if you\ndidn't have edge with any of them. To start writing an essay, you\nneed a topic plus some initial insight about it, and you can't\ngenerate those systematically. If only. \n[9]You can probably cause yourself to have more of them, though.",
        "start_char_idx": 6906,
        "end_char_idx": 11213,
        "text_template": "{metadata_str}\n\n{content}",
        "metadata_template": "{key}: {value}",
        "metadata_seperator": "\n",
        "class_name": "TextNode"
      },
      "__type__": "1"
    },
    "0aa70024-be72-44c5-8efe-c501680f7cda": {
      "__data__": {
        "id_": "0aa70024-be72-44c5-8efe-c501680f7cda",
        "embedding": null,
        "metadata": {
          "source": "https://paulgraham.com/best.html",
          "title": "The Best Essay",
          "language": null
        },
        "excluded_embed_metadata_keys": [],
        "excluded_llm_metadata_keys": [],
        "relationships": {
          "1": {
            "node_id": "c1698da0-b0f3-4f8f-847b-efdb17132cbd",
            "node_type": "4",
            "metadata": {
              "source": "https://paulgraham.com/best.html",
              "title": "The Best Essay",
              "language": null
            },
            "hash": "6f64a93f00334c61988d02f381c0ec99c0a05305160c0a464ee185dd3d97c596",
            "class_name": "RelatedNodeInfo"
          },
          "2": {
            "node_id": "134ab959-f3f9-4e7e-9996-64416e380f62",
            "node_type": "1",
            "metadata": {
              "source": "https://paulgraham.com/best.html",
              "title": "The Best Essay",
              "language": null
            },
            "hash": "9a354ffba388bc4e8415cbe7072e50d217d38a4ac4582c0f389aa0ad4fab28e2",
            "class_name": "RelatedNodeInfo"
          },
          "3": {
            "node_id": "006f2691-d840-442d-9f4f-33f59af1ddbc",
            "node_type": "1",
            "metadata": {},
            "hash": "a4ee8477e16a694a8f6552c3573bbec054e2ba480573854be7714b85052e8eaf",
            "class_name": "RelatedNodeInfo"
          }
        },
        "text": "That doesn't sound like\nmuch fun. And yet I want to write good essays, and if the initial\nquestion matters, I should care about it.Perhaps the answer is to go one step earlier: to write about whatever\npops into your head, but try to ensure that what pops into your\nhead is good. Indeed, now that I think about it, this has to be the\nanswer, because a mere list of topics wouldn't be any use if you\ndidn't have edge with any of them. To start writing an essay, you\nneed a topic plus some initial insight about it, and you can't\ngenerate those systematically. If only. \n[9]You can probably cause yourself to have more of them, though. The\nquality of the ideas that come out of your head depends on what goes\nin, and you can improve that in two dimensions, breadth and depth.You can't learn everything, so getting breadth implies learning\nabout topics that are very different from one another. When I tell\npeople about my book-buying trips to Hay and they ask what I buy\nbooks about, I usually feel a bit sheepish answering, because the\ntopics seem like a laundry list of unrelated subjects. But perhaps\nthat's actually optimal in this business.You can also get ideas by talking to people, by doing and building\nthings, and by going places and seeing things. I don't think it's\nimportant to talk to new people so much as the sort of people who\nmake you have new ideas. I get more new ideas after talking for an\nafternoon with Robert Morris than from talking to 20 new smart\npeople. I know because that's what a block of office hours at Y\nCombinator consists of.While breadth comes from reading and talking and seeing, depth comes\nfrom doing. The way to really learn about some domain is to have\nto solve problems in it. Though this could take the form of writing,\nI suspect that to be a good essayist you also have to do, or have\ndone, some other kind of work. That may not be true for most other\nfields, but essay writing is different. You could spend half your\ntime working on something else and be net ahead, so long as it was\nhard.I'm not proposing that as a recipe so much as an encouragement to\nthose already doing it. If you've spent all your life so far working\non other things, you're already halfway there. Though of course to\nbe good at writing you have to like it, and if you like writing\nyou'd probably have spent at least some time doing it.Everything I've said about initial questions applies also to the\nquestions you encounter in writing the essay. They're the same\nthing; every subtree of an essay is usually a shorter essay, just\nas every subtree of a Calder mobile is a smaller mobile. So any\ntechnique that gets you good initial questions also gets you good\nwhole essays.At some point the cycle of question and response reaches what feels\nlike a natural end. Which is a little suspicious; shouldn't every\nanswer suggest more questions? I think what happens is that you\nstart to feel sated. Once you've covered enough interesting ground,\nyou start to lose your appetite for new questions. Which is just\nas well, because the reader is probably feeling sated too. And it's\nnot lazy to stop asking questions, because you could instead be\nasking the initial question of a new essay.That's the ultimate source of drag on the connectedness of ideas:\nthe discoveries you make along the way. If you discover enough\nstarting from question A, you'll never make it to question B. Though\nif you keep writing essays you'll gradually fix this problem by\nburning off such discoveries. So bizarrely enough, writing lots of\nessays makes it as if the space of ideas were more highly connected.When a subtree comes to an end, you can do one of two things. You\ncan either stop, or pull the Cubist trick of laying separate subtrees\nend to end by returning to a question you skipped earlier. Usually\nit requires some sleight of hand to make the essay flow continuously\nat this point, but not this time. This time I actually need an\nexample of the phenomenon. For example, we discovered earlier that\nthe best possible essay wouldn't usually be timeless in the way the\nbest painting would. This seems surprising enough to be\nworth investigating further.There are two senses in which an essay can be timeless: to be about\na matter of permanent importance, and always to have the same effect\non readers. With art these two senses blend together.",
        "start_char_idx": 10581,
        "end_char_idx": 14917,
        "text_template": "{metadata_str}\n\n{content}",
        "metadata_template": "{key}: {value}",
        "metadata_seperator": "\n",
        "class_name": "TextNode"
      },
      "__type__": "1"
    },
    "006f2691-d840-442d-9f4f-33f59af1ddbc": {
      "__data__": {
        "id_": "006f2691-d840-442d-9f4f-33f59af1ddbc",
        "embedding": null,
        "metadata": {
          "source": "https://paulgraham.com/best.html",
          "title": "The Best Essay",
          "language": null
        },
        "excluded_embed_metadata_keys": [],
        "excluded_llm_metadata_keys": [],
        "relationships": {
          "1": {
            "node_id": "c1698da0-b0f3-4f8f-847b-efdb17132cbd",
            "node_type": "4",
            "metadata": {
              "source": "https://paulgraham.com/best.html",
              "title": "The Best Essay",
              "language": null
            },
            "hash": "6f64a93f00334c61988d02f381c0ec99c0a05305160c0a464ee185dd3d97c596",
            "class_name": "RelatedNodeInfo"
          },
          "2": {
            "node_id": "0aa70024-be72-44c5-8efe-c501680f7cda",
            "node_type": "1",
            "metadata": {
              "source": "https://paulgraham.com/best.html",
              "title": "The Best Essay",
              "language": null
            },
            "hash": "1a31052bcc6223242a2090baf31edd0e0a80974e458e6c97ee0e8e75cec3bdde",
            "class_name": "RelatedNodeInfo"
          },
          "3": {
            "node_id": "9b80f7d6-d16f-4510-898c-7764ca000723",
            "node_type": "1",
            "metadata": {},
            "hash": "4d2d507e46a0bfec6fbfbba60407f17c3aff774896a9048d1c8eeb9383c137ff",
            "class_name": "RelatedNodeInfo"
          }
        },
        "text": "So bizarrely enough, writing lots of\nessays makes it as if the space of ideas were more highly connected.When a subtree comes to an end, you can do one of two things. You\ncan either stop, or pull the Cubist trick of laying separate subtrees\nend to end by returning to a question you skipped earlier. Usually\nit requires some sleight of hand to make the essay flow continuously\nat this point, but not this time. This time I actually need an\nexample of the phenomenon. For example, we discovered earlier that\nthe best possible essay wouldn't usually be timeless in the way the\nbest painting would. This seems surprising enough to be\nworth investigating further.There are two senses in which an essay can be timeless: to be about\na matter of permanent importance, and always to have the same effect\non readers. With art these two senses blend together. Art that\nlooked beautiful to the ancient Greeks still looks beautiful to us.\nBut with essays the two senses diverge, because essays\nteach, and you can't teach people something they already know.\nNatural selection is certainly a matter of permanent importance,\nbut an essay explaining it couldn't have the same effect on us that\nit would have had on Darwin's contemporaries, precisely because his\nideas were so successful that everyone already knows about them.\n[10]I imagined when I started writing this that the best possible essay\nwould be timeless in the stricter, evergreen sense: that it would\ncontain some deep, timeless wisdom that would appeal equally to\nAristotle and Feynman. That doesn't seem to be true. But if the\nbest possible essay wouldn't usually be timeless in this stricter\nsense, what would it take to write essays that were?The answer to that turns out to be very strange: to be the evergreen\nkind of timeless, an essay has to be ineffective, in the sense that\nits discoveries aren't assimilated into our shared culture. Otherwise\nthere will be nothing new in it for the second generation of readers.\nIf you want to surprise readers not just now but in the future as\nwell, you have to write essays that won't stick \u2014 essays that,\nno matter how good they are, won't become part of what people in\nthe future learn before they read them. \n[11]I can imagine several ways to do that. One would be to write about\nthings people never learn. For example, it's a long-established\npattern for ambitious people to chase after various types of prizes,\nand only later, perhaps too late, to realize that some of them\nweren't worth as much as they thought. If you write about that, you\ncan be confident of a conveyor belt of future readers to be surprised\nby it.Ditto if you write about the tendency of the inexperienced to overdo\nthings \u2014 of young engineers to produce overcomplicated solutions,\nfor example. There are some kinds of mistakes people never learn\nto avoid except by making them. Any of those should be a timeless\ntopic.Sometimes when we're slow to grasp things it's not just because\nwe're obtuse or in denial but because we've been deliberately lied\nto. There are a lot of things adults lie \nto kids about, and when\nyou reach adulthood, they don't take you aside and hand you a list\nof them. They don't remember which lies they told you, and most\nwere implicit anyway. So contradicting such lies will be a source\nof surprises for as long as adults keep telling them.Sometimes it's systems that lie to you. For example, the educational\nsystems in most countries train you to win by \nhacking the test. But\nthat's not how you win at the most important real-world tests, and\nafter decades of training, this is hard for new arrivals in the real\nworld to grasp. Helping them overcome such institutional lies will\nwork as long as the institutions remain broken. \n[12]Another recipe for timelessness is to write about things readers\nalready know, but in much more detail than can be transmitted\nculturally. \"Everyone knows,\" for example, that it can be rewarding\nto have kids. But till you have them you don't know precisely what\nforms that takes, and even then much of what you know you may never\nhave put into words.I've written about all these kinds of topics. But I didn't do it\nin a deliberate attempt to write essays that were timeless in the\nstricter sense. And indeed, the fact that this depends on one's ideas\nnot sticking suggests that it's not worth making a deliberate attempt\nto.",
        "start_char_idx": 14068,
        "end_char_idx": 18423,
        "text_template": "{metadata_str}\n\n{content}",
        "metadata_template": "{key}: {value}",
        "metadata_seperator": "\n",
        "class_name": "TextNode"
      },
      "__type__": "1"
    },
    "9b80f7d6-d16f-4510-898c-7764ca000723": {
      "__data__": {
        "id_": "9b80f7d6-d16f-4510-898c-7764ca000723",
        "embedding": null,
        "metadata": {
          "source": "https://paulgraham.com/best.html",
          "title": "The Best Essay",
          "language": null
        },
        "excluded_embed_metadata_keys": [],
        "excluded_llm_metadata_keys": [],
        "relationships": {
          "1": {
            "node_id": "c1698da0-b0f3-4f8f-847b-efdb17132cbd",
            "node_type": "4",
            "metadata": {
              "source": "https://paulgraham.com/best.html",
              "title": "The Best Essay",
              "language": null
            },
            "hash": "6f64a93f00334c61988d02f381c0ec99c0a05305160c0a464ee185dd3d97c596",
            "class_name": "RelatedNodeInfo"
          },
          "2": {
            "node_id": "006f2691-d840-442d-9f4f-33f59af1ddbc",
            "node_type": "1",
            "metadata": {
              "source": "https://paulgraham.com/best.html",
              "title": "The Best Essay",
              "language": null
            },
            "hash": "dc4b986879ef4ad6a9f1e40127091f9aa1c8d83e5200fcc23a2ef1c976165369",
            "class_name": "RelatedNodeInfo"
          },
          "3": {
            "node_id": "a1e77dc7-43c9-4980-a5c3-a2d2faf5321f",
            "node_type": "1",
            "metadata": {},
            "hash": "85e9636a630a06464dfca94dd375617c917903c708a90ffeecf81557cf575af0",
            "class_name": "RelatedNodeInfo"
          }
        },
        "text": "Helping them overcome such institutional lies will\nwork as long as the institutions remain broken. \n[12]Another recipe for timelessness is to write about things readers\nalready know, but in much more detail than can be transmitted\nculturally. \"Everyone knows,\" for example, that it can be rewarding\nto have kids. But till you have them you don't know precisely what\nforms that takes, and even then much of what you know you may never\nhave put into words.I've written about all these kinds of topics. But I didn't do it\nin a deliberate attempt to write essays that were timeless in the\nstricter sense. And indeed, the fact that this depends on one's ideas\nnot sticking suggests that it's not worth making a deliberate attempt\nto. You should write about topics of timeless importance, yes, but\nif you do such a good job that your conclusions stick and future\ngenerations find your essay obvious instead of novel, so much the\nbetter. You've crossed into Darwin territory.Writing about topics of timeless importance is an instance of\nsomething even more general, though: breadth of applicability. And\nthere are more kinds of breadth than chronological \u2014 applying to\nlots of different fields, for example. So breadth is the ultimate\naim.I already aim for it. Breadth and novelty are the two things I'm\nalways chasing. But I'm glad I understand where timelessness fits.I understand better where a lot of things fit now. This essay has\nbeen a kind of tour of essay writing. I started out hoping to get\nadvice about topics; if you assume good writing, the only thing\nleft to differentiate the best essay is its topic. And I did get\nadvice about topics: discover natural selection. Yeah, that would\nbe nice. But when you step back and ask what's the best you can do\nshort of making some great discovery like that, the answer turns\nout to be about procedure. Ultimately the quality of an essay is a\nfunction of the ideas discovered in it, and the way you get them\nis by casting a wide net for questions and then being very exacting\nwith the answers.The most striking feature of this map of essay writing are the\nalternating stripes of inspiration and effort required. The questions\ndepend on inspiration, but the answers can be got by sheer persistence.\nYou don't have to get an answer right the first time, but there's\nno excuse for not getting it right eventually, because you can keep\nrewriting till you do. And this is not just a theoretical possibility.\nIt's a pretty accurate description of the way I work. I'm rewriting\nas we speak.But although I wish I could say that writing great essays depends mostly\non effort, in the limit case it's inspiration that makes the\ndifference. In the limit case, the questions are the harder thing\nto get. That pool has no bottom.How to get more questions? That is the most important question of\nall.Notes[1]\nThere might be some resistance to this conclusion on the\ngrounds that some of these discoveries could only be understood by\na small number of readers. But you get into all sorts of difficulties\nif you want to disqualify essays on this account. How do you decide\nwhere the cutoff should be? If a virus kills off everyone except a \nhandful of people sequestered at Los Alamos,\ncould an essay that had been disqualified now be eligible? Etc.Darwin's 1844 essay was derived from an earlier version written in 1839.\nExtracts from it were published in 1858.[2]\nWhen you find yourself very curious about an apparently minor\nquestion, that's an exciting sign. Evolution has designed you to\npay attention to things that matter. So when you're very curious\nabout something random, that could mean you've unconsciously noticed\nit's less random than it seems.[3]\nCorollary: If you're not intellectually honest, your writing\nwon't just be biased, but also boring, because you'll miss all the\nideas you'd have discovered if you pushed for the truth.[4]\nSometimes this process begins before you start writing.\nSometimes you've already figured out the first few things you want\nto say. Schoolchildren are often taught they should decide everything\nthey want to say, and write this down as an outline before they\nstart writing the essay itself. Maybe that's a good way to get them\nstarted \u2014 or not, I don't know \u2014 but it's antithetical to the\nspirit of essay writing.",
        "start_char_idx": 17695,
        "end_char_idx": 21985,
        "text_template": "{metadata_str}\n\n{content}",
        "metadata_template": "{key}: {value}",
        "metadata_seperator": "\n",
        "class_name": "TextNode"
      },
      "__type__": "1"
    },
    "a1e77dc7-43c9-4980-a5c3-a2d2faf5321f": {
      "__data__": {
        "id_": "a1e77dc7-43c9-4980-a5c3-a2d2faf5321f",
        "embedding": null,
        "metadata": {
          "source": "https://paulgraham.com/best.html",
          "title": "The Best Essay",
          "language": null
        },
        "excluded_embed_metadata_keys": [],
        "excluded_llm_metadata_keys": [],
        "relationships": {
          "1": {
            "node_id": "c1698da0-b0f3-4f8f-847b-efdb17132cbd",
            "node_type": "4",
            "metadata": {
              "source": "https://paulgraham.com/best.html",
              "title": "The Best Essay",
              "language": null
            },
            "hash": "6f64a93f00334c61988d02f381c0ec99c0a05305160c0a464ee185dd3d97c596",
            "class_name": "RelatedNodeInfo"
          },
          "2": {
            "node_id": "9b80f7d6-d16f-4510-898c-7764ca000723",
            "node_type": "1",
            "metadata": {
              "source": "https://paulgraham.com/best.html",
              "title": "The Best Essay",
              "language": null
            },
            "hash": "85b6e995f141dcf82dc5c18fff1a3afc6dd49b8c06bbb2de28e26d7d090dc67e",
            "class_name": "RelatedNodeInfo"
          },
          "3": {
            "node_id": "e7bf8319-8855-41c7-b7c3-79497347c818",
            "node_type": "1",
            "metadata": {},
            "hash": "c64fbf94ac9f9a9f3833fa3e3bce102c02e3d027d44d8e962ef18545554e2fc3",
            "class_name": "RelatedNodeInfo"
          }
        },
        "text": "Evolution has designed you to\npay attention to things that matter. So when you're very curious\nabout something random, that could mean you've unconsciously noticed\nit's less random than it seems.[3]\nCorollary: If you're not intellectually honest, your writing\nwon't just be biased, but also boring, because you'll miss all the\nideas you'd have discovered if you pushed for the truth.[4]\nSometimes this process begins before you start writing.\nSometimes you've already figured out the first few things you want\nto say. Schoolchildren are often taught they should decide everything\nthey want to say, and write this down as an outline before they\nstart writing the essay itself. Maybe that's a good way to get them\nstarted \u2014 or not, I don't know \u2014 but it's antithetical to the\nspirit of essay writing. The more detailed your outline, the less\nyour ideas can benefit from the sort of discovery that essays are for.[5]\nThe problem with this type of \"greedy\" algorithm is that you\ncan end up on a local maximum. If the most valuable question is\npreceded by a boring one, you'll overlook it. But I can't imagine\na better strategy. There's no lookahead except by writing. So use\na greedy algorithm and a lot of time.[6]\nI ended up reattaching the first 5 of the 17 paragraphs, and\ndiscarding the rest.[7]\nStephen Fry confessed to making use of this phenomenon when\ntaking exams at Oxford. He had in his head a standard essay about\nsome general literary topic, and he would find a way to turn the\nexam question toward it and then just reproduce it again.Strictly speaking it's the graph of ideas that would be highly\nconnected, not the space, but that usage would confuse people who\ndon't know graph theory, whereas people who do know it will get\nwhat I mean if I say \"space\".[8]\nToo far doesn't depend just on the distance from the original\ntopic. It's more like that distance divided by the value of whatever\nI've discovered in the subtree.[9]\nOr can you? I should try writing about this. Even if the\nchance of succeeding is small, the expected value is huge.[10]\nThere was a vogue in the 20th century for saying that the\npurpose of art was also to teach. Some artists tried to justify\ntheir work by explaining that their goal was not to produce something\ngood, but to challenge our preconceptions about art. And to be fair,\nart can teach somewhat. The ancient Greeks' naturalistic sculptures\nrepresented a new idea, and must have been extra exciting to\ncontemporaries on that account. But they still look good to us.[11]\nBertrand Russell caused huge controversy in the early 20th\ncentury with his ideas about \"trial marriage.\" But they make boring\nreading now, because they prevailed. \"Trial marriage\" is what we\ncall \"dating.\"[12]\nIf you'd asked me 10 years ago, I'd have predicted that schools\nwould continue to teach hacking the test for centuries. But now it\nseems plausible that students will soon be taught individually by\nAIs, and that exams will be replaced by ongoing, invisible\nmicro-assessments.Thanks to Sam Altman, Trevor Blackwell, \nJessica Livingston, Robert\nMorris, Courtenay Pipkin, and Harj Taggar for reading drafts of\nthis.",
        "start_char_idx": 21187,
        "end_char_idx": 24324,
        "text_template": "{metadata_str}\n\n{content}",
        "metadata_template": "{key}: {value}",
        "metadata_seperator": "\n",
        "class_name": "TextNode"
      },
      "__type__": "1"
    },
    "e7bf8319-8855-41c7-b7c3-79497347c818": {
      "__data__": {
        "id_": "e7bf8319-8855-41c7-b7c3-79497347c818",
        "embedding": null,
        "metadata": {
          "source": "https://paulgraham.com/kids.html",
          "title": "Having Kids",
          "language": null
        },
        "excluded_embed_metadata_keys": [],
        "excluded_llm_metadata_keys": [],
        "relationships": {
          "1": {
            "node_id": "3c5c4648-9cc0-40de-91d4-e8fd6b54b660",
            "node_type": "4",
            "metadata": {
              "source": "https://paulgraham.com/kids.html",
              "title": "Having Kids",
              "language": null
            },
            "hash": "c9d1bd67cf75685a30a023e16fe280398347d9d217055bec00d8eac4141d9d49",
            "class_name": "RelatedNodeInfo"
          },
          "2": {
            "node_id": "a1e77dc7-43c9-4980-a5c3-a2d2faf5321f",
            "node_type": "1",
            "metadata": {
              "source": "https://paulgraham.com/best.html",
              "title": "The Best Essay",
              "language": null
            },
            "hash": "0c251661476a88e33c2de053ea125c295960fb39728ee22e1d8283ff59d12d27",
            "class_name": "RelatedNodeInfo"
          },
          "3": {
            "node_id": "1957ee17-7db7-4cb8-ba63-b176f857c8c0",
            "node_type": "1",
            "metadata": {},
            "hash": "db44d012db37f1ac7cfdf6b122bc03ac5ee52b9e221a122603f62075443cf5a2",
            "class_name": "RelatedNodeInfo"
          }
        },
        "text": "Having Kids\n\nDecember 2019Before I had kids, I was afraid of having kids. Up to that point I\nfelt about kids the way the young Augustine felt about living\nvirtuously. I'd have been sad to think I'd never have children.\nBut did I want them now? No.If I had kids, I'd become a parent, and parents, as I'd known since\nI was a kid, were uncool. They were dull and responsible and had\nno fun.  And while it's not surprising that kids would believe that,\nto be honest I hadn't seen much as an adult to change my mind.\nWhenever I'd noticed parents with kids, the kids seemed to be\nterrors, and the parents pathetic harried creatures, even when they\nprevailed.When people had babies, I congratulated them enthusiastically,\nbecause that seemed to be what one did. But I didn't feel it at\nall.  \"Better you than me,\" I was thinking.Now when people have babies I congratulate them enthusiastically and\nI mean it. Especially the first one. I feel like they just got the best gift in the world.What changed, of course, is that I had kids. Something I dreaded\nturned out to be wonderful.Partly, and I won't deny it, this is because of serious chemical\nchanges that happened almost instantly when our first child was\nborn.  It was like someone flipped a switch. I suddenly felt\nprotective not just toward our child, but toward all children. As I was\ndriving my wife and new son home from the hospital, I approached a\ncrosswalk full of pedestrians, and I found myself thinking \"I have\nto be really careful of all these people. Every one of them is\nsomeone's child!\"So to some extent you can't trust me when I say having kids is\ngreat.  To some extent I'm like a religious cultist telling you\nthat you'll be happy if you join the cult too \u0097 but only because\njoining the cult will alter your mind in a way that will make you\nhappy to be a cult member.But not entirely. There were some things\nabout having kids that I clearly got wrong before I had them.For example, there was a huge amount of selection bias in my\nobservations of parents and children. Some parents may have noticed\nthat I wrote \"Whenever I'd noticed parents with kids.\" Of course\nthe times I noticed kids were when things were going wrong. I only\nnoticed them when they made noise. And where was I when I noticed\nthem?  Ordinarily I never went to places with kids, so the only\ntimes I encountered them were in shared bottlenecks like airplanes.\nWhich is not exactly a representative sample. Flying with a toddler\nis something very few parents enjoy.What I didn't notice, because they tend to be much quieter, were\nall the great moments parents had with kids. People don't talk about\nthese much \u0097 the magic is hard to put into words, and all other\nparents know about them anyway \u0097 but one of the great things about\nhaving kids is that there are so many times when you feel there is\nnowhere else you'd rather be, and nothing else you'd rather be\ndoing.  You don't have to be doing anything special. You could just\nbe going somewhere together, or putting them to bed, or pushing\nthem on the swings at the park. But you wouldn't trade these moments\nfor anything. One doesn't tend to associate kids with peace, but\nthat's what you feel.  You don't need to look any\nfurther than where you are right now.Before I had kids, I had moments of this kind of peace, but they\nwere rarer. With kids it can happen several times a day.My other source of data about kids was my own childhood, and that\nwas similarly misleading. I was pretty bad, and was always in trouble\nfor something or other. So it seemed to me that parenthood was\nessentially law enforcement.  I didn't realize there were good times\ntoo.I remember my mother telling me once when I was about 30 that she'd\nreally enjoyed having me and my sister. My god, I thought, this\nwoman is a saint. She not only endured all the pain we subjected\nher to, but actually enjoyed it? Now I realize she was simply telling\nthe truth.She said that one reason she liked having us was that we'd been\ninteresting to talk to. That took me by surprise when I had kids.\nYou don't just love them. They become your friends too. They're\nreally interesting.",
        "start_char_idx": 0,
        "end_char_idx": 4129,
        "text_template": "{metadata_str}\n\n{content}",
        "metadata_template": "{key}: {value}",
        "metadata_seperator": "\n",
        "class_name": "TextNode"
      },
      "__type__": "1"
    },
    "1957ee17-7db7-4cb8-ba63-b176f857c8c0": {
      "__data__": {
        "id_": "1957ee17-7db7-4cb8-ba63-b176f857c8c0",
        "embedding": null,
        "metadata": {
          "source": "https://paulgraham.com/kids.html",
          "title": "Having Kids",
          "language": null
        },
        "excluded_embed_metadata_keys": [],
        "excluded_llm_metadata_keys": [],
        "relationships": {
          "1": {
            "node_id": "3c5c4648-9cc0-40de-91d4-e8fd6b54b660",
            "node_type": "4",
            "metadata": {
              "source": "https://paulgraham.com/kids.html",
              "title": "Having Kids",
              "language": null
            },
            "hash": "c9d1bd67cf75685a30a023e16fe280398347d9d217055bec00d8eac4141d9d49",
            "class_name": "RelatedNodeInfo"
          },
          "2": {
            "node_id": "e7bf8319-8855-41c7-b7c3-79497347c818",
            "node_type": "1",
            "metadata": {
              "source": "https://paulgraham.com/kids.html",
              "title": "Having Kids",
              "language": null
            },
            "hash": "19a39d1014784ac77ed3638f1514343702faca92f85707dec9e866f43b1b2280",
            "class_name": "RelatedNodeInfo"
          },
          "3": {
            "node_id": "c1e5609c-fbed-4dde-a319-91f0e097ec14",
            "node_type": "1",
            "metadata": {},
            "hash": "1a84b70bdd24252327f247da49762b10fa9c781e5e3909d29c897e63efdd0c17",
            "class_name": "RelatedNodeInfo"
          }
        },
        "text": "With kids it can happen several times a day.My other source of data about kids was my own childhood, and that\nwas similarly misleading. I was pretty bad, and was always in trouble\nfor something or other. So it seemed to me that parenthood was\nessentially law enforcement.  I didn't realize there were good times\ntoo.I remember my mother telling me once when I was about 30 that she'd\nreally enjoyed having me and my sister. My god, I thought, this\nwoman is a saint. She not only endured all the pain we subjected\nher to, but actually enjoyed it? Now I realize she was simply telling\nthe truth.She said that one reason she liked having us was that we'd been\ninteresting to talk to. That took me by surprise when I had kids.\nYou don't just love them. They become your friends too. They're\nreally interesting. And while I admit small children are disastrously\nfond of repetition (anything worth doing once is worth doing fifty\ntimes) it's often genuinely fun to play with them.  That surprised\nme too. Playing with a 2 year old was fun when I was 2 and definitely\nnot fun when I was 6. Why would it become fun again later? But it\ndoes.There are of course times that are pure drudgery. Or worse still,\nterror. Having kids is one of those intense types of experience\nthat are hard to imagine unless you've had them. But it is not, as I\nimplicitly believed before having kids, simply your DNA heading for\nthe lifeboats.Some of my worries about having kids were right, though. They\ndefinitely make you less productive. I know having kids makes some\npeople get their act together, but if your act was already together,\nyou're going to have less time to do it in. In particular, you're\ngoing to have to work to a schedule. Kids have schedules.  I'm not\nsure if it's because that's how kids are, or because it's the only\nway to integrate their lives with adults', but once you have kids,\nyou tend to have to work on their schedule.You will have chunks of time to work. But you can't let work spill\npromiscuously through your whole life, like I used to before I had\nkids. You're going to have to work at the same time every day,\nwhether inspiration is flowing or not, and there are going to be\ntimes when you have to stop, even if it is.I've been able to adapt to working this way. Work, like love, finds\na way. If there are only certain times it can happen, it happens\nat those times. So while I don't get as much done as before I had\nkids, I get enough done.I hate to say this, because being ambitious has always been a part\nof my identity, but having kids may make one less ambitious. It\nhurts to see that sentence written down. I squirm to avoid it. But\nif there weren't something real there, why would I squirm?  The\nfact is, once you have kids, you're probably going to care more\nabout them than you do about yourself. And attention is a zero-sum\ngame. Only one idea at a time can be the \ntop idea in your mind.\nOnce you have kids, it will often be your kids, and that means it\nwill less often be some project you're working on.I have some hacks for sailing close to this wind. For example, when\nI write essays, I think about what I'd want my kids to know. That\ndrives me to get things right. And when I was writing \nBel, I told\nmy kids that once I finished it I'd take them to Africa. When you\nsay that sort of thing to a little kid, they treat it as a promise.\nWhich meant I had to finish or I'd be taking away their trip to\nAfrica.  Maybe if I'm really lucky such tricks could put me net\nahead. But the wind is there, no question.On the other hand, what kind of wimpy ambition do you have if it\nwon't survive having kids? Do you have so little to spare?And while having kids may be warping my present judgement, it hasn't\noverwritten my memory. I remember perfectly well what life was like\nbefore. Well enough to miss some things a lot, like the\nability to take off for some other country at a moment's notice.\nThat was so great. Why did I never do that?See what I did there?",
        "start_char_idx": 3323,
        "end_char_idx": 7296,
        "text_template": "{metadata_str}\n\n{content}",
        "metadata_template": "{key}: {value}",
        "metadata_seperator": "\n",
        "class_name": "TextNode"
      },
      "__type__": "1"
    },
    "c1e5609c-fbed-4dde-a319-91f0e097ec14": {
      "__data__": {
        "id_": "c1e5609c-fbed-4dde-a319-91f0e097ec14",
        "embedding": null,
        "metadata": {
          "source": "https://paulgraham.com/kids.html",
          "title": "Having Kids",
          "language": null
        },
        "excluded_embed_metadata_keys": [],
        "excluded_llm_metadata_keys": [],
        "relationships": {
          "1": {
            "node_id": "3c5c4648-9cc0-40de-91d4-e8fd6b54b660",
            "node_type": "4",
            "metadata": {
              "source": "https://paulgraham.com/kids.html",
              "title": "Having Kids",
              "language": null
            },
            "hash": "c9d1bd67cf75685a30a023e16fe280398347d9d217055bec00d8eac4141d9d49",
            "class_name": "RelatedNodeInfo"
          },
          "2": {
            "node_id": "1957ee17-7db7-4cb8-ba63-b176f857c8c0",
            "node_type": "1",
            "metadata": {
              "source": "https://paulgraham.com/kids.html",
              "title": "Having Kids",
              "language": null
            },
            "hash": "89321bbf99dcb31537545798709d4e3343ca57da8f0032f3592891dca537fcc0",
            "class_name": "RelatedNodeInfo"
          },
          "3": {
            "node_id": "c6465e20-4d8d-4dd1-979f-ce30f9f6dd97",
            "node_type": "1",
            "metadata": {},
            "hash": "dffdbd74b353f4163f53837247c8aac50ccc5c7bb2ac17c26d39a85202052ca7",
            "class_name": "RelatedNodeInfo"
          }
        },
        "text": "When you\nsay that sort of thing to a little kid, they treat it as a promise.\nWhich meant I had to finish or I'd be taking away their trip to\nAfrica.  Maybe if I'm really lucky such tricks could put me net\nahead. But the wind is there, no question.On the other hand, what kind of wimpy ambition do you have if it\nwon't survive having kids? Do you have so little to spare?And while having kids may be warping my present judgement, it hasn't\noverwritten my memory. I remember perfectly well what life was like\nbefore. Well enough to miss some things a lot, like the\nability to take off for some other country at a moment's notice.\nThat was so great. Why did I never do that?See what I did there? The fact is, most of the freedom I had before\nkids, I never used. I paid for it in loneliness, but I never used\nit.I had plenty of happy times before I had kids. But if I count up\nhappy moments, not just potential happiness but actual happy moments,\nthere are more after kids than before. Now I practically have it\non tap, almost any bedtime.People's experiences as parents\nvary a lot, and I know I've been lucky. But I think the worries I\nhad before having kids must be pretty common, and judging by other\nparents' faces when they see their kids, so must the happiness that\nkids bring.\nNote[1] Adults are sophisticated enough to see 2 year olds for the\nfascinatingly complex characters they are, whereas to most 6 year\nolds, 2 year olds are just defective 6 year olds.Thanks to Trevor Blackwell, Jessica Livingston, and Robert Morris\nfor reading drafts of this.Arabic TranslationSlovak Translation",
        "start_char_idx": 6604,
        "end_char_idx": 8195,
        "text_template": "{metadata_str}\n\n{content}",
        "metadata_template": "{key}: {value}",
        "metadata_seperator": "\n",
        "class_name": "TextNode"
      },
      "__type__": "1"
    },
    "c6465e20-4d8d-4dd1-979f-ce30f9f6dd97": {
      "__data__": {
        "id_": "c6465e20-4d8d-4dd1-979f-ce30f9f6dd97",
        "embedding": null,
        "metadata": {
          "source": "https://paulgraham.com/lesson.html",
          "title": "The Lesson to Unlearn",
          "language": null
        },
        "excluded_embed_metadata_keys": [],
        "excluded_llm_metadata_keys": [],
        "relationships": {
          "1": {
            "node_id": "3c47c642-2780-43fd-ab6c-ce6ca6aef292",
            "node_type": "4",
            "metadata": {
              "source": "https://paulgraham.com/lesson.html",
              "title": "The Lesson to Unlearn",
              "language": null
            },
            "hash": "0792d2dffc2dd647056520b8e279751bb215e65dad44b0ccc4d8b977874f1d64",
            "class_name": "RelatedNodeInfo"
          },
          "2": {
            "node_id": "c1e5609c-fbed-4dde-a319-91f0e097ec14",
            "node_type": "1",
            "metadata": {
              "source": "https://paulgraham.com/kids.html",
              "title": "Having Kids",
              "language": null
            },
            "hash": "b49bd7f8c598b378f501ce39e88560c4858daca92f91101fbab99db6a9ff255b",
            "class_name": "RelatedNodeInfo"
          },
          "3": {
            "node_id": "f8bce584-981a-4415-b3fc-f1206668a9e5",
            "node_type": "1",
            "metadata": {},
            "hash": "170c67aeb43d3e912a670df2a2ec1265a0fc66c41e76d444a5ab6b086027a7c1",
            "class_name": "RelatedNodeInfo"
          }
        },
        "text": "The Lesson to Unlearn\n\nDecember 2019\nThe most damaging thing you learned in school wasn't something you\nlearned in any specific class. It was learning to get good grades.When I was in college, a particularly earnest philosophy grad student\nonce told me that he never cared what grade he got in a class, only\nwhat he learned in it. This stuck in my mind because it was the\nonly time I ever heard anyone say such a thing.For me, as for most students, the measurement of what I was learning\ncompletely dominated actual learning in college.  I was fairly\nearnest; I was genuinely interested in most of the classes I took,\nand I worked hard. And yet I worked by far the hardest when I was\nstudying for a test.In theory, tests are merely what their name implies: tests of what\nyou've learned in the class. In theory you shouldn't have to prepare\nfor a test in a class any more than you have to prepare for a blood\ntest. In theory you learn from taking the class, from going to the\nlectures and doing the reading and/or assignments, and the test\nthat comes afterward merely measures how well you learned.In practice, as almost everyone reading this will know, things are\nso different that hearing this explanation of how classes and tests\nare meant to work is like hearing the etymology of a word whose\nmeaning has changed completely. In practice, the phrase \"studying\nfor a test\" was almost redundant, because that was when one really\nstudied.  The difference between diligent and slack students was\nthat the former studied hard for tests and the latter didn't.  No\none was pulling all-nighters two weeks into the semester.Even though I was a diligent student, almost all the work I did in\nschool was aimed at getting a good grade on something.To many people, it would seem strange that the preceding sentence\nhas a \"though\" in it. Aren't I merely stating a tautology? Isn't\nthat what a diligent student is, a straight-A student? That's how\ndeeply the conflation of learning with grades has infused our\nculture.Is it so bad if learning is conflated with grades?  Yes, it is bad.\nAnd it wasn't till decades after college, when I was running Y\u00a0Combinator, that I realized how bad it is.I knew of course when I was a student that studying for a test is\nfar from identical with actual learning. At the very least, you\ndon't retain knowledge you cram into your head the night before an\nexam. But the problem is worse than that. The real problem is that\nmost tests don't come close to measuring what they're supposed to.If tests truly were tests of learning, things wouldn't be so bad.\nGetting good grades and learning would converge, just a little late.\nThe problem is that nearly all tests given to students are terribly\nhackable. Most people who've gotten good grades know this, and know\nit so well they've ceased even to question it.  You'll see when you\nrealize how naive it sounds to act otherwise.Suppose you're taking a class on medieval history and the final\nexam is coming up. The final exam is supposed to be a test of your\nknowledge of medieval history, right? So if you have a couple days\nbetween now and the exam, surely the best way to spend the time,\nif you want to do well on the exam, is to read the best books you\ncan find about medieval history. Then you'll know a lot about it,\nand do well on the exam.No, no, no, experienced students are saying to themselves.  If you\nmerely read good books on medieval history, most of the stuff you\nlearned wouldn't be on the test.  It's not good books you want to\nread, but the lecture notes and assigned reading in this class.\nAnd even most of that you can ignore, because you only have to worry\nabout the sort of thing that could turn up as a test question.\nYou're looking for sharply-defined chunks of information. If one\nof the assigned readings has an interesting digression on some\nsubtle point, you can safely ignore that, because it's not the sort\nof thing that could be turned into a test question.  But if the\nprofessor tells you that there were three underlying causes of the\nSchism of 1378, or three main consequences of the Black Death, you'd\nbetter know them. And whether they were in fact the causes or\nconsequences is beside the point.",
        "start_char_idx": 0,
        "end_char_idx": 4197,
        "text_template": "{metadata_str}\n\n{content}",
        "metadata_template": "{key}: {value}",
        "metadata_seperator": "\n",
        "class_name": "TextNode"
      },
      "__type__": "1"
    },
    "f8bce584-981a-4415-b3fc-f1206668a9e5": {
      "__data__": {
        "id_": "f8bce584-981a-4415-b3fc-f1206668a9e5",
        "embedding": null,
        "metadata": {
          "source": "https://paulgraham.com/lesson.html",
          "title": "The Lesson to Unlearn",
          "language": null
        },
        "excluded_embed_metadata_keys": [],
        "excluded_llm_metadata_keys": [],
        "relationships": {
          "1": {
            "node_id": "3c47c642-2780-43fd-ab6c-ce6ca6aef292",
            "node_type": "4",
            "metadata": {
              "source": "https://paulgraham.com/lesson.html",
              "title": "The Lesson to Unlearn",
              "language": null
            },
            "hash": "0792d2dffc2dd647056520b8e279751bb215e65dad44b0ccc4d8b977874f1d64",
            "class_name": "RelatedNodeInfo"
          },
          "2": {
            "node_id": "c6465e20-4d8d-4dd1-979f-ce30f9f6dd97",
            "node_type": "1",
            "metadata": {
              "source": "https://paulgraham.com/lesson.html",
              "title": "The Lesson to Unlearn",
              "language": null
            },
            "hash": "65e943f7e3ee71c7931fe24ae1aee996c1120b4a8737560c3957063a25058ea7",
            "class_name": "RelatedNodeInfo"
          },
          "3": {
            "node_id": "e337e91a-e700-47d5-864f-c9417d634e45",
            "node_type": "1",
            "metadata": {},
            "hash": "00c8cab99f0b86a5a24b0d085677e22f0688ad7f51da6edcdc35cfad7ef43a60",
            "class_name": "RelatedNodeInfo"
          }
        },
        "text": "If you\nmerely read good books on medieval history, most of the stuff you\nlearned wouldn't be on the test.  It's not good books you want to\nread, but the lecture notes and assigned reading in this class.\nAnd even most of that you can ignore, because you only have to worry\nabout the sort of thing that could turn up as a test question.\nYou're looking for sharply-defined chunks of information. If one\nof the assigned readings has an interesting digression on some\nsubtle point, you can safely ignore that, because it's not the sort\nof thing that could be turned into a test question.  But if the\nprofessor tells you that there were three underlying causes of the\nSchism of 1378, or three main consequences of the Black Death, you'd\nbetter know them. And whether they were in fact the causes or\nconsequences is beside the point.  For the purposes of this class\nthey are.At a university there are often copies of old exams floating around,\nand these narrow still further what you have to learn. As well as\nlearning what kind of questions this professor asks, you'll often\nget actual exam questions. Many professors re-use them.  After\nteaching a class for 10 years, it would be hard not to, at least\ninadvertently.In some classes, your professor will have had some sort of political\naxe to grind, and if so you'll have to grind it too. The need for\nthis varies. In classes in math or the hard sciences or engineering\nit's rarely necessary, but at the other end of the spectrum there\nare classes where you couldn't get a good grade without it.Getting a good grade in a class on x is so different from learning\na lot about x that you have to choose one or the other, and you\ncan't blame students if they choose grades.  Everyone judges them\nby their grades \u0097 graduate programs, employers, scholarships, even\ntheir own parents.I liked learning, and I really enjoyed some of the papers and\nprograms I wrote in college. But did I ever, after turning in a\npaper in some class, sit down and write another just for fun? Of\ncourse not. I had things due in other classes. If it ever came to\na choice of learning or grades, I chose grades. I hadn't come to\ncollege to do badly.Anyone who cares about getting good grades has to play this game,\nor they'll be surpassed by those who do. And at elite universities,\nthat means nearly everyone, since someone who didn't care about\ngetting good grades probably wouldn't be there in the first place.\nThe result is that students compete to maximize the difference\nbetween learning and getting good grades.Why are tests so bad? More precisely, why are they so hackable?\nAny experienced programmer could answer that. How hackable is\nsoftware whose author hasn't paid any attention to preventing it\nfrom being hacked? Usually it's as porous as a colander.Hackable is the default for any test imposed by an authority. The\nreason the tests you're given are so consistently bad \u0097 so consistently\nfar from measuring what they're supposed to measure \u0097 is simply\nthat the people creating them haven't made much effort to prevent\nthem from being hacked.But you can't blame teachers if their tests are hackable. Their job\nis to teach, not to create unhackable tests. The real problem is\ngrades, or more precisely, that grades have been overloaded. If\ngrades were merely a way for teachers to tell students what they\nwere doing right and wrong, like a coach giving advice to an athlete,\nstudents wouldn't be tempted to hack tests. But unfortunately after\na certain age grades become more than advice. After a certain age,\nwhenever you're being taught, you're usually also being judged.I've used college tests as an example, but those are actually the\nleast hackable. All the tests most students take their whole lives\nare at least as bad, including, most spectacularly of all, the test\nthat gets them into college. If getting into college were merely a\nmatter of having the quality of one's mind measured by admissions\nofficers the way scientists measure the mass of an object, we could\ntell teenage kids \"learn a lot\" and leave it at that.  You can tell\nhow bad college admissions are, as a test, from how unlike high\nschool that sounds. In practice, the freakishly specific nature of\nthe stuff ambitious kids have to do in high school is directly\nproportionate to the hackability of college admissions.",
        "start_char_idx": 3371,
        "end_char_idx": 7690,
        "text_template": "{metadata_str}\n\n{content}",
        "metadata_template": "{key}: {value}",
        "metadata_seperator": "\n",
        "class_name": "TextNode"
      },
      "__type__": "1"
    },
    "e337e91a-e700-47d5-864f-c9417d634e45": {
      "__data__": {
        "id_": "e337e91a-e700-47d5-864f-c9417d634e45",
        "embedding": null,
        "metadata": {
          "source": "https://paulgraham.com/lesson.html",
          "title": "The Lesson to Unlearn",
          "language": null
        },
        "excluded_embed_metadata_keys": [],
        "excluded_llm_metadata_keys": [],
        "relationships": {
          "1": {
            "node_id": "3c47c642-2780-43fd-ab6c-ce6ca6aef292",
            "node_type": "4",
            "metadata": {
              "source": "https://paulgraham.com/lesson.html",
              "title": "The Lesson to Unlearn",
              "language": null
            },
            "hash": "0792d2dffc2dd647056520b8e279751bb215e65dad44b0ccc4d8b977874f1d64",
            "class_name": "RelatedNodeInfo"
          },
          "2": {
            "node_id": "f8bce584-981a-4415-b3fc-f1206668a9e5",
            "node_type": "1",
            "metadata": {
              "source": "https://paulgraham.com/lesson.html",
              "title": "The Lesson to Unlearn",
              "language": null
            },
            "hash": "e198edbd33d4cfb397d0cb08341082bc094354387f73516922087ffb5a5078de",
            "class_name": "RelatedNodeInfo"
          },
          "3": {
            "node_id": "ce32c131-6109-45d2-99e6-392ba5126684",
            "node_type": "1",
            "metadata": {},
            "hash": "1b2b6a66170f152123c803573af9b4fa29d3566ecf202002c84d78a1e404d27c",
            "class_name": "RelatedNodeInfo"
          }
        },
        "text": "But unfortunately after\na certain age grades become more than advice. After a certain age,\nwhenever you're being taught, you're usually also being judged.I've used college tests as an example, but those are actually the\nleast hackable. All the tests most students take their whole lives\nare at least as bad, including, most spectacularly of all, the test\nthat gets them into college. If getting into college were merely a\nmatter of having the quality of one's mind measured by admissions\nofficers the way scientists measure the mass of an object, we could\ntell teenage kids \"learn a lot\" and leave it at that.  You can tell\nhow bad college admissions are, as a test, from how unlike high\nschool that sounds. In practice, the freakishly specific nature of\nthe stuff ambitious kids have to do in high school is directly\nproportionate to the hackability of college admissions.  The classes\nyou don't care about that are mostly memorization, the random\n\"extracurricular activities\" you have to participate in to show\nyou're \"well-rounded,\" the standardized tests as artificial as\nchess, the \"essay\" you have to write that's presumably meant to hit\nsome very specific target, but you're not told what.As well as being bad in what it does to kids, this test is also bad\nin the sense of being very hackable. So hackable that whole industries\nhave grown up to hack it. This is the explicit purpose of test-prep\ncompanies and admissions counsellors, but it's also a significant\npart of the function of private schools.Why is this particular test so hackable? I think because of what\nit's measuring. Although the popular story is that the way to get\ninto a good college is to be really smart, admissions officers at\nelite colleges neither are, nor claim to be, looking only for that.\nWhat are they looking for?  They're looking for people who are not\nsimply smart, but admirable in some more general sense.  And how\nis this more general admirableness measured?  The admissions officers\nfeel it. In other words, they accept who they like.So what college admissions is a test of is whether you suit the\ntaste of some group of people. Well, of course a test like that is\ngoing to be hackable. And because it's both very hackable and there's\n(thought to be) a lot at stake, it's hacked like nothing else.\nThat's why it distorts your life so much for so long.It's no wonder high school students often feel alienated. The shape\nof their lives is completely artificial.But wasting your time is not the worst thing the educational system\ndoes to you. The worst thing it does is to train you that the way\nto win is by hacking bad tests.  This is a much subtler problem\nthat I didn't recognize until I saw it happening to other people.When I started advising startup founders at Y Combinator, especially\nyoung ones, I was puzzled by the way they always seemed to make\nthings overcomplicated. How, they would ask, do you raise money?\nWhat's the trick for making venture capitalists want to invest in\nyou? The best way to make VCs want to invest in you, I would explain,\nis to actually be a good investment. Even if you could trick VCs\ninto investing in a bad startup, you'd be tricking yourselves too.\nYou're investing time in the same company you're asking them to\ninvest money in. If it's not a good investment, why are you even\ndoing it?Oh, they'd say, and then after a pause to digest this revelation,\nthey'd ask: What makes a startup a good investment?So I would explain that what makes a startup promising, not just\nin the eyes of investors but in fact, is \ngrowth.  \nIdeally in revenue,\nbut failing that in usage. What they needed to do was get lots of\nusers.How does one get lots of users? They had all kinds of ideas about\nthat. They needed to do a big launch that would get them \"exposure.\"\nThey needed influential people to talk about them. They even knew\nthey needed to launch on a tuesday, because that's when one gets\nthe most attention.No, I would explain, that is not how to get lots of users. The way\nyou get lots of users is to make the product really great.",
        "start_char_idx": 6817,
        "end_char_idx": 10872,
        "text_template": "{metadata_str}\n\n{content}",
        "metadata_template": "{key}: {value}",
        "metadata_seperator": "\n",
        "class_name": "TextNode"
      },
      "__type__": "1"
    },
    "ce32c131-6109-45d2-99e6-392ba5126684": {
      "__data__": {
        "id_": "ce32c131-6109-45d2-99e6-392ba5126684",
        "embedding": null,
        "metadata": {
          "source": "https://paulgraham.com/lesson.html",
          "title": "The Lesson to Unlearn",
          "language": null
        },
        "excluded_embed_metadata_keys": [],
        "excluded_llm_metadata_keys": [],
        "relationships": {
          "1": {
            "node_id": "3c47c642-2780-43fd-ab6c-ce6ca6aef292",
            "node_type": "4",
            "metadata": {
              "source": "https://paulgraham.com/lesson.html",
              "title": "The Lesson to Unlearn",
              "language": null
            },
            "hash": "0792d2dffc2dd647056520b8e279751bb215e65dad44b0ccc4d8b977874f1d64",
            "class_name": "RelatedNodeInfo"
          },
          "2": {
            "node_id": "e337e91a-e700-47d5-864f-c9417d634e45",
            "node_type": "1",
            "metadata": {
              "source": "https://paulgraham.com/lesson.html",
              "title": "The Lesson to Unlearn",
              "language": null
            },
            "hash": "3aeab8ef6dc8cac8179207b4d7177101368bb3953be9949e42ec11cc4e75bfc2",
            "class_name": "RelatedNodeInfo"
          },
          "3": {
            "node_id": "df33e539-ac02-45e3-a607-e52a8c8a0553",
            "node_type": "1",
            "metadata": {},
            "hash": "fd9ec82ed5aaf747b45e0c100e62d7ea065e37ed9b602c62f654ab9dc74ebdfc",
            "class_name": "RelatedNodeInfo"
          }
        },
        "text": "If it's not a good investment, why are you even\ndoing it?Oh, they'd say, and then after a pause to digest this revelation,\nthey'd ask: What makes a startup a good investment?So I would explain that what makes a startup promising, not just\nin the eyes of investors but in fact, is \ngrowth.  \nIdeally in revenue,\nbut failing that in usage. What they needed to do was get lots of\nusers.How does one get lots of users? They had all kinds of ideas about\nthat. They needed to do a big launch that would get them \"exposure.\"\nThey needed influential people to talk about them. They even knew\nthey needed to launch on a tuesday, because that's when one gets\nthe most attention.No, I would explain, that is not how to get lots of users. The way\nyou get lots of users is to make the product really great. Then\npeople will not only use it but recommend it to their friends, so\nyour growth will be exponential once you \nget it started.At this point I've told the founders something you'd think would\nbe completely obvious: that they should make a good company by\nmaking a good product. And yet their reaction would be something\nlike the reaction many physicists must have had when they first\nheard about the theory of relativity: a mixture of astonishment at\nits apparent genius, combined with a suspicion that anything so\nweird couldn't possibly be right. Ok, they would say, dutifully.\nAnd could you introduce us to such-and-such influential person? And\nremember, we want to launch on Tuesday.It would sometimes take founders years to grasp these simple lessons.\nAnd not because they were lazy or stupid. They just seemed blind\nto what was right in front of them.Why, I would ask myself, do they always make things so complicated?\nAnd then one day I realized this was not a rhetorical question.Why did founders tie themselves in knots doing the wrong things\nwhen the answer was right in front of them? Because that was what\nthey'd been trained to do. Their education had taught them that the\nway to win was to hack the test. And without even telling them they\nwere being trained to do this. The younger ones, the recent graduates,\nhad never faced a non-artificial test. They thought this was just\nhow the world worked: that the first thing you did, when facing any\nkind of challenge, was to figure out what the trick was for hacking\nthe test. That's why the conversation would always start with how\nto raise money, because that read as the test. It came at the end\nof YC. It had numbers attached to it, and higher numbers seemed to\nbe better. It must be the test.There are certainly big chunks of the world where the way to win\nis to hack the test. This phenomenon isn't limited to schools.  And\nsome people, either due to ideology or ignorance, claim that this\nis true of startups too. But it isn't. In fact, one of the most\nstriking things about startups is the degree to which you win by\nsimply doing good work. There are edge cases, as there are in\nanything, but in general you win by getting users, and what users\ncare about is whether the product does what they want.Why did it take me so long to understand why founders made startups\novercomplicated? Because I hadn't realized explicitly that schools\ntrain us to win by hacking bad tests. And not just them, but me!\nI'd been trained to hack bad tests too, and hadn't realized it till\ndecades later.I had lived as if I realized it, but without knowing why. For\nexample, I had avoided working for big companies. But if you'd asked\nwhy, I'd have said it was because they were bogus, or bureaucratic.\nOr just yuck. I never understood how much of my dislike of big\ncompanies was due to the fact that you win by hacking bad tests.Similarly, the fact that the tests were unhackable was a lot of\nwhat attracted me to startups. But again, I hadn't realized that\nexplicitly.I had in effect achieved by successive approximations something\nthat may have a closed-form solution.  I had gradually undone my\ntraining in hacking bad tests without knowing I was doing it.  Could\nsomeone coming out of school banish this demon just by knowing its\nname, and saying begone?",
        "start_char_idx": 10079,
        "end_char_idx": 14178,
        "text_template": "{metadata_str}\n\n{content}",
        "metadata_template": "{key}: {value}",
        "metadata_seperator": "\n",
        "class_name": "TextNode"
      },
      "__type__": "1"
    },
    "df33e539-ac02-45e3-a607-e52a8c8a0553": {
      "__data__": {
        "id_": "df33e539-ac02-45e3-a607-e52a8c8a0553",
        "embedding": null,
        "metadata": {
          "source": "https://paulgraham.com/lesson.html",
          "title": "The Lesson to Unlearn",
          "language": null
        },
        "excluded_embed_metadata_keys": [],
        "excluded_llm_metadata_keys": [],
        "relationships": {
          "1": {
            "node_id": "3c47c642-2780-43fd-ab6c-ce6ca6aef292",
            "node_type": "4",
            "metadata": {
              "source": "https://paulgraham.com/lesson.html",
              "title": "The Lesson to Unlearn",
              "language": null
            },
            "hash": "0792d2dffc2dd647056520b8e279751bb215e65dad44b0ccc4d8b977874f1d64",
            "class_name": "RelatedNodeInfo"
          },
          "2": {
            "node_id": "ce32c131-6109-45d2-99e6-392ba5126684",
            "node_type": "1",
            "metadata": {
              "source": "https://paulgraham.com/lesson.html",
              "title": "The Lesson to Unlearn",
              "language": null
            },
            "hash": "8e5095f93c6fc4187aecd60f04657c7655e8059dff26436079750990e3e12253",
            "class_name": "RelatedNodeInfo"
          },
          "3": {
            "node_id": "8b8d1d77-71d7-4f55-bf95-88009710e9f3",
            "node_type": "1",
            "metadata": {},
            "hash": "da06f355fc07bb1e64dab0ac7fc21e98d2be2d44ffcb27c6d3d2618b53cb9dd2",
            "class_name": "RelatedNodeInfo"
          }
        },
        "text": "I'd been trained to hack bad tests too, and hadn't realized it till\ndecades later.I had lived as if I realized it, but without knowing why. For\nexample, I had avoided working for big companies. But if you'd asked\nwhy, I'd have said it was because they were bogus, or bureaucratic.\nOr just yuck. I never understood how much of my dislike of big\ncompanies was due to the fact that you win by hacking bad tests.Similarly, the fact that the tests were unhackable was a lot of\nwhat attracted me to startups. But again, I hadn't realized that\nexplicitly.I had in effect achieved by successive approximations something\nthat may have a closed-form solution.  I had gradually undone my\ntraining in hacking bad tests without knowing I was doing it.  Could\nsomeone coming out of school banish this demon just by knowing its\nname, and saying begone? It seems worth trying.Merely talking explicitly about this phenomenon is likely to make\nthings better, because much of its power comes from the fact that\nwe take it for granted. After you've noticed it, it seems the\nelephant in the room, but it's a pretty well camouflaged elephant.\nThe phenomenon is so old, and so pervasive. And it's simply the\nresult of neglect. No one meant things to be this way. This is just\nwhat happens when you combine learning with grades, competition,\nand the naive assumption of unhackability.It was mind-blowing to realize that two of the things I'd puzzled\nabout the most \u0097 the bogusness of high school, and the difficulty\nof getting founders to see the obvious \u0097 both had the same cause.\nIt's rare for such a big block to slide into place so late.Usually when that happens it has implications in a lot of different\nareas, and this case seems no exception. For example, it suggests\nboth that education could be done better, and how you might fix it.\nBut it also suggests a potential answer to the question all big\ncompanies seem to have: how can we be more like a startup? I'm not\ngoing to chase down all the implications now. What I want to focus\non here is what it means for individuals.To start with, it means that most ambitious kids graduating from\ncollege have something they may want to unlearn.  But it also changes\nhow you look at the world. Instead of looking at all the different\nkinds of work people do and thinking of them vaguely as more or\nless appealing, you can now ask a very specific question that will\nsort them in an interesting way: to what extent do you win at this\nkind of work by hacking bad tests?It would help if there was a way to recognize bad tests quickly.\nIs there a pattern here? It turns out there is.Tests can be divided into two kinds: those that are imposed by\nauthorities, and those that aren't.  Tests that aren't imposed by\nauthorities are inherently unhackable, in the sense that no one is\nclaiming they're tests of anything more than they actually test. A\nfootball match, for example, is simply a test of who wins, not which\nteam is better. You can tell that from the fact that commentators\nsometimes say afterward that the better team won. Whereas tests\nimposed by authorities are usually proxies for something else. A\ntest in a class is supposed to measure not just how well you did\non that particular test, but how much you learned in the class.\nWhile tests that aren't imposed by authorities are inherently\nunhackable, those imposed by authorities have to be made unhackable.\nUsually they aren't.  So as a first approximation, bad tests are\nroughly equivalent to tests imposed by authorities.You might actually like to win by hacking bad tests. Presumably\nsome people do. But I bet most people who find themselves doing\nthis kind of work don't like it. They just take it for granted that\nthis is how the world works, unless you want to drop out and be\nsome kind of hippie artisan.I suspect many people implicitly assume that working in a\nfield with bad tests is the price of making lots of money. But that,\nI can tell you, is false. It used to be true. In the mid-twentieth\ncentury, when the economy was \ncomposed of oligopolies, \nthe only way\nto the top was by playing their game. But it's not true now.",
        "start_char_idx": 13341,
        "end_char_idx": 17460,
        "text_template": "{metadata_str}\n\n{content}",
        "metadata_template": "{key}: {value}",
        "metadata_seperator": "\n",
        "class_name": "TextNode"
      },
      "__type__": "1"
    },
    "8b8d1d77-71d7-4f55-bf95-88009710e9f3": {
      "__data__": {
        "id_": "8b8d1d77-71d7-4f55-bf95-88009710e9f3",
        "embedding": null,
        "metadata": {
          "source": "https://paulgraham.com/lesson.html",
          "title": "The Lesson to Unlearn",
          "language": null
        },
        "excluded_embed_metadata_keys": [],
        "excluded_llm_metadata_keys": [],
        "relationships": {
          "1": {
            "node_id": "3c47c642-2780-43fd-ab6c-ce6ca6aef292",
            "node_type": "4",
            "metadata": {
              "source": "https://paulgraham.com/lesson.html",
              "title": "The Lesson to Unlearn",
              "language": null
            },
            "hash": "0792d2dffc2dd647056520b8e279751bb215e65dad44b0ccc4d8b977874f1d64",
            "class_name": "RelatedNodeInfo"
          },
          "2": {
            "node_id": "df33e539-ac02-45e3-a607-e52a8c8a0553",
            "node_type": "1",
            "metadata": {
              "source": "https://paulgraham.com/lesson.html",
              "title": "The Lesson to Unlearn",
              "language": null
            },
            "hash": "4abfb5ea8426bb94465db4dba119a7a9bac0ad7a658997de6f9404afe64d4a75",
            "class_name": "RelatedNodeInfo"
          },
          "3": {
            "node_id": "bfbdc446-ebe8-4777-a695-ccbcbfa522d9",
            "node_type": "1",
            "metadata": {},
            "hash": "a06d2716af979102209fc13bfcfcf2b934f08cc8e9ddf182b37bf2385df2d422",
            "class_name": "RelatedNodeInfo"
          }
        },
        "text": "Usually they aren't.  So as a first approximation, bad tests are\nroughly equivalent to tests imposed by authorities.You might actually like to win by hacking bad tests. Presumably\nsome people do. But I bet most people who find themselves doing\nthis kind of work don't like it. They just take it for granted that\nthis is how the world works, unless you want to drop out and be\nsome kind of hippie artisan.I suspect many people implicitly assume that working in a\nfield with bad tests is the price of making lots of money. But that,\nI can tell you, is false. It used to be true. In the mid-twentieth\ncentury, when the economy was \ncomposed of oligopolies, \nthe only way\nto the top was by playing their game. But it's not true now.  There\nare now ways to get rich by doing good work, and that's part of the\nreason people are so much more excited about getting rich than they\nused to be. When I was a kid, you could either become an engineer\nand make cool things, or make lots of money by becoming an \"executive.\"\nNow you can make lots of money by making cool things.Hacking bad tests is becoming less important as the link between\nwork and authority erodes. The erosion of that link is one of the\nmost important trends happening now, and we see its effects in\nalmost every kind of work people do. Startups are one of the most\nvisible examples, but we see much the same thing in writing. Writers\nno longer have to submit to publishers and editors to reach readers;\nnow they can go direct.The more I think about this question, the more optimistic I get.\nThis seems one of those situations where we don't realize how much\nsomething was holding us back until it's eliminated. And I can\nforesee the whole bogus edifice crumbling. Imagine what happens as\nmore and more people start to ask themselves if they want to win\nby hacking bad tests, and decide that they don't.  The kinds of\nwork where you win by hacking bad tests will be starved of talent,\nand the kinds where you win by doing good work will see an influx\nof the most ambitious people. And as hacking bad tests shrinks in\nimportance, education will evolve to stop training us to do it.\nImagine what the world could look like if that happened.This is not just a lesson for individuals to unlearn, but one for\nsociety to unlearn, and we'll be amazed at the energy that's liberated\nwhen we do.\nNotes[1] If using tests only to measure learning sounds impossibly\nutopian, that is already the way things work at Lambda School.\nLambda School doesn't have grades. You either graduate or you don't.\nThe only purpose of tests is to decide at each stage of the curriculum\nwhether you can continue to the next. So in effect the whole school\nis pass/fail.[2] If the final exam consisted of a long conversation with the\nprofessor, you could prepare for it by reading good books on medieval\nhistory. A lot of the hackability of tests in schools is due to the\nfact that the same test has to be given to large numbers of students.[3] Learning is the naive algorithm for getting good grades.[4] Hacking has \nmultiple senses. There's a narrow sense in which\nit means to compromise something. That's the sense in which one\nhacks a bad test. But there's another, more general sense, meaning\nto find a surprising solution to a problem, often by thinking\ndifferently about it. Hacking in this sense is a wonderful thing.\nAnd indeed, some of the hacks people use on bad tests are impressively\ningenious; the problem is not so much the hacking as that, because\nthe tests are hackable, they don't test what they're meant to.[5] The people who pick startups at Y Combinator are similar to\nadmissions officers, except that instead of being arbitrary, their\nacceptance criteria are trained by a very tight feedback loop. If\nyou accept a bad startup or reject a good one, you will usually know it\nwithin a year or two at the latest, and often within a month.[6] I'm sure admissions officers are tired of reading applications\nfrom kids who seem to have no personality beyond being willing to\nseem however they're supposed to seem to get accepted.  What they\ndon't realize is that they are, in a sense, looking in a mirror.\nThe lack of authenticity in the applicants is a reflection of the\narbitrariness of the application process.",
        "start_char_idx": 16732,
        "end_char_idx": 20983,
        "text_template": "{metadata_str}\n\n{content}",
        "metadata_template": "{key}: {value}",
        "metadata_seperator": "\n",
        "class_name": "TextNode"
      },
      "__type__": "1"
    },
    "bfbdc446-ebe8-4777-a695-ccbcbfa522d9": {
      "__data__": {
        "id_": "bfbdc446-ebe8-4777-a695-ccbcbfa522d9",
        "embedding": null,
        "metadata": {
          "source": "https://paulgraham.com/lesson.html",
          "title": "The Lesson to Unlearn",
          "language": null
        },
        "excluded_embed_metadata_keys": [],
        "excluded_llm_metadata_keys": [],
        "relationships": {
          "1": {
            "node_id": "3c47c642-2780-43fd-ab6c-ce6ca6aef292",
            "node_type": "4",
            "metadata": {
              "source": "https://paulgraham.com/lesson.html",
              "title": "The Lesson to Unlearn",
              "language": null
            },
            "hash": "0792d2dffc2dd647056520b8e279751bb215e65dad44b0ccc4d8b977874f1d64",
            "class_name": "RelatedNodeInfo"
          },
          "2": {
            "node_id": "8b8d1d77-71d7-4f55-bf95-88009710e9f3",
            "node_type": "1",
            "metadata": {
              "source": "https://paulgraham.com/lesson.html",
              "title": "The Lesson to Unlearn",
              "language": null
            },
            "hash": "0a7108fecdd17ec6d51a947483985d3db28eeedfd0b1beb84b33e53e8c4a01d1",
            "class_name": "RelatedNodeInfo"
          },
          "3": {
            "node_id": "93e92bf5-1811-4469-83df-7ca1ab0ded89",
            "node_type": "1",
            "metadata": {},
            "hash": "71500510c602a8cb5f61d42f61cc7dc4a2d029e4aee93f956ec0cb4984513b66",
            "class_name": "RelatedNodeInfo"
          }
        },
        "text": "[5] The people who pick startups at Y Combinator are similar to\nadmissions officers, except that instead of being arbitrary, their\nacceptance criteria are trained by a very tight feedback loop. If\nyou accept a bad startup or reject a good one, you will usually know it\nwithin a year or two at the latest, and often within a month.[6] I'm sure admissions officers are tired of reading applications\nfrom kids who seem to have no personality beyond being willing to\nseem however they're supposed to seem to get accepted.  What they\ndon't realize is that they are, in a sense, looking in a mirror.\nThe lack of authenticity in the applicants is a reflection of the\narbitrariness of the application process. A dictator might just as\nwell complain about the lack of authenticity in the people around\nhim.[7] By good work, I don't mean morally good, but good in the sense\nin which a good craftsman does good work.[8] There are borderline cases where it's hard to say which category\na test falls in. For example, is raising venture capital like college\nadmissions, or is it like selling to a customer?[9] Note that a good test is merely one that's unhackable. Good\nhere doesn't mean morally good, but good in the sense of working\nwell. The difference between fields with bad tests and good ones\nis not that the former are bad and the latter are good, but that\nthe former are bogus and the latter aren't. But those two measures\nare not unrelated.  As Tara Ploughman said, the path from good to\nevil goes through bogus.[10] People who think the recent increase in \neconomic inequality is\ndue to changes in tax policy seem very naive to anyone with experience\nin startups. Different people are getting rich now than used to,\nand they're getting much richer than mere tax savings could make\nthem.[11] Note to tiger parents: you may think you're training your kids\nto win, but if you're training them to win by hacking bad tests,\nyou are, as parents so often do, training them to fight the last\nwar.Thanks to Austen Allred, Trevor Blackwell, Patrick Collison,\nJessica Livingston, Robert Morris, and Harj Taggar for reading\ndrafts of this.Russian TranslationArabic TranslationSwedish Translation",
        "start_char_idx": 20282,
        "end_char_idx": 22462,
        "text_template": "{metadata_str}\n\n{content}",
        "metadata_template": "{key}: {value}",
        "metadata_seperator": "\n",
        "class_name": "TextNode"
      },
      "__type__": "1"
    },
    "93e92bf5-1811-4469-83df-7ca1ab0ded89": {
      "__data__": {
        "id_": "93e92bf5-1811-4469-83df-7ca1ab0ded89",
        "embedding": null,
        "metadata": {
          "source": "https://paulgraham.com/lies.html",
          "title": "Lies We Tell Kids",
          "language": null
        },
        "excluded_embed_metadata_keys": [],
        "excluded_llm_metadata_keys": [],
        "relationships": {
          "1": {
            "node_id": "8d963132-457e-4acf-8848-e17995edf9d0",
            "node_type": "4",
            "metadata": {
              "source": "https://paulgraham.com/lies.html",
              "title": "Lies We Tell Kids",
              "language": null
            },
            "hash": "d801ce200eb98b3f60e162f5014aa3b480a328f7e2f69c1936d6a2e55ecab5ec",
            "class_name": "RelatedNodeInfo"
          },
          "2": {
            "node_id": "bfbdc446-ebe8-4777-a695-ccbcbfa522d9",
            "node_type": "1",
            "metadata": {
              "source": "https://paulgraham.com/lesson.html",
              "title": "The Lesson to Unlearn",
              "language": null
            },
            "hash": "ce3b010974c2de42b1e1830a7419a29329e5e7ac9972de1c2d44c75a64db835d",
            "class_name": "RelatedNodeInfo"
          },
          "3": {
            "node_id": "a1a800d7-018f-40ab-8395-190ec5a0d2bc",
            "node_type": "1",
            "metadata": {},
            "hash": "7741d285542d6992225307b7d7f3001f9d7879ca6b9c7d610c2d4ddc33066374",
            "class_name": "RelatedNodeInfo"
          }
        },
        "text": "Lies We Tell Kids\n\nMay 2008Adults lie constantly to kids.  I'm not saying we should stop, but\nI think we should at least examine which lies we tell and why.There may also be a benefit to us.  We were all lied to as kids,\nand some of the lies we were told still affect us.  So by studying\nthe ways adults lie to kids, we may be able to clear our heads of\nlies we were told.I'm using the word \"lie\" in a very general sense: not just overt\nfalsehoods, but also all the more subtle ways we mislead kids.\nThough \"lie\" has negative connotations, I don't mean to suggest we\nshould never do this\u2014just that we should pay attention when\nwe do.\n[1]One of the most remarkable things about the way we lie to kids is\nhow broad the conspiracy is.  All adults know what their culture \nlies to kids about: they're the questions you answer \"Ask\nyour parents.\"  If a kid asked who won the World Series in 1982\nor what the atomic weight of carbon was, you could just tell him.\nBut if a kid asks you \"Is there a God?\" or \"What's a prostitute?\"\nyou'll probably say \"Ask your parents.\"Since we all agree, kids see few cracks in the view of the world\npresented to them.  The biggest disagreements are between parents\nand schools, but even those are small. Schools are careful what\nthey say about controversial topics, and if they do contradict what\nparents want their kids to believe, parents either pressure the\nschool into keeping \nquiet or move their kids to a new school.The conspiracy is so thorough that most kids who discover it do so\nonly by discovering internal contradictions in what they're told.\nIt can be traumatic for the ones who wake up during the operation.\nHere's what happened to Einstein:\n\n  Through the reading of popular scientific books I soon reached\n  the conviction that much in the stories of the Bible could not\n  be true.  The consequence was a positively fanatic freethinking\n  coupled with the impression that youth is intentionally being\n  deceived by the state through lies: it was a crushing impression.\n  [2]\n\nI remember that feeling.  By 15 I was convinced the world was corrupt\nfrom end to end.  That's why movies like The Matrix have such\nresonance.  Every kid grows up in a fake world.  In a way it would\nbe easier if the forces behind it were as clearly differentiated\nas a bunch of evil machines, and one could make a clean break just by\ntaking a pill.\nProtectionIf you ask adults why they lie to kids, the most common reason they\ngive is to protect them.  And kids do need protecting.  The environment\nyou want to create for a newborn child will be quite unlike the\nstreets of a big city.That seems so obvious it seems wrong to call it a lie.  It's certainly\nnot a bad lie to tell, to give a baby the impression the world is\nquiet and warm and safe.  But this harmless type of lie can turn\nsour if left unexamined.Imagine if you tried to keep someone in as protected an environment\nas a newborn till age 18.  To mislead someone so grossly about the\nworld would seem not protection but abuse.  That's an extreme\nexample, of course; when parents do that sort of thing it becomes\nnational news.  But you see the same problem on a smaller scale in\nthe malaise teenagers feel in suburbia.The main purpose of suburbia is to provide a protected environment\nfor children to grow up in.  And it seems great for 10 year olds.\nI liked living in suburbia when I was 10.  I didn't notice how\nsterile it was.  My whole world was no bigger than a few friends'\nhouses I bicycled to and some woods I ran around in.  On a log scale\nI was midway between crib and globe.  A suburban street was just\nthe right size.  But as I grew older, suburbia started to feel\nsuffocatingly fake.Life can be pretty good at 10 or 20, but it's often frustrating at\n15.  This is too big a problem to solve here, but certainly one\nreason life sucks at 15 is that kids are trapped in a world designed\nfor 10 year olds.What do parents hope to protect their children from by raising them\nin suburbia?  A friend who moved out of Manhattan said merely that\nher 3 year old daughter \"saw too much.\"",
        "start_char_idx": 0,
        "end_char_idx": 4070,
        "text_template": "{metadata_str}\n\n{content}",
        "metadata_template": "{key}: {value}",
        "metadata_seperator": "\n",
        "class_name": "TextNode"
      },
      "__type__": "1"
    },
    "a1a800d7-018f-40ab-8395-190ec5a0d2bc": {
      "__data__": {
        "id_": "a1a800d7-018f-40ab-8395-190ec5a0d2bc",
        "embedding": null,
        "metadata": {
          "source": "https://paulgraham.com/lies.html",
          "title": "Lies We Tell Kids",
          "language": null
        },
        "excluded_embed_metadata_keys": [],
        "excluded_llm_metadata_keys": [],
        "relationships": {
          "1": {
            "node_id": "8d963132-457e-4acf-8848-e17995edf9d0",
            "node_type": "4",
            "metadata": {
              "source": "https://paulgraham.com/lies.html",
              "title": "Lies We Tell Kids",
              "language": null
            },
            "hash": "d801ce200eb98b3f60e162f5014aa3b480a328f7e2f69c1936d6a2e55ecab5ec",
            "class_name": "RelatedNodeInfo"
          },
          "2": {
            "node_id": "93e92bf5-1811-4469-83df-7ca1ab0ded89",
            "node_type": "1",
            "metadata": {
              "source": "https://paulgraham.com/lies.html",
              "title": "Lies We Tell Kids",
              "language": null
            },
            "hash": "067e776ecbf790238841c847af9216f03a092d7a0f806f9e99038402c96a4e0a",
            "class_name": "RelatedNodeInfo"
          },
          "3": {
            "node_id": "c3d32185-6823-4b80-a3e1-b8af8c856256",
            "node_type": "1",
            "metadata": {},
            "hash": "a910df079eb23bd7f33176966430e791e41053cb5930d2177a620551642a4281",
            "class_name": "RelatedNodeInfo"
          }
        },
        "text": "I liked living in suburbia when I was 10.  I didn't notice how\nsterile it was.  My whole world was no bigger than a few friends'\nhouses I bicycled to and some woods I ran around in.  On a log scale\nI was midway between crib and globe.  A suburban street was just\nthe right size.  But as I grew older, suburbia started to feel\nsuffocatingly fake.Life can be pretty good at 10 or 20, but it's often frustrating at\n15.  This is too big a problem to solve here, but certainly one\nreason life sucks at 15 is that kids are trapped in a world designed\nfor 10 year olds.What do parents hope to protect their children from by raising them\nin suburbia?  A friend who moved out of Manhattan said merely that\nher 3 year old daughter \"saw too much.\"  Off the top of my head,\nthat might include: people who are high or drunk, poverty, madness,\ngruesome medical conditions, sexual behavior of various degrees of\noddness, and violent anger.I think it's the anger that would worry me most if I had a 3 year\nold.  I was 29 when I moved to New York and I was surprised even\nthen.  I wouldn't want a 3 year old to see some of the disputes I\nsaw.  It would be too frightening.  A lot of the things adults\nconceal from smaller children, they conceal because they'd be\nfrightening, not because they want to conceal the existence of such\nthings.  Misleading the child is just a byproduct.This seems one of the most justifiable types of lying adults do to\nkids.  But because the lies are indirect we don't keep a very strict\naccounting of them.  Parents know they've concealed the facts about\nsex, and many at some point sit their kids down and explain more.\nBut few tell their kids about the differences between the real world\nand the cocoon they grew up in.  Combine this with the confidence\nparents try to instill in their kids, and every year you get a new\ncrop of 18 year olds who think they know how to run the world.Don't all 18 year olds think they know how to run the world?  Actually\nthis seems to be a recent innovation, no more than about 100 years old.\nIn preindustrial times teenage kids were junior members of the adult\nworld and comparatively well aware of their shortcomings.  They\ncould see they weren't as strong or skillful as the village smith.\nIn past times people lied to kids about some things more than we\ndo now, but the lies implicit in an artificial, protected environment\nare a recent invention.  Like a lot of new inventions, the rich got\nthis first.  Children of kings and great magnates were the first\nto grow up out of touch with the world.  Suburbia means half the\npopulation can live like kings in that respect.\nSex (and Drugs)I'd have different worries about raising teenage kids in New York.\nI'd worry less about what they'd see, and more about what they'd\ndo.  I went to college with a lot of kids who grew up in Manhattan,\nand as a rule they seemed pretty jaded.  They seemed to have lost\ntheir virginity at an average of about 14 and by college had tried\nmore drugs than I'd even heard of.The reasons parents don't want their teenage kids having sex are\ncomplex.  There are some obvious dangers: pregnancy and sexually\ntransmitted diseases.  But those aren't the only reasons parents\ndon't want their kids having sex.  The average parents of a 14 year\nold girl would hate the idea of her having sex even if there were\nzero risk of pregnancy or sexually transmitted diseases.Kids can probably sense they aren't being told the whole story.\nAfter all, pregnancy and sexually transmitted diseases are just as\nmuch a problem for adults, and they have sex.What really bothers parents about their teenage kids having sex?\nTheir dislike of the idea is so visceral it's probably inborn.  But\nif it's inborn it should be universal, and there are plenty of\nsocieties where parents don't mind if their teenage kids have\nsex\u2014indeed, where it's normal for 14 year olds to become\nmothers.  So what's going on?  There does seem to be a universal\ntaboo against sex with prepubescent children.  One can imagine\nevolutionary reasons for that.  And I think this is the main reason\nparents in industrialized societies dislike teenage kids having\nsex.",
        "start_char_idx": 3334,
        "end_char_idx": 7478,
        "text_template": "{metadata_str}\n\n{content}",
        "metadata_template": "{key}: {value}",
        "metadata_seperator": "\n",
        "class_name": "TextNode"
      },
      "__type__": "1"
    },
    "c3d32185-6823-4b80-a3e1-b8af8c856256": {
      "__data__": {
        "id_": "c3d32185-6823-4b80-a3e1-b8af8c856256",
        "embedding": null,
        "metadata": {
          "source": "https://paulgraham.com/lies.html",
          "title": "Lies We Tell Kids",
          "language": null
        },
        "excluded_embed_metadata_keys": [],
        "excluded_llm_metadata_keys": [],
        "relationships": {
          "1": {
            "node_id": "8d963132-457e-4acf-8848-e17995edf9d0",
            "node_type": "4",
            "metadata": {
              "source": "https://paulgraham.com/lies.html",
              "title": "Lies We Tell Kids",
              "language": null
            },
            "hash": "d801ce200eb98b3f60e162f5014aa3b480a328f7e2f69c1936d6a2e55ecab5ec",
            "class_name": "RelatedNodeInfo"
          },
          "2": {
            "node_id": "a1a800d7-018f-40ab-8395-190ec5a0d2bc",
            "node_type": "1",
            "metadata": {
              "source": "https://paulgraham.com/lies.html",
              "title": "Lies We Tell Kids",
              "language": null
            },
            "hash": "bd2d06e9c40c7c2cf2c899ea48e4e8d7535955760d0589b0bdef9ad6013095b7",
            "class_name": "RelatedNodeInfo"
          },
          "3": {
            "node_id": "783cc29a-47e7-474b-b573-27cfabf7aeab",
            "node_type": "1",
            "metadata": {},
            "hash": "72d1dbb464a2a22b95fa1d1a2a572d97525aa488acbc5cc8930ba00d153540e4",
            "class_name": "RelatedNodeInfo"
          }
        },
        "text": "After all, pregnancy and sexually transmitted diseases are just as\nmuch a problem for adults, and they have sex.What really bothers parents about their teenage kids having sex?\nTheir dislike of the idea is so visceral it's probably inborn.  But\nif it's inborn it should be universal, and there are plenty of\nsocieties where parents don't mind if their teenage kids have\nsex\u2014indeed, where it's normal for 14 year olds to become\nmothers.  So what's going on?  There does seem to be a universal\ntaboo against sex with prepubescent children.  One can imagine\nevolutionary reasons for that.  And I think this is the main reason\nparents in industrialized societies dislike teenage kids having\nsex.  They still think of them as children, even though biologically\nthey're not, so the taboo against child sex still has force.One thing adults conceal about sex they also conceal about drugs:\nthat it can cause great pleasure.  That's what makes sex and drugs\nso dangerous. The desire for them can cloud one's judgement\u2014which\nis especially frightening when the judgement being clouded is the\nalready wretched judgement of a teenage kid.Here parents' desires conflict.  Older societies told kids they had\nbad judgement, but modern parents want their children to be confident.\nThis may well be a better plan than the old one of putting them in\ntheir place, but it has the side effect that after having implicitly\nlied to kids about how good their judgement is, we then have to lie\nagain about all the things they might get into trouble with if they\nbelieved us.If parents told their kids the truth about sex and drugs, it would\nbe: the reason you should avoid these things is that you have lousy\njudgement.  People with twice your experience still get burned by\nthem.  But this may be one of those cases where the truth wouldn't\nbe convincing, because one of the symptoms of bad judgement is\nbelieving you have good judgement.  When you're too weak to lift\nsomething, you can tell, but when you're making a decision impetuously,\nyou're all the more sure of it.\nInnocenceAnother reason parents don't want their kids having sex is that\nthey want to keep them innocent.  Adults have a certain model of\nhow kids are supposed to behave, and it's different from what they\nexpect of other adults.One of the most obvious differences is the words kids are allowed\nto use.  Most parents use words when talking to other adults that\nthey wouldn't want their kids using.  They try to hide even the\nexistence of these words for as long as they can.  And this is\nanother of those conspiracies everyone participates in: everyone\nknows you're not supposed to swear in front of kids.I've never heard more different explanations for anything parents\ntell kids than why they shouldn't swear.  Every parent I know forbids\ntheir children to swear, and yet no two of them have the same\njustification.  It's clear most start with not wanting kids to\nswear, then make up the reason afterward.So my theory about what's going on is that the function of\nswearwords is to mark the speaker as an adult.  There's no difference\nin the meaning of \"shit\" and \"poopoo.\"  So why should one be ok for\nkids to say and one forbidden?  The only explanation is: by definition.\n[3]Why does it bother adults so much when kids do things reserved for\nadults?   The idea of a foul-mouthed, cynical 10 year old leaning\nagainst a lamppost with a cigarette hanging out of the corner of\nhis mouth is very disconcerting.  But why?One reason we want kids to be innocent is that we're programmed to\nlike certain kinds of helplessness.  I've several times heard mothers\nsay they deliberately refrained from correcting their young children's\nmispronunciations because they were so cute.  And if you think about\nit, cuteness is helplessness. Toys and cartoon characters meant to\nbe cute always have clueless expressions and stubby, ineffectual\nlimbs.It's not surprising we'd have an inborn desire to love and protect\nhelpless creatures, considering human offspring are so helpless for\nso long.  Without the helplessness that makes kids cute, they'd be\nvery annoying.  They'd merely seem like incompetent adults.  But\nthere's more to it than that.  The reason our hypothetical jaded\n10 year old bothers me so much is not just that he'd be annoying,\nbut that he'd have cut off his prospects for growth so early.",
        "start_char_idx": 6787,
        "end_char_idx": 11127,
        "text_template": "{metadata_str}\n\n{content}",
        "metadata_template": "{key}: {value}",
        "metadata_seperator": "\n",
        "class_name": "TextNode"
      },
      "__type__": "1"
    },
    "783cc29a-47e7-474b-b573-27cfabf7aeab": {
      "__data__": {
        "id_": "783cc29a-47e7-474b-b573-27cfabf7aeab",
        "embedding": null,
        "metadata": {
          "source": "https://paulgraham.com/lies.html",
          "title": "Lies We Tell Kids",
          "language": null
        },
        "excluded_embed_metadata_keys": [],
        "excluded_llm_metadata_keys": [],
        "relationships": {
          "1": {
            "node_id": "8d963132-457e-4acf-8848-e17995edf9d0",
            "node_type": "4",
            "metadata": {
              "source": "https://paulgraham.com/lies.html",
              "title": "Lies We Tell Kids",
              "language": null
            },
            "hash": "d801ce200eb98b3f60e162f5014aa3b480a328f7e2f69c1936d6a2e55ecab5ec",
            "class_name": "RelatedNodeInfo"
          },
          "2": {
            "node_id": "c3d32185-6823-4b80-a3e1-b8af8c856256",
            "node_type": "1",
            "metadata": {
              "source": "https://paulgraham.com/lies.html",
              "title": "Lies We Tell Kids",
              "language": null
            },
            "hash": "93797b1c3edee97e7755ad243ffc79f9a1274bcd980659ee4c645d0d9f58113c",
            "class_name": "RelatedNodeInfo"
          },
          "3": {
            "node_id": "c776261b-c258-4f37-b0b3-bdeddb50a453",
            "node_type": "1",
            "metadata": {},
            "hash": "78568a5b4f59c2bf68bd7dbaab03cafb727fa43c4a2f9e3e1ac0e510a66ca3ce",
            "class_name": "RelatedNodeInfo"
          }
        },
        "text": "I've several times heard mothers\nsay they deliberately refrained from correcting their young children's\nmispronunciations because they were so cute.  And if you think about\nit, cuteness is helplessness. Toys and cartoon characters meant to\nbe cute always have clueless expressions and stubby, ineffectual\nlimbs.It's not surprising we'd have an inborn desire to love and protect\nhelpless creatures, considering human offspring are so helpless for\nso long.  Without the helplessness that makes kids cute, they'd be\nvery annoying.  They'd merely seem like incompetent adults.  But\nthere's more to it than that.  The reason our hypothetical jaded\n10 year old bothers me so much is not just that he'd be annoying,\nbut that he'd have cut off his prospects for growth so early.  To\nbe jaded you have to think you know how the world works, and any\ntheory a 10 year old had about that would probably be a pretty\nnarrow one.Innocence is also open-mindedness.  We want kids to be innocent so\nthey can continue to learn.  Paradoxical as it sounds, there are\nsome kinds of knowledge that get in the way of other kinds of\nknowledge.  If you're going to learn that the world is a brutal\nplace full of people trying to take advantage of one another, you're\nbetter off learning it last.  Otherwise you won't bother learning\nmuch more.Very smart adults often seem unusually innocent, and I don't think\nthis is a coincidence.  I think they've deliberately avoided learning\nabout certain things.  Certainly I do.  I used to think I wanted\nto know everything.  Now I know I don't.\nDeathAfter sex, death is the topic adults lie most conspicuously about\nto kids.  Sex I believe they conceal because of deep taboos.  But\nwhy do we conceal death from kids?   Probably because small children\nare particularly horrified by it.  They want to feel safe, and death\nis the ultimate threat.One of the most spectacular lies our parents told us was about the\ndeath of our first cat.  Over the years, as we asked for more\ndetails, they were compelled to invent more, so the story grew quite\nelaborate.  The cat had died at the vet's office.  Of what?  Of the\nanaesthesia itself.  Why was the cat at the vet's office?  To be\nfixed.  And why had such a routine operation killed it?  It wasn't\nthe vet's fault; the cat had a congenitally weak heart; the anaesthesia\nwas too much for it; but there was no way anyone could have\nknown this in advance.  It was not till we were in our twenties\nthat the truth came out: my sister, then about three, had accidentally\nstepped on the cat and broken its back.They didn't feel the need to tell us the cat was now happily in cat\nheaven.  My parents never claimed that people or animals who died\nhad \"gone to a better place,\" or that we'd meet them again.  It\ndidn't seem to harm us.My grandmother told us an edited version of the death of my\ngrandfather.  She said they'd been sitting reading one day, and\nwhen she said something to him, he didn't answer.  He seemed to be\nasleep, but when she tried to rouse him, she couldn't.  \"He was\ngone.\" Having a heart attack sounded like falling asleep.  Later I\nlearned it hadn't been so neat, and the heart attack had taken most\nof a day to kill him.Along with such outright lies, there must have been a lot of changing\nthe subject when death came up.  I can't remember that, of course,\nbut I can infer it from the fact that I didn't really grasp I was\ngoing to die till I was about 19.  How could I have missed something\nso obvious for so long?  Now that I've seen parents managing the\nsubject, I can see how: questions about death are gently but firmly\nturned aside.On this topic, especially, they're met half-way by kids.  Kids often\nwant to be lied to.  They want to believe they're living in a\ncomfortable, safe world as much as their parents want them to believe\nit.\n[4]\nIdentitySome parents feel a strong adherence to an ethnic or religious group\nand want their kids to feel it too.",
        "start_char_idx": 10357,
        "end_char_idx": 14290,
        "text_template": "{metadata_str}\n\n{content}",
        "metadata_template": "{key}: {value}",
        "metadata_seperator": "\n",
        "class_name": "TextNode"
      },
      "__type__": "1"
    },
    "c776261b-c258-4f37-b0b3-bdeddb50a453": {
      "__data__": {
        "id_": "c776261b-c258-4f37-b0b3-bdeddb50a453",
        "embedding": null,
        "metadata": {
          "source": "https://paulgraham.com/lies.html",
          "title": "Lies We Tell Kids",
          "language": null
        },
        "excluded_embed_metadata_keys": [],
        "excluded_llm_metadata_keys": [],
        "relationships": {
          "1": {
            "node_id": "8d963132-457e-4acf-8848-e17995edf9d0",
            "node_type": "4",
            "metadata": {
              "source": "https://paulgraham.com/lies.html",
              "title": "Lies We Tell Kids",
              "language": null
            },
            "hash": "d801ce200eb98b3f60e162f5014aa3b480a328f7e2f69c1936d6a2e55ecab5ec",
            "class_name": "RelatedNodeInfo"
          },
          "2": {
            "node_id": "783cc29a-47e7-474b-b573-27cfabf7aeab",
            "node_type": "1",
            "metadata": {
              "source": "https://paulgraham.com/lies.html",
              "title": "Lies We Tell Kids",
              "language": null
            },
            "hash": "16ecc1db8571d3c5c5dbdf6b4f53b23f444e4c13f8a324681ab2487d039743ca",
            "class_name": "RelatedNodeInfo"
          },
          "3": {
            "node_id": "0d3456a6-9271-4d48-a0cb-524c6237e3ae",
            "node_type": "1",
            "metadata": {},
            "hash": "17c8963bc6b47fa9cbb16a66aff4570439dd18665f3e86221a88ab38ae25ed3e",
            "class_name": "RelatedNodeInfo"
          }
        },
        "text": "I can't remember that, of course,\nbut I can infer it from the fact that I didn't really grasp I was\ngoing to die till I was about 19.  How could I have missed something\nso obvious for so long?  Now that I've seen parents managing the\nsubject, I can see how: questions about death are gently but firmly\nturned aside.On this topic, especially, they're met half-way by kids.  Kids often\nwant to be lied to.  They want to believe they're living in a\ncomfortable, safe world as much as their parents want them to believe\nit.\n[4]\nIdentitySome parents feel a strong adherence to an ethnic or religious group\nand want their kids to feel it too.  This usually requires two\ndifferent kinds of lying: the first is to tell the child that he\nor she is an X, and the second is whatever specific lies Xes\ndifferentiate themselves by believing.\n[5]Telling a child they have a particular ethnic or religious identity\nis one of the stickiest things you can tell them.  Almost anything\nelse you tell a kid, they can change their mind about later when\nthey start to think for themselves.  But if you tell a kid they're\na member of a certain group, that seems nearly impossible to shake.This despite the fact that it can be one of the most premeditated\nlies parents tell.  When parents are of different religions, they'll\noften agree between themselves that their children will be \"raised\nas Xes.\"  And it works. The kids obligingly grow up considering\nthemselves as Xes, despite the fact that if their parents had chosen\nthe other way, they'd have grown up considering themselves as Ys.One reason this works so well is the second kind of lie involved.\nThe truth is common property.  You can't distinguish your group by\ndoing things that are rational, and believing things that are true.\nIf you want to set yourself apart from other people, you have to\ndo things that are arbitrary, and believe things that are false.\nAnd after having spent their whole lives doing things that are arbitrary\nand believing things that are false, and being regarded as odd by\n\"outsiders\" on that account, the cognitive dissonance pushing\nchildren to regard themselves as Xes must be enormous.  If they\naren't an X, why are they attached to all these arbitrary beliefs\nand customs?  If they aren't an X, why do all the non-Xes call them\none?This form of lie is not without its uses.  You can use it to carry\na payload of beneficial beliefs, and they will also become part of\nthe child's identity.  You can tell the child that in addition to\nnever wearing the color yellow, believing the world was created by\na giant rabbit, and always snapping their fingers before eating\nfish, Xes are also particularly honest and industrious.  Then X\nchildren will grow up feeling it's part of their identity to be\nhonest and industrious.This probably accounts for a lot of the spread of modern religions,\nand explains why their doctrines are a combination of the useful\nand the bizarre.  The bizarre half is what makes the religion stick,\nand the useful half is the payload.\n[6]\nAuthorityOne of the least excusable reasons adults lie to kids is to maintain\npower over them.  Sometimes these lies are truly sinister, like a\nchild molester telling his victims they'll get in trouble if they\ntell anyone what happened to them.  Others seem more innocent; it\ndepends how badly adults lie to maintain their power, and what they\nuse it for.Most adults make some effort to conceal their flaws from children.\nUsually their motives are mixed.  For example, a father who has an\naffair generally conceals it from his children.  His motive is\npartly that it would worry them, partly that this would introduce\nthe topic of sex, and partly (a larger part than he would admit)\nthat he doesn't want to tarnish himself in their eyes.If you want to learn what lies are told to kids, read almost any\nbook written to teach them about \"issues.\"\n[7]\nPeter Mayle wrote\none called Why Are We Getting a Divorce?  It begins with the three\nmost important things to remember about divorce, one of which is:\n\n  You shouldn't put the blame on one parent, because divorce is\n  never only one person's fault.\n  [8]\n\nReally?  When a man runs off with his secretary, is it always partly\nhis wife's fault?  But I can see why Mayle might have said this.",
        "start_char_idx": 13654,
        "end_char_idx": 17916,
        "text_template": "{metadata_str}\n\n{content}",
        "metadata_template": "{key}: {value}",
        "metadata_seperator": "\n",
        "class_name": "TextNode"
      },
      "__type__": "1"
    },
    "0d3456a6-9271-4d48-a0cb-524c6237e3ae": {
      "__data__": {
        "id_": "0d3456a6-9271-4d48-a0cb-524c6237e3ae",
        "embedding": null,
        "metadata": {
          "source": "https://paulgraham.com/lies.html",
          "title": "Lies We Tell Kids",
          "language": null
        },
        "excluded_embed_metadata_keys": [],
        "excluded_llm_metadata_keys": [],
        "relationships": {
          "1": {
            "node_id": "8d963132-457e-4acf-8848-e17995edf9d0",
            "node_type": "4",
            "metadata": {
              "source": "https://paulgraham.com/lies.html",
              "title": "Lies We Tell Kids",
              "language": null
            },
            "hash": "d801ce200eb98b3f60e162f5014aa3b480a328f7e2f69c1936d6a2e55ecab5ec",
            "class_name": "RelatedNodeInfo"
          },
          "2": {
            "node_id": "c776261b-c258-4f37-b0b3-bdeddb50a453",
            "node_type": "1",
            "metadata": {
              "source": "https://paulgraham.com/lies.html",
              "title": "Lies We Tell Kids",
              "language": null
            },
            "hash": "a92ab4f9ff2d2d35aee22cbbb1ab1f3461699d4af6a2a035b29848098efe8dc9",
            "class_name": "RelatedNodeInfo"
          },
          "3": {
            "node_id": "c3f99a26-ac33-4e02-8b1d-1120cbe6177e",
            "node_type": "1",
            "metadata": {},
            "hash": "cce01cf4ced6d23909b28e14a4e271b979fcb6d80c8babaaa50a39af3dbe7f43",
            "class_name": "RelatedNodeInfo"
          }
        },
        "text": "Usually their motives are mixed.  For example, a father who has an\naffair generally conceals it from his children.  His motive is\npartly that it would worry them, partly that this would introduce\nthe topic of sex, and partly (a larger part than he would admit)\nthat he doesn't want to tarnish himself in their eyes.If you want to learn what lies are told to kids, read almost any\nbook written to teach them about \"issues.\"\n[7]\nPeter Mayle wrote\none called Why Are We Getting a Divorce?  It begins with the three\nmost important things to remember about divorce, one of which is:\n\n  You shouldn't put the blame on one parent, because divorce is\n  never only one person's fault.\n  [8]\n\nReally?  When a man runs off with his secretary, is it always partly\nhis wife's fault?  But I can see why Mayle might have said this.\nMaybe it's more important for kids to respect their parents than\nto know the truth about them.But because adults conceal their flaws, and at the same time insist\non high standards of behavior for kids, a lot of kids grow up feeling\nthey fall hopelessly short.  They walk around feeling horribly evil\nfor having used a swearword, while in fact most of the adults around\nthem are doing much worse things.This happens in intellectual as well as moral questions.  The more\nconfident people are, the more willing they seem to be to answer a\nquestion \"I don't know.\"  Less confident people feel they have to\nhave an answer or they'll look bad.  My parents were pretty good\nabout admitting when they didn't know things, but I must have been\ntold a lot of lies of this type by teachers, because I rarely heard\na teacher say \"I don't know\" till I got to college.  I remember\nbecause it was so surprising to hear someone say that in front of\na class.The first hint I had that teachers weren't omniscient came in sixth\ngrade, after my father contradicted something I'd learned in school.\nWhen I protested that the teacher had said the opposite, my father\nreplied that the guy had no idea what he was talking about\u2014that\nhe was just an elementary school teacher, after all.Just a teacher?  The phrase seemed almost grammatically ill-formed.\nDidn't teachers know everything about the subjects they taught?\nAnd if not, why were they the ones teaching us?The sad fact is, US public school teachers don't generally understand\nthe stuff they're teaching very well.  There are some sterling\nexceptions, but as a rule people planning to go into teaching rank\nacademically near the bottom of the college population.  So the\nfact that I still thought at age 11 that teachers were infallible\nshows what a job the system must have done on my brain.\nSchoolWhat kids get taught in school is a complex mix of lies.  The most\nexcusable are those told to simplify ideas to make them easy to\nlearn.  The problem is, a lot of propaganda gets slipped into the\ncurriculum in the name of simplification.Public school textbooks represent a compromise between what various\npowerful groups want kids to be told.  The lies are rarely overt.\nUsually they consist either of omissions or of over-emphasizing\ncertain topics at the expense of others.  The view of history we\ngot in elementary school was a crude hagiography, with at least one\nrepresentative of each powerful group.The famous scientists I remember were Einstein, Marie Curie, and\nGeorge Washington Carver.   Einstein was a big deal because his\nwork led to the atom bomb.  Marie Curie was involved with X-rays.\nBut I was mystified about Carver.  He seemed to have done stuff\nwith peanuts.It's obvious now that he was on the list because he was black (and\nfor that matter that Marie Curie was on it because she was a woman),\nbut as a kid I was confused for years about him.  I wonder if it\nwouldn't have been better just to tell us the truth: that there\nweren't any famous black scientists.  Ranking George Washington\nCarver with Einstein misled us not only about science, but about\nthe obstacles blacks faced in his time.As subjects got softer, the lies got more frequent.  By the time\nyou got to politics and recent history, what we were taught was\npretty much pure propaganda.  For example, we were taught to regard\npolitical leaders as saints\u2014especially the recently martyred\nKennedy and King.  It was astonishing to learn later that they'd\nboth been serial womanizers, and that Kennedy was a speed freak to\nboot.",
        "start_char_idx": 17100,
        "end_char_idx": 21455,
        "text_template": "{metadata_str}\n\n{content}",
        "metadata_template": "{key}: {value}",
        "metadata_seperator": "\n",
        "class_name": "TextNode"
      },
      "__type__": "1"
    },
    "c3f99a26-ac33-4e02-8b1d-1120cbe6177e": {
      "__data__": {
        "id_": "c3f99a26-ac33-4e02-8b1d-1120cbe6177e",
        "embedding": null,
        "metadata": {
          "source": "https://paulgraham.com/lies.html",
          "title": "Lies We Tell Kids",
          "language": null
        },
        "excluded_embed_metadata_keys": [],
        "excluded_llm_metadata_keys": [],
        "relationships": {
          "1": {
            "node_id": "8d963132-457e-4acf-8848-e17995edf9d0",
            "node_type": "4",
            "metadata": {
              "source": "https://paulgraham.com/lies.html",
              "title": "Lies We Tell Kids",
              "language": null
            },
            "hash": "d801ce200eb98b3f60e162f5014aa3b480a328f7e2f69c1936d6a2e55ecab5ec",
            "class_name": "RelatedNodeInfo"
          },
          "2": {
            "node_id": "0d3456a6-9271-4d48-a0cb-524c6237e3ae",
            "node_type": "1",
            "metadata": {
              "source": "https://paulgraham.com/lies.html",
              "title": "Lies We Tell Kids",
              "language": null
            },
            "hash": "8186399639865c5e705158ae0d850dce88b6cf6c9a5043776cb61579665474d2",
            "class_name": "RelatedNodeInfo"
          },
          "3": {
            "node_id": "f2840fcb-6583-4692-950e-d6140b21c0e9",
            "node_type": "1",
            "metadata": {},
            "hash": "eb1114ac4f76c38fab13c7497d3c6de1d4034529dd8cb590bdefa15b3e4b9344",
            "class_name": "RelatedNodeInfo"
          }
        },
        "text": "I wonder if it\nwouldn't have been better just to tell us the truth: that there\nweren't any famous black scientists.  Ranking George Washington\nCarver with Einstein misled us not only about science, but about\nthe obstacles blacks faced in his time.As subjects got softer, the lies got more frequent.  By the time\nyou got to politics and recent history, what we were taught was\npretty much pure propaganda.  For example, we were taught to regard\npolitical leaders as saints\u2014especially the recently martyred\nKennedy and King.  It was astonishing to learn later that they'd\nboth been serial womanizers, and that Kennedy was a speed freak to\nboot.  (By the time King's plagiarism emerged, I'd lost the ability\nto be surprised by the misdeeds of famous people.)I doubt you could teach kids recent history without teaching them\nlies, because practically everyone who has anything to say about\nit has some kind of spin to put on it.  Much recent history consists\nof spin.  It would probably be better just to teach them metafacts\nlike that.Probably the biggest lie told in schools, though, is that the way\nto succeed is through following \"the rules.\"  In fact most such\nrules are just hacks to manage large groups efficiently.\nPeaceOf all the reasons we lie to kids, the most powerful is probably\nthe same mundane reason they lie to us.Often when we lie to people it's not part of any conscious strategy,\nbut because they'd react violently to the truth.  Kids, almost by\ndefinition, lack self-control.  They react violently to things\u2014and\nso they get lied to a lot. \n[9]A few Thanksgivings ago, a friend of mine found himself in a situation\nthat perfectly illustrates the complex motives we have when we lie\nto kids.  As the roast turkey appeared on the table, his alarmingly\nperceptive 5 year old son suddenly asked if the turkey had wanted\nto die.  Foreseeing disaster, my friend and his wife rapidly\nimprovised: yes, the turkey had wanted to die, and in fact had lived\nits whole life with the aim of being their Thanksgiving dinner.\nAnd that (phew) was the end of that.Whenever we lie to kids to protect them, we're usually also lying\nto keep the peace.One consequence of this sort of calming lie is that we grow up\nthinking horrible things are normal.  It's hard for us to feel a\nsense of urgency as adults over something we've literally been\ntrained not to worry about.  When I was about 10 I saw a documentary\non pollution that put me into a panic.  It seemed the planet was\nbeing irretrievably ruined.  I went to my mother afterward to ask\nif this was so.  I don't remember what she said, but she made me\nfeel better, so I stopped worrying about it.That was probably the best way to handle a frightened 10 year old.\nBut we should understand the price.  This sort of lie is one of the\nmain reasons bad things persist: we're all trained to ignore them.\nDetoxA sprinter in a race almost immediately enters a state called \"oxygen\ndebt.\"  His body switches to an emergency source of energy that's\nfaster than regular aerobic respiration.  But this process builds\nup waste products that ultimately require extra oxygen to break\ndown, so at the end of the race he has to stop and pant for a while\nto recover.We arrive at adulthood with a kind of truth debt.  We were told a\nlot of lies to get us (and our parents) through our childhood.  Some\nmay have been necessary.  Some probably weren't.  But we all arrive\nat adulthood with heads full of lies.There's never a point where the adults sit you down and explain all\nthe lies they told you.  They've forgotten most of them.  So if\nyou're going to clear these lies out of your head, you're going to\nhave to do it yourself.Few do.  Most people go through life with bits of packing material\nadhering to their minds and never know it.  You probably never can\ncompletely undo the effects of lies you were told as a kid, but\nit's worth trying.  I've found that whenever I've been able to undo\na lie I was told, a lot of other things fell into place.Fortunately, once you arrive at adulthood you get a valuable new\nresource you can use to figure out what lies you were told.  You're\nnow one of the liars.",
        "start_char_idx": 20813,
        "end_char_idx": 24950,
        "text_template": "{metadata_str}\n\n{content}",
        "metadata_template": "{key}: {value}",
        "metadata_seperator": "\n",
        "class_name": "TextNode"
      },
      "__type__": "1"
    },
    "f2840fcb-6583-4692-950e-d6140b21c0e9": {
      "__data__": {
        "id_": "f2840fcb-6583-4692-950e-d6140b21c0e9",
        "embedding": null,
        "metadata": {
          "source": "https://paulgraham.com/lies.html",
          "title": "Lies We Tell Kids",
          "language": null
        },
        "excluded_embed_metadata_keys": [],
        "excluded_llm_metadata_keys": [],
        "relationships": {
          "1": {
            "node_id": "8d963132-457e-4acf-8848-e17995edf9d0",
            "node_type": "4",
            "metadata": {
              "source": "https://paulgraham.com/lies.html",
              "title": "Lies We Tell Kids",
              "language": null
            },
            "hash": "d801ce200eb98b3f60e162f5014aa3b480a328f7e2f69c1936d6a2e55ecab5ec",
            "class_name": "RelatedNodeInfo"
          },
          "2": {
            "node_id": "c3f99a26-ac33-4e02-8b1d-1120cbe6177e",
            "node_type": "1",
            "metadata": {
              "source": "https://paulgraham.com/lies.html",
              "title": "Lies We Tell Kids",
              "language": null
            },
            "hash": "1968094ec531135bf1d131d3159eddfb2d03c4f5fd53b3c20f56a28c3c0de874",
            "class_name": "RelatedNodeInfo"
          },
          "3": {
            "node_id": "7403bb3f-4234-42ef-8414-5461478373b7",
            "node_type": "1",
            "metadata": {},
            "hash": "b84f5cc7feca526fac62a5f9fb079b01a83ae8bc20ea2f6a9f74a65c34ec941b",
            "class_name": "RelatedNodeInfo"
          }
        },
        "text": "Some probably weren't.  But we all arrive\nat adulthood with heads full of lies.There's never a point where the adults sit you down and explain all\nthe lies they told you.  They've forgotten most of them.  So if\nyou're going to clear these lies out of your head, you're going to\nhave to do it yourself.Few do.  Most people go through life with bits of packing material\nadhering to their minds and never know it.  You probably never can\ncompletely undo the effects of lies you were told as a kid, but\nit's worth trying.  I've found that whenever I've been able to undo\na lie I was told, a lot of other things fell into place.Fortunately, once you arrive at adulthood you get a valuable new\nresource you can use to figure out what lies you were told.  You're\nnow one of the liars.  You get to watch behind the scenes as adults\nspin the world for the next generation of kids.The first step in clearing your head is to realize how far you are\nfrom a neutral observer.  When I left high school I was, I thought,\na complete skeptic.  I'd realized high school was crap.  I thought\nI was ready to question everything I knew.  But among the many other\nthings I was ignorant of was how much debris there already was in\nmy head.  It's not enough to consider your mind a blank slate.  You\nhave to consciously erase it.\nNotes[1]\nOne reason I stuck with such a brutally simple word is that\nthe lies we tell kids are probably not quite as harmless as we\nthink.  If you look at what adults told children in the past, it's\nshocking how much they lied to them.  Like us, they did it with the\nbest intentions.  So if we think we're as open as one could reasonably\nbe with children, we're probably fooling ourselves.  Odds are people\nin 100 years will be as shocked at some of the lies we tell as we\nare at some of the lies people told 100 years ago.I can't predict which these will be, and I don't want to write an\nessay that will seem dumb in 100 years.  So instead of using special\neuphemisms for lies that seem excusable according to present fashions,\nI'm just going to call all our lies lies.(I have omitted one type: lies told to play games with kids'\ncredulity.  These range from \"make-believe,\" which is not really a\nlie because it's told with a wink, to the frightening lies told by\nolder siblings.   There's not much to say about these: I wouldn't\nwant the first type to go away, and wouldn't expect the second type\nto.)[2]\nCalaprice, Alice (ed.), The Quotable Einstein, Princeton\nUniversity Press, 1996.[3]\nIf you ask parents why kids shouldn't swear, the less educated\nones usually reply with some question-begging answer like \"it's\ninappropriate,\" while the more educated ones come up with elaborate\nrationalizations.  In fact the less educated parents seem closer\nto the truth.[4]\nAs a friend with small children pointed out, it's easy for small\nchildren to consider themselves immortal, because time seems to\npass so slowly for them.  To a 3 year old, a day feels like a month\nmight to an adult.  So 80 years sounds to him like 2400 years would\nto us.[5]\nI realize I'm going to get endless grief for classifying religion\nas a type of lie.  Usually people skirt that issue with some\nequivocation implying that lies believed for a sufficiently long\ntime by sufficiently large numbers of people are immune to the usual\nstandards for truth.  But because I can't predict which lies future\ngenerations will consider inexcusable, I can't safely omit any type\nwe tell.  Yes, it seems unlikely that religion will be out of fashion\nin 100 years, but no more unlikely than it would have seemed to\nsomeone in 1880 that schoolchildren in 1980 would be taught that\nmasturbation was perfectly normal and not to feel guilty about it.[6]\nUnfortunately the payload can consist of bad customs as well\nas good ones.  For example, there are certain qualities that some\ngroups in America consider \"acting white.\"  In fact most of them\ncould as accurately be called \"acting Japanese.\"  There's nothing\nspecifically white about such customs. They're common to all cultures\nwith long traditions of living in cities.",
        "start_char_idx": 24173,
        "end_char_idx": 28257,
        "text_template": "{metadata_str}\n\n{content}",
        "metadata_template": "{key}: {value}",
        "metadata_seperator": "\n",
        "class_name": "TextNode"
      },
      "__type__": "1"
    },
    "7403bb3f-4234-42ef-8414-5461478373b7": {
      "__data__": {
        "id_": "7403bb3f-4234-42ef-8414-5461478373b7",
        "embedding": null,
        "metadata": {
          "source": "https://paulgraham.com/lies.html",
          "title": "Lies We Tell Kids",
          "language": null
        },
        "excluded_embed_metadata_keys": [],
        "excluded_llm_metadata_keys": [],
        "relationships": {
          "1": {
            "node_id": "8d963132-457e-4acf-8848-e17995edf9d0",
            "node_type": "4",
            "metadata": {
              "source": "https://paulgraham.com/lies.html",
              "title": "Lies We Tell Kids",
              "language": null
            },
            "hash": "d801ce200eb98b3f60e162f5014aa3b480a328f7e2f69c1936d6a2e55ecab5ec",
            "class_name": "RelatedNodeInfo"
          },
          "2": {
            "node_id": "f2840fcb-6583-4692-950e-d6140b21c0e9",
            "node_type": "1",
            "metadata": {
              "source": "https://paulgraham.com/lies.html",
              "title": "Lies We Tell Kids",
              "language": null
            },
            "hash": "edc41b368e6285e59b8eb59451dca1d2af4eb8592230975f64045c490077e916",
            "class_name": "RelatedNodeInfo"
          }
        },
        "text": "But because I can't predict which lies future\ngenerations will consider inexcusable, I can't safely omit any type\nwe tell.  Yes, it seems unlikely that religion will be out of fashion\nin 100 years, but no more unlikely than it would have seemed to\nsomeone in 1880 that schoolchildren in 1980 would be taught that\nmasturbation was perfectly normal and not to feel guilty about it.[6]\nUnfortunately the payload can consist of bad customs as well\nas good ones.  For example, there are certain qualities that some\ngroups in America consider \"acting white.\"  In fact most of them\ncould as accurately be called \"acting Japanese.\"  There's nothing\nspecifically white about such customs. They're common to all cultures\nwith long traditions of living in cities.  So it is probably a\nlosing bet for a group to consider behaving the opposite way as\npart of its identity.[7]\nIn this context, \"issues\" basically means \"things we're going\nto lie to them about.\"  That's why there's a special name for these\ntopics.[8]\nMayle, Peter, Why Are We Getting a Divorce?, Harmony, 1988.[9]\nThe ironic thing is, this is also the main reason kids lie to\nadults.  If you freak out when people tell you alarming things,\nthey won't tell you them.  Teenagers don't tell their parents what\nhappened that night they were supposed to be staying at a friend's\nhouse for the same reason parents don't tell 5 year olds the truth\nabout the Thanksgiving turkey.  They'd freak if they knew.\nThanks to Sam Altman, Marc Andreessen, Trevor Blackwell,\nPatrick Collison, Jessica Livingston, Jackie McDonough, Robert\nMorris, and David Sloo for reading drafts of this.  And since there\nare some controversial ideas here, I should add that none of them\nagreed with everything in it.German TranslationFrench TranslationRussian Translation",
        "start_char_idx": 27505,
        "end_char_idx": 29296,
        "text_template": "{metadata_str}\n\n{content}",
        "metadata_template": "{key}: {value}",
        "metadata_seperator": "\n",
        "class_name": "TextNode"
      },
      "__type__": "1"
    }
  },
  "docstore/ref_doc_info": {
    "da6d8f50-17df-4277-b562-36c4fb2945d9": {
      "node_ids": ["9964dc49-ebfc-450a-96c9-de158ebe113f"],
      "metadata": {
        "source": "https://paulgraham.com/",
        "title": "Paul Graham",
        "language": null
      }
    },
    "3cb07e1e-a972-4b15-8864-3b8808c9aa85": {
      "node_ids": [
        "0c2e48b9-73da-4f43-babc-3b18cf6f7214",
        "85f12440-2271-485c-ad4e-8496778b575b"
      ],
      "metadata": {
        "source": "https://paulgraham.com/raq.html",
        "title": "RAQs",
        "language": null
      }
    },
    "7b57235f-87b5-42d8-a8f2-4939052b47a8": {
      "node_ids": ["ad0fb2a3-e94f-49f4-b21d-51da4589d3c2"],
      "metadata": {
        "source": "https://paulgraham.com/arc.html",
        "title": "Arc",
        "language": null
      }
    },
    "a5402da5-10e5-4cad-88ab-37b26d552e5a": {
      "node_ids": [
        "24e6c414-4be5-45df-bc79-c03531869c3a",
        "de4cfc0b-56b3-4241-aadc-02422a183732",
        "d4fa09ce-3b39-41da-bf22-6244167ddc89",
        "b96927de-27fa-4d7d-8103-754b42f0692a",
        "9f573fe0-7021-4542-a36b-bee5e32ad298",
        "5dc15948-0824-476a-a37c-54a781e0eece",
        "41d94ac2-9f56-4291-9a4c-e68d24b653b1",
        "3236e272-f1b2-410f-a311-8ada5d747880",
        "d385007c-ad47-4231-9aac-c38b724e62df",
        "c0e4bfcd-4a19-4f5f-a96f-ebc07c8320a3",
        "f020f23f-7cf2-499d-a5b0-253c9d99b047",
        "1f67b334-0f66-4815-a36a-bf8b0ad6b3d0",
        "0d02d136-a814-49ac-bd9e-2da19939fa39",
        "a367e7d1-51bd-4bad-8569-ac94f712069a",
        "9652eed2-57cb-4984-899b-c8cb45836ecd",
        "cbf43e7b-09cf-4e42-bf25-80d9493232d9"
      ],
      "metadata": {
        "source": "https://paulgraham.com/start.html",
        "title": "How to Start a Startup",
        "language": null
      }
    },
    "d0430c8b-3920-4c2c-a677-9efa91473af7": {
      "node_ids": ["6d93f9de-1013-4e3a-9e63-e7ab1826bf4d"],
      "metadata": {
        "source": "https://paulgraham.com/index.html",
        "title": "Paul Graham",
        "language": null
      }
    },
    "b79260c6-ee80-4821-9ff1-b144808cefba": {
      "node_ids": ["a6f4b51c-1a05-4239-a66d-46af4f8a4689"],
      "metadata": {
        "source": "https://paulgraham.com/books.html",
        "title": "Books",
        "language": null
      }
    },
    "52fe421e-157e-4fba-939f-ad9df0f7a916": {
      "node_ids": [
        "fd5dad1f-0aa5-463c-ae84-9af0badfedce",
        "21c92f2b-ff5d-4cf0-ae87-c4bf806119ad"
      ],
      "metadata": {
        "source": "https://paulgraham.com/mac.html",
        "title": "Return of the Mac",
        "language": null
      }
    },
    "8bace2cd-e1a2-4dfd-b52f-1fc842a42a90": {
      "node_ids": ["e855d2ae-6914-46f7-96f6-10a18d197360"],
      "metadata": {
        "source": "https://paulgraham.com/faq.html",
        "title": "FAQs",
        "language": null
      }
    },
    "4941c0c4-d920-47a7-ad59-7d6f709b5301": {
      "node_ids": [
        "1f643ec2-f04d-4887-8c88-2692c764d682",
        "002ce96f-ffcc-40e0-b2a4-f625b68f55be"
      ],
      "metadata": {
        "source": "https://paulgraham.com/articles.html",
        "title": "Essays",
        "language": null
      }
    },
    "8b81e5a0-c866-4fa8-8c9d-92b540ca6fa2": {
      "node_ids": ["0998911d-fdb6-48e4-b118-7c2d4efbeaf8"],
      "metadata": {
        "source": "https://paulgraham.com/lisp.html",
        "title": "Lisp",
        "language": null
      }
    },
    "7412287d-bc29-44c8-867c-2e7a678a60f2": {
      "node_ids": ["112ac152-9c9d-406f-ba78-6afe67303cf7"],
      "metadata": {
        "source": "https://paulgraham.com/kedrosky.html",
        "title": "Responses",
        "language": null
      }
    },
    "4e32d862-8a4e-463e-9bb7-724f60bc1dad": {
      "node_ids": ["9b7ef78c-f08b-4f56-86a1-3ddda86b0645"],
      "metadata": {
        "source": "https://paulgraham.com/bel.html",
        "title": "Bel",
        "language": null
      }
    },
    "d5b40f05-89e7-469e-8c8e-33b89df900e0": {
      "node_ids": ["2d743ff6-ebde-47af-9298-0a9d9b64098c"],
      "metadata": {
        "source": "https://paulgraham.com/rss.html",
        "title": "RSS",
        "language": null
      }
    },
    "21d69f33-12c7-48c8-943e-ec7c63538fdb": {
      "node_ids": ["61b49f61-2e40-4792-b5d4-f5bf95489e13"],
      "metadata": {
        "source": "https://paulgraham.com/antispam.html",
        "title": "Spam",
        "language": null
      }
    },
    "e1dd58a1-1655-4846-bd2c-dbe87e3b1d8d": {
      "node_ids": [
        "610061e5-08f3-4ab2-918f-5d71970208ad",
        "1df7b78e-d883-4148-b5c8-3b6e071cb4cf",
        "09248f01-b0cf-4114-9602-367d37bcf60f",
        "ad2b5cb1-e2af-4d68-891a-e297dd0b0dbb",
        "df53392e-b34f-46c7-b11c-68340917877e",
        "e3cf9e1b-3609-40ac-b4cf-a6bba834ac1a",
        "9ee175cc-707a-4d1f-8952-1dc4b22bf115",
        "326912d7-afdb-4c5a-9c57-0f55ccabe400"
      ],
      "metadata": {
        "source": "https://paulgraham.com/quo.html",
        "title": "Quotes",
        "language": null
      }
    },
    "0e5ec832-5e40-4111-90fb-2402796144c8": {
      "node_ids": ["c6298b77-55ba-4f1b-914e-1a9a62185ce1"],
      "metadata": {
        "source": "https://paulgraham.com/bio.html",
        "title": "Bio",
        "language": null
      }
    },
    "aa629b38-5cac-4440-a2db-f69d9742fbf0": {
      "node_ids": ["2dfff652-e893-403f-83c3-8333f9013947"],
      "metadata": {
        "source": "https://paulgraham.com/info.html",
        "title": "Paul Graham Info",
        "language": null
      }
    },
    "8a578ba5-7a1b-4646-8ff1-c4c25a415168": {
      "node_ids": [
        "ee631768-43a8-42df-a2bd-c333477b6333",
        "5400d990-b59d-44f9-9384-a6b7d97ca8a1",
        "70b69885-dbbd-40e6-adc1-fe149953f6d6",
        "ec0c7d54-5759-4549-8478-0a44e33f5672",
        "1f34dba1-dd49-4236-9a20-52b3f5aebc58",
        "a312476c-d788-45dc-a718-4fd3c06c9bcb",
        "b63c30d5-23dc-4a14-accb-b352fb5e882a"
      ],
      "metadata": {
        "source": "https://paulgraham.com/superlinear.html",
        "title": "Superlinear Returns",
        "language": null
      }
    },
    "775a1596-77f5-4642-80af-2f9ead7f2134": {
      "node_ids": [
        "576d317a-7e3b-4d0b-96ca-b5b4b3f374ad",
        "5440e1cc-02d6-4016-970d-31bdd2b57d07",
        "3ecb3c78-b5e8-4528-a177-8bdfa9e6ccd3",
        "dba834ca-dab2-4831-b2d0-8471a3d060e4",
        "9da843f8-6e9f-4a2e-8095-a1df76e3b247",
        "d1ada899-0d70-4c31-9538-31cde12809ef",
        "1703b6b8-8bb6-4a63-a246-c0dd35b45564",
        "46056be1-b47c-45cb-8c06-ea2e70c1ad06",
        "ce326ed6-39ba-4961-a1a9-8d9cfab591b2",
        "d9703c2d-1591-46fa-bccb-84dd94f48531",
        "808b2407-f5ee-43b4-a076-7c05457b91c4",
        "50f3e5ec-9f29-4ced-80e4-92e37482b829",
        "2405cfc3-9869-412f-a9c6-6efcf03d072c",
        "ed7a9d6d-33ce-477c-8dad-a1bc7ca4f03c",
        "a739c4ae-732c-4b76-8d8c-d506708cdc1f",
        "bb7e6b92-7180-4a14-a1e6-9391212f5264",
        "5303bae3-97b9-4655-8f5c-ef33dd873d81",
        "257909c7-7113-4b00-a3e0-45c7adfce6bd",
        "cdf109bf-b3be-4aac-af0a-2874e77a44b9",
        "88f12b13-f280-41ad-9aad-c6d1ad434192",
        "3b55de4d-1776-40c8-8239-ee62f2aaa5f5",
        "bc8b8b93-eaf4-469a-b8bb-4493d1ea82da",
        "655cc94b-1685-4b9d-b251-0daf7c6af2d8"
      ],
      "metadata": {
        "source": "https://paulgraham.com/worked.html",
        "title": "What I Worked On",
        "language": null
      }
    },
    "1760b2bf-567c-445d-b307-22e6f964e9b7": {
      "node_ids": [
        "b18ecf5c-e61c-4920-a86a-1e790216fd26",
        "691f2189-cffa-4537-8ed4-3cae0ec5a0c7",
        "d07d3e7c-3c64-4503-946a-01d747499b7b",
        "d1f1fed0-52b3-4987-95eb-6cd3e26ea311",
        "60c91bd4-1ff2-4088-9738-4bb341bc6f94",
        "27efba46-99ea-4352-afdc-79a7485e8213",
        "f3c5ea33-d21c-430a-9bc8-c2bc40376191",
        "14b2773c-e341-4fb6-aad1-85d061f9e16a",
        "043581dc-ddb9-4ebe-8723-f027867d4afe",
        "7b23b817-8a51-48f5-9dfe-54933b8ec74d",
        "48a55e52-c68e-480c-b2e8-2ba93135c8ce",
        "210cdb8b-87bd-48e1-b5c5-500f28dd9f68",
        "a78e7dd7-adcb-4fdc-a667-83ebcd2d0c83",
        "7e4f53a3-6306-4604-b0cb-4ee49048f3e6",
        "561259f6-6146-426f-a00e-589fb818da4d",
        "be31eeb4-8dba-4c4b-9390-750000109174",
        "e39d45d9-200d-4183-9c7a-2fd1f6a305ea",
        "877cf157-4f19-4e6f-bb6c-93688a1e90bf",
        "264475de-19f5-4ce1-afe5-83ecafc5a589",
        "6d6e87db-a119-40e9-aa96-cd47a2fa1a04"
      ],
      "metadata": {
        "source": "https://paulgraham.com/greatwork.html",
        "title": "How to Do Great Work",
        "language": null
      }
    },
    "d1f6290b-658f-4ec1-8bd8-65f7c563197f": {
      "node_ids": [
        "f89aade3-d8ad-4914-b203-a535ed40e172",
        "5180efc2-9f78-43db-9930-8d137bc95818",
        "22e640ca-28ae-4ce6-8e5d-0a9ed9989d0c",
        "4ffb8336-0912-4fd7-9925-adc04c642f3f",
        "128adaac-700f-45e4-bfa2-bf45b102c362"
      ],
      "metadata": {
        "source": "https://paulgraham.com/richnow.html",
        "title": "How People Get Rich Now",
        "language": null
      }
    },
    "f704ac66-8744-4697-8c70-c06e3af28252": {
      "node_ids": [
        "de1c79f9-ee30-4e5b-b062-ca583ca6a720",
        "27a60777-4116-47c7-b705-cbd3eafa5f5b",
        "04b785da-e897-47d0-b393-567fe996a7b7",
        "684dce58-30f5-4bed-a8c7-996076bbe548",
        "f0449142-a468-47fe-8552-1c5dff7508c3",
        "88a05154-3994-4497-aaab-0abee055eb1c"
      ],
      "metadata": {
        "source": "https://paulgraham.com/think.html",
        "title": "How to Think for Yourself",
        "language": null
      }
    },
    "1493b302-b7ca-4fdb-ad36-39a0d5bff339": {
      "node_ids": [
        "ec2fae4c-76cf-4048-bf24-317cdae844e5",
        "d968bc65-d1e9-4f17-b2bf-58b97a150768",
        "0c34b50a-1403-478d-adb0-ed0017c39c4b",
        "b505d39f-64c7-4903-acb9-b2e07355a70a",
        "b71413ec-fbef-4c84-a34b-1b696ef91c5d"
      ],
      "metadata": {
        "source": "https://paulgraham.com/google.html",
        "title": "How to Start Google",
        "language": null
      }
    },
    "24ef60e9-a5fe-4906-b98d-9620e68c7ea4": {
      "node_ids": [
        "40552d33-514b-4661-a123-f6fd045f4d26",
        "4484e424-16e4-4fa7-b169-994a23ae6d65",
        "a2c42716-321f-4c84-87dd-19c89c083703",
        "5a7596ba-6a4a-46e7-ab1c-5e0e2f963249",
        "ae746f1f-317d-424a-92a4-598c1de17f3c",
        "45a9f428-c0b6-4b03-870b-d72e209dd4c4",
        "5a840a70-1afe-4617-afd2-870c6c3a0b00",
        "9d6c9af5-3d60-4bc4-91fc-abd243e4d539",
        "e9100a29-120c-43df-bdb6-23417f4352eb",
        "6b29c435-3cad-4536-95c2-b913d6a80e3a",
        "e15d877d-7876-4d2d-9626-86ca743e596a",
        "06ee97eb-67f6-4909-b50d-539e9d85e31c"
      ],
      "metadata": {
        "source": "https://paulgraham.com/startupideas.html",
        "title": "How to Get Startup Ideas",
        "language": null
      }
    },
    "93ccc7a7-6629-4b22-a86d-f45c045d69dd": {
      "node_ids": ["9ba9d8e4-1d36-4b01-bf3c-5ab205556bd0"],
      "metadata": {
        "source": "https://paulgraham.com/ind.html",
        "title": "Paul Graham Index",
        "language": null
      }
    },
    "d900b4c4-d458-49a3-8141-7a0ef3bb1da2": {
      "node_ids": [
        "70acd3a6-f0b2-4158-8544-ea8c6fb686cb",
        "ec4d0811-20d1-4b78-a3c4-d9e90397961c"
      ],
      "metadata": {
        "source": "https://paulgraham.com/word.html",
        "title": "A Word to the Resourceful",
        "language": null
      }
    },
    "5e676915-5512-4fc1-bcb6-dec5818071d0": {
      "node_ids": ["c83c805a-1e82-4ded-b92f-a487a2ff66a9"],
      "metadata": {
        "source": "https://paulgraham.com/aarstevzakwi.html",
        "title": "Aaron, Steve, Zak with Powerbooks",
        "language": null
      }
    },
    "f1da73bb-4483-4e5f-9678-0832489b4100": {
      "node_ids": ["ea16f1d0-82d6-4050-9a02-71b4ed07903a"],
      "metadata": {
        "source": "https://paulgraham.com/59eldorado.html",
        "title": "1959 Cadillac Eldorado",
        "language": null
      }
    },
    "f09998f0-322a-489e-92c7-82363ddc7e7c": {
      "node_ids": [
        "a831fe36-b333-413f-b3bf-381d66b70cb0",
        "0a0bda39-be3b-4651-baae-9bbae484b08b",
        "43031e2b-2954-4bd9-b4e4-4d8ffb0479a7",
        "cd53566e-098a-45a4-bdd9-7426609b5e7b",
        "cb1b26e0-eca8-4753-950d-aa822c6c3948",
        "c3838f41-3cad-4f29-8fcf-90185558d3b4",
        "13568fa7-93fb-430e-8b53-99d8fdcdc77b",
        "0203fb4b-d32c-4988-9246-c2efb8d8ff53"
      ],
      "metadata": {
        "source": "https://paulgraham.com/fundraising.html",
        "title": "A Fundraising Survival Guide",
        "language": null
      }
    },
    "f53eff25-b0df-4569-a4dd-285ec231f4cb": {
      "node_ids": [
        "7505963f-f930-4e08-9d29-d657eeffde2e",
        "69b88068-ebaa-40a0-8ac6-5ec2681a2ab1"
      ],
      "metadata": {
        "source": "https://paulgraham.com/revolution.html",
        "title": "A Local Revolution?",
        "language": null
      }
    },
    "26604887-0847-45aa-aea2-bdc17b6461ff": {
      "node_ids": ["941b9651-96c8-4cc3-9cfa-cd68b14a9910"],
      "metadata": {
        "source": "https://paulgraham.com/bias.html",
        "title": "A Way to Detect Bias",
        "language": null
      }
    },
    "b3eaa467-6b24-495d-92c4-5a7b0713c147": {
      "node_ids": [
        "b2a9c38a-4134-4afc-8208-19f354cd3e67",
        "b40a01ef-d941-48cc-b7d7-177cbffe3304",
        "d0e5473f-48c9-4fd0-a8de-18a4c0f070d4"
      ],
      "metadata": {
        "source": "https://paulgraham.com/klein.html",
        "title": "A Reply to Ezra Klein",
        "language": null
      }
    },
    "26b2192d-413a-426a-90b0-7be83cc7661e": {
      "node_ids": ["7afd5431-8387-427c-9569-0a23b1b41ea2"],
      "metadata": {
        "source": "https://paulgraham.com/75eldorado.html",
        "title": "1975 Cadillac Eldorado",
        "language": null
      }
    },
    "e96b71db-d4f3-48f5-ab28-6e5ae24398b8": {
      "node_ids": [
        "e9df8bf6-e94d-4889-98f2-af2d6abb2e4d",
        "5308930d-8750-4199-adac-9619a3068efb",
        "ff4fa664-10fb-4ecd-8490-7a415aaaf691"
      ],
      "metadata": {
        "source": "https://paulgraham.com/venturecapital.html",
        "title": "A Unified Theory of VC Suckage",
        "language": null
      }
    },
    "74eb5f6d-42d2-44b7-a555-3d0b4372542c": {
      "node_ids": ["16b6a56a-1502-4b09-8faf-538ce4f087fe"],
      "metadata": {
        "source": "https://paulgraham.com/ind_1.html",
        "title": "Paul Graham Index",
        "language": null
      }
    },
    "b2f47d6c-6224-4cab-95ce-da038ac94744": {
      "node_ids": ["c96ec641-e4b5-4d3e-b59e-a273422d313f"],
      "metadata": {
        "source": "https://paulgraham.com/okung.html",
        "title": "A Reply to Russell Okung",
        "language": null
      }
    },
    "c0e46bff-e238-4d81-8a71-430603928398": {
      "node_ids": ["61fce21b-e69e-4d52-8806-d271d98c93dc"],
      "metadata": {
        "source": "https://paulgraham.com/matador.html",
        "title": "1976 AMC Matador Coupe",
        "language": null
      }
    },
    "b829193a-3ec3-488f-a4b9-9e3f8bec16db": {
      "node_ids": ["2a8d5087-b2c0-4743-af1f-4cedf012bc90"],
      "metadata": {
        "source": "https://paulgraham.com/04magnum.html",
        "title": "2004 Dodge Magnum",
        "language": null
      }
    },
    "04424a6d-a9ec-4307-b135-c9f8d95037fc": {
      "node_ids": [
        "2bf319a1-3239-4020-b9b9-701de6a7c068",
        "6aac1afa-46a7-4e43-892b-d6ebda6d7614",
        "0e95905f-ae7d-419a-940f-33529f315f11",
        "8c9cbc2f-99d9-43c4-9372-dbf27f91d4fb",
        "748a28df-af66-4f5e-8927-d0e3ca37221f",
        "94234594-5158-4035-9842-b51603b6c0d5",
        "82020273-3233-47b0-9749-7fb01bcb3173",
        "52129057-61d8-4bf6-9d9e-d5e764ef724f",
        "973780a6-1aef-4d24-bc48-e839481592ec",
        "749a02f4-d585-4a0e-b739-0a139a9820da"
      ],
      "metadata": {
        "source": "https://paulgraham.com/spam.html",
        "title": "A Plan for Spam",
        "language": null
      }
    },
    "e2e993b4-339f-4956-9491-c0595edfebaa": {
      "node_ids": [
        "a5bf9e73-43fd-495f-b158-9aae3d8deaa3",
        "0254e550-b604-4af1-a9d6-9da0054dcf3c",
        "ec1f0362-9857-442d-9ae3-98da581206f3",
        "d54f760c-35e3-4a19-9316-66d6b1780df1",
        "9621b182-ab3d-40e9-a092-4f5cc234106c",
        "943f9da7-987f-41b7-99a8-f66699f44255",
        "238acfba-87cf-41db-886f-8b304b35e396",
        "f75f1d02-dac7-4541-a370-38733fc3fb28",
        "22b4a0ac-4cc7-42a7-b69f-4d21a8bb37d1",
        "75cb36ad-3aae-48de-86d3-92818e7cd63c",
        "b9258295-208e-4aa4-91b9-1583060aa262"
      ],
      "metadata": {
        "source": "https://paulgraham.com/mit.html",
        "title": "A Student's Guide to Startups",
        "language": null
      }
    },
    "e18b5b3e-751b-4475-a303-240255fc90f1": {
      "node_ids": ["a6f90609-0917-479b-9fbe-b63e8d8bdc71"],
      "metadata": {
        "source": "https://paulgraham.com/6631327.html",
        "title": "6,631,372",
        "language": null
      }
    },
    "e7447797-cfc5-436f-a4df-01bc405b3e42": {
      "node_ids": [
        "4babb374-f536-46ad-ae92-ed11f4d8d0f7",
        "f7b8af00-b95e-4b79-bb76-22e7823d89c5",
        "35987dbb-ef07-4cd5-8d2b-a823e0f57294",
        "d4ba86a9-0a12-4258-9b25-8eae9b4a99ea"
      ],
      "metadata": {
        "source": "https://paulgraham.com/own.html",
        "title": "A Project of One's Own",
        "language": null
      }
    },
    "52aa8f96-d12b-4100-a683-2fabce06375d": {
      "node_ids": ["5441bebc-109a-494c-8aca-d65ca24d5729"],
      "metadata": {
        "source": "https://paulgraham.com/1974-911s.html",
        "title": "1974 Porsche 911 Models",
        "language": null
      }
    },
    "6489b718-0596-4d95-a998-6f7ef42684b2": {
      "node_ids": ["0660f123-8c74-46f2-84e9-d083f9f952fd"],
      "metadata": {
        "source": "https://paulgraham.com/12aug95.html",
        "title": "12 August 1995: It Works",
        "language": null
      }
    },
    "589d0ad3-61e0-4613-a4af-f4c284376bb6": {
      "node_ids": [
        "5f028014-d275-4494-a9a1-e2a381477611",
        "9fb1d197-ba9b-45f1-980f-5369ef1b3114",
        "bf9563b5-f52a-480c-9d2f-0065718ee7ba",
        "8a68714c-e9b1-47db-a0e2-9b266ecdefb2",
        "ef401163-7a44-4a0e-933a-0494fea60d69",
        "2f792bd6-1e79-46a7-82a6-25dffb18b431",
        "4f8e34c8-8100-462a-a8dc-2634e8b39557"
      ],
      "metadata": {
        "source": "https://paulgraham.com/laundry.html",
        "title": "A Version 1.0",
        "language": null
      }
    },
    "8b04af71-4392-4f23-9ef9-16d89e9567e1": {
      "node_ids": ["30bcc146-d841-4939-8865-2449bc93b35c"],
      "metadata": {
        "source": "https://paulgraham.com/yctable.html",
        "title": "2005 Summer Founders",
        "language": null
      }
    },
    "bdc434d1-669c-4ce4-b8ca-d756924c94ab": {
      "node_ids": [
        "808df8bb-b94e-4ff1-9ff4-552b7019dfaf",
        "6704a0f5-4799-4f60-b1ae-ea5f61a98e0a",
        "6cb9484f-1f0b-4539-9cb3-51915eaadd50",
        "0bbf90a5-aa8b-4736-b33f-7bf4df666884"
      ],
      "metadata": {
        "source": "https://paulgraham.com/ycombinator.html",
        "title": "A New Venture Animal",
        "language": null
      }
    },
    "ee12588f-82df-4d5c-afbd-19272bc78758": {
      "node_ids": ["bcd683d1-7544-4a8f-a08d-20f87db6c9b6"],
      "metadata": {
        "source": "https://paulgraham.com/firefox.html",
        "title": "A Firefox in IE's Henhouse",
        "language": null
      }
    },
    "b00058e7-ce28-419b-9328-b074993f2aed": {
      "node_ids": ["6807fbcf-d4fb-4b29-b0d7-24f88b451b0a"],
      "metadata": {
        "source": "https://paulgraham.com/tricked.html",
        "title": "\"I can be tricked by anyone who looks like Mark Zuckerberg.\"",
        "language": null
      }
    },
    "c1698da0-b0f3-4f8f-847b-efdb17132cbd": {
      "node_ids": [
        "21d7f0d2-1222-4724-b86a-dcacb08d7a0d",
        "979c319a-d3eb-464e-9ad7-df3ff9ecbe2e",
        "134ab959-f3f9-4e7e-9996-64416e380f62",
        "0aa70024-be72-44c5-8efe-c501680f7cda",
        "006f2691-d840-442d-9f4f-33f59af1ddbc",
        "9b80f7d6-d16f-4510-898c-7764ca000723",
        "a1e77dc7-43c9-4980-a5c3-a2d2faf5321f"
      ],
      "metadata": {
        "source": "https://paulgraham.com/best.html",
        "title": "The Best Essay",
        "language": null
      }
    },
    "3c5c4648-9cc0-40de-91d4-e8fd6b54b660": {
      "node_ids": [
        "e7bf8319-8855-41c7-b7c3-79497347c818",
        "1957ee17-7db7-4cb8-ba63-b176f857c8c0",
        "c1e5609c-fbed-4dde-a319-91f0e097ec14"
      ],
      "metadata": {
        "source": "https://paulgraham.com/kids.html",
        "title": "Having Kids",
        "language": null
      }
    },
    "3c47c642-2780-43fd-ab6c-ce6ca6aef292": {
      "node_ids": [
        "c6465e20-4d8d-4dd1-979f-ce30f9f6dd97",
        "f8bce584-981a-4415-b3fc-f1206668a9e5",
        "e337e91a-e700-47d5-864f-c9417d634e45",
        "ce32c131-6109-45d2-99e6-392ba5126684",
        "df33e539-ac02-45e3-a607-e52a8c8a0553",
        "8b8d1d77-71d7-4f55-bf95-88009710e9f3",
        "bfbdc446-ebe8-4777-a695-ccbcbfa522d9"
      ],
      "metadata": {
        "source": "https://paulgraham.com/lesson.html",
        "title": "The Lesson to Unlearn",
        "language": null
      }
    },
    "8d963132-457e-4acf-8848-e17995edf9d0": {
      "node_ids": [
        "93e92bf5-1811-4469-83df-7ca1ab0ded89",
        "a1a800d7-018f-40ab-8395-190ec5a0d2bc",
        "c3d32185-6823-4b80-a3e1-b8af8c856256",
        "783cc29a-47e7-474b-b573-27cfabf7aeab",
        "c776261b-c258-4f37-b0b3-bdeddb50a453",
        "0d3456a6-9271-4d48-a0cb-524c6237e3ae",
        "c3f99a26-ac33-4e02-8b1d-1120cbe6177e",
        "f2840fcb-6583-4692-950e-d6140b21c0e9",
        "7403bb3f-4234-42ef-8414-5461478373b7"
      ],
      "metadata": {
        "source": "https://paulgraham.com/lies.html",
        "title": "Lies We Tell Kids",
        "language": null
      }
    }
  }
}
